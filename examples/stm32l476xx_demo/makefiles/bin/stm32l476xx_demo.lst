
../makefiles/bin/stm32l476xx_demo.elf:     file format elf32-littlearm


Disassembly of section .isr_vector:

08000000 <__isr_vectors>:
 8000000:	00 00 01 20 9d 02 00 08 a3 02 00 08 a7 02 00 08     ... ............
 8000010:	f1 02 00 08 f5 02 00 08 3d 03 00 08 00 00 00 00     ........=.......
	...
 800002c:	85 03 00 08 89 03 00 08 00 00 00 00 8d 03 00 08     ................
 800003c:	dd 2d 00 08 a3 03 00 08 a9 03 00 08 af 03 00 08     .-..............
 800004c:	b5 03 00 08 bb 03 00 08 c1 03 00 08 c7 03 00 08     ................
 800005c:	cd 03 00 08 d3 03 00 08 d9 03 00 08 df 03 00 08     ................
 800006c:	e5 03 00 08 eb 03 00 08 f1 03 00 08 f7 03 00 08     ................
 800007c:	fd 03 00 08 03 04 00 08 09 04 00 08 0f 04 00 08     ................
 800008c:	15 04 00 08 1b 04 00 08 21 04 00 08 27 04 00 08     ........!...'...
 800009c:	2d 04 00 08 33 04 00 08 39 04 00 08 3f 04 00 08     -...3...9...?...
 80000ac:	45 04 00 08 4b 04 00 08 79 16 00 08 57 04 00 08     E...K...y...W...
 80000bc:	5d 04 00 08 63 04 00 08 69 04 00 08 6f 04 00 08     ]...c...i...o...
 80000cc:	75 04 00 08 7b 04 00 08 81 04 00 08 87 04 00 08     u...{...........
 80000dc:	8d 04 00 08 93 04 00 08 99 04 00 08 9f 04 00 08     ................
 80000ec:	a5 04 00 08 ab 04 00 08 b1 04 00 08 b7 04 00 08     ................
 80000fc:	bd 04 00 08 c3 04 00 08 c9 04 00 08 cf 04 00 08     ................
 800010c:	d5 04 00 08 db 04 00 08 e1 04 00 08 55 16 00 08     ............U...
 800011c:	ed 04 00 08 f3 04 00 08 f9 04 00 08 ff 04 00 08     ................
 800012c:	05 05 00 08 0b 05 00 08 11 05 00 08 17 05 00 08     ................
 800013c:	1d 05 00 08 23 05 00 08 29 05 00 08 2f 05 00 08     ....#...).../...
 800014c:	35 05 00 08 3b 05 00 08 41 05 00 08 47 05 00 08     5...;...A...G...
 800015c:	4d 05 00 08 53 05 00 08 59 05 00 08 5f 05 00 08     M...S...Y..._...
 800016c:	65 05 00 08 6b 05 00 08 71 05 00 08 77 05 00 08     e...k...q...w...
 800017c:	00 00 00 00 7d 05 00 08 83 05 00 08                 ....}.......

08000188 <_start>:
// For the call to work, and for the call to __initialize_hardware_early()
// to work, the reset stack must point to a valid internal RAM area.

void __attribute__ ((section(".after_vectors"),noreturn,weak))
_start (void)
{
 8000188:	b500      	push	{lr}
 800018a:	b083      	sub	sp, #12
  // enabled and require an early sequence to disable it.
  //
  // Also useful on platform with external RAM, that need to be
  // initialised before filling the BSS section.

  __initialize_hardware_early ();
 800018c:	f001 f94e 	bl	800142c <__initialize_hardware_early>

  // Use Old Style DATA and BSS section initialisation,
  // that will manage a single BSS sections.

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __data_begin_guard = DATA_GUARD_BAD_VALUE;
 8000190:	4b30      	ldr	r3, [pc, #192]	; (8000254 <_start+0xcc>)
 8000192:	4a31      	ldr	r2, [pc, #196]	; (8000258 <_start+0xd0>)
 8000194:	6013      	str	r3, [r2, #0]
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 8000196:	4a31      	ldr	r2, [pc, #196]	; (800025c <_start+0xd4>)
 8000198:	6013      	str	r3, [r2, #0]
  unsigned int *p = region_begin;
 800019a:	4b31      	ldr	r3, [pc, #196]	; (8000260 <_start+0xd8>)
  __data_end_guard = DATA_GUARD_BAD_VALUE;
 800019c:	4a31      	ldr	r2, [pc, #196]	; (8000264 <_start+0xdc>)
  while (p < region_end)
 800019e:	4932      	ldr	r1, [pc, #200]	; (8000268 <_start+0xe0>)
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d204      	bcs.n	80001ae <_start+0x26>
    *p++ = *from++;
 80001a4:	6811      	ldr	r1, [r2, #0]
 80001a6:	6019      	str	r1, [r3, #0]
 80001a8:	3304      	adds	r3, #4
 80001aa:	3204      	adds	r2, #4
 80001ac:	e7f7      	b.n	800019e <_start+0x16>
    }

#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__data_begin_guard != DATA_BEGIN_GUARD_VALUE)
 80001ae:	4b2a      	ldr	r3, [pc, #168]	; (8000258 <_start+0xd0>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b2e      	ldr	r3, [pc, #184]	; (800026c <_start+0xe4>)
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d000      	beq.n	80001ba <_start+0x32>
 80001b8:	e7fe      	b.n	80001b8 <_start+0x30>
      || (__data_end_guard != DATA_END_GUARD_VALUE))
 80001ba:	4b28      	ldr	r3, [pc, #160]	; (800025c <_start+0xd4>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b2c      	ldr	r3, [pc, #176]	; (8000270 <_start+0xe8>)
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d1f9      	bne.n	80001b8 <_start+0x30>
	;
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  __bss_begin_guard = BSS_GUARD_BAD_VALUE;
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <_start+0xcc>)
 80001c6:	4a2b      	ldr	r2, [pc, #172]	; (8000274 <_start+0xec>)
 80001c8:	6013      	str	r3, [r2, #0]
  __bss_end_guard = BSS_GUARD_BAD_VALUE;
 80001ca:	4a2b      	ldr	r2, [pc, #172]	; (8000278 <_start+0xf0>)
 80001cc:	6013      	str	r3, [r2, #0]
  unsigned int *p = region_begin;
 80001ce:	4b2b      	ldr	r3, [pc, #172]	; (800027c <_start+0xf4>)
 80001d0:	e002      	b.n	80001d8 <_start+0x50>
    *p++ = 0;
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	3304      	adds	r3, #4
  while (p < region_end)
 80001d8:	4a29      	ldr	r2, [pc, #164]	; (8000280 <_start+0xf8>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d3f9      	bcc.n	80001d2 <_start+0x4a>
      __initialize_bss (region_begin, region_end);
    }
#endif

#if defined(DEBUG) && (OS_INCLUDE_STARTUP_GUARD_CHECKS)
  if ((__bss_begin_guard != 0) || (__bss_end_guard != 0))
 80001de:	4b25      	ldr	r3, [pc, #148]	; (8000274 <_start+0xec>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b913      	cbnz	r3, 80001ea <_start+0x62>
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <_start+0xf0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	b103      	cbz	r3, 80001ec <_start+0x64>
 80001ea:	e7fe      	b.n	80001ea <_start+0x62>
    }
#endif

  // Hook to continue the initialisations. Usually compute and store the
  // clock frequency in the global CMSIS variable, cleared above.
  __initialize_hardware ();
 80001ec:	f001 f92a 	bl	8001444 <__initialize_hardware>

  // Get the argc/argv (useful in semihosting configurations).
  int argc;
  char** argv;
  __initialize_args (&argc, &argv);
 80001f0:	4669      	mov	r1, sp
 80001f2:	a801      	add	r0, sp, #4
 80001f4:	f001 f8f6 	bl	80013e4 <__initialize_args>
  count = __preinit_array_end - __preinit_array_start;
 80001f8:	4c22      	ldr	r4, [pc, #136]	; (8000284 <_start+0xfc>)
 80001fa:	4b23      	ldr	r3, [pc, #140]	; (8000288 <_start+0x100>)
 80001fc:	1ae4      	subs	r4, r4, r3
 80001fe:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 8000200:	2500      	movs	r5, #0
 8000202:	42ac      	cmp	r4, r5
 8000204:	dc14      	bgt.n	8000230 <_start+0xa8>
  count = __init_array_end - __init_array_start;
 8000206:	4c21      	ldr	r4, [pc, #132]	; (800028c <_start+0x104>)
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <_start+0x108>)
 800020a:	1ae4      	subs	r4, r4, r3
 800020c:	10a4      	asrs	r4, r4, #2
  for (i = 0; i < count; i++)
 800020e:	2500      	movs	r5, #0
 8000210:	42ac      	cmp	r4, r5
 8000212:	dc13      	bgt.n	800023c <_start+0xb4>
  // Call the standard library initialisation (mandatory for C++ to
  // execute the constructors for the static objects).
  __run_init_array ();

  // Call the main entry point, and save the exit code.
  int code = main (argc, argv);
 8000214:	9900      	ldr	r1, [sp, #0]
 8000216:	9801      	ldr	r0, [sp, #4]
 8000218:	f002 f9e2 	bl	80025e0 <main>
 800021c:	4605      	mov	r5, r0
  count = __fini_array_end - __fini_array_start;
 800021e:	4c1d      	ldr	r4, [pc, #116]	; (8000294 <_start+0x10c>)
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <_start+0x110>)
 8000222:	1ae4      	subs	r4, r4, r3
 8000224:	10a4      	asrs	r4, r4, #2
  for (i = count; i > 0; i--)
 8000226:	2c00      	cmp	r4, #0
 8000228:	dc0e      	bgt.n	8000248 <_start+0xc0>

  // Run the C++ static destructors.
  __run_fini_array ();

  _exit (code);
 800022a:	4628      	mov	r0, r5
 800022c:	f001 f8b6 	bl	800139c <_exit>
    __preinit_array_start[i] ();
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <_start+0x100>)
 8000232:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8000236:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000238:	3501      	adds	r5, #1
 800023a:	e7e2      	b.n	8000202 <_start+0x7a>
    __init_array_start[i] ();
 800023c:	4b14      	ldr	r3, [pc, #80]	; (8000290 <_start+0x108>)
 800023e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8000242:	4798      	blx	r3
  for (i = 0; i < count; i++)
 8000244:	3501      	adds	r5, #1
 8000246:	e7e3      	b.n	8000210 <_start+0x88>
    __fini_array_start[i - 1] ();
 8000248:	3c01      	subs	r4, #1
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <_start+0x110>)
 800024c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000250:	4798      	blx	r3
 8000252:	e7e8      	b.n	8000226 <_start+0x9e>
 8000254:	cadebaba 	.word	0xcadebaba
 8000258:	20000000 	.word	0x20000000
 800025c:	200000d8 	.word	0x200000d8
 8000260:	20000000 	.word	0x20000000
 8000264:	0800ab54 	.word	0x0800ab54
 8000268:	200000dc 	.word	0x200000dc
 800026c:	12345678 	.word	0x12345678
 8000270:	98765432 	.word	0x98765432
 8000274:	200000dc 	.word	0x200000dc
 8000278:	20000580 	.word	0x20000580
 800027c:	200000dc 	.word	0x200000dc
 8000280:	20000584 	.word	0x20000584
 8000284:	080005b0 	.word	0x080005b0
 8000288:	080005b0 	.word	0x080005b0
 800028c:	080005b0 	.word	0x080005b0
 8000290:	080005b0 	.word	0x080005b0
 8000294:	080005b0 	.word	0x080005b0
 8000298:	080005b0 	.word	0x080005b0

0800029c <Reset_Handler>:

// The DEBUG version is not naked, but has a proper stack frame,
// to allow setting breakpoints at Reset_Handler.
void __attribute__ ((section(".after_vectors"),noreturn))
Reset_Handler (void)
{
 800029c:	b508      	push	{r3, lr}
  _start ();
 800029e:	f7ff ff73 	bl	8000188 <_start>

080002a2 <NMI_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
NMI_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80002a2:	be00      	bkpt	0x0000
 80002a4:	e7fe      	b.n	80002a4 <NMI_Handler+0x2>

080002a6 <HardFault_Handler>:
// Cortex-M4 Processors, Third Edition, Chap. 12.8, page 402).

void __attribute__ ((section(".after_vectors"),weak,naked))
HardFault_Handler (void)
{
  asm volatile(
 80002a6:	f01e 0f04 	tst.w	lr, #4
 80002aa:	bf0c      	ite	eq
 80002ac:	f3ef 8008 	mrseq	r0, MSP
 80002b0:	f3ef 8009 	mrsne	r0, PSP
 80002b4:	4671      	mov	r1, lr
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <PendSV_Handler+0x8>)
 80002b8:	4710      	bx	r2

080002ba <HardFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
HardFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                     uint32_t lr __attribute__((unused)))
{
 80002ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	4604      	mov	r4, r0
 80002c2:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 80002c4:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <HardFault_Handler_C+0x2e>)
 80002c6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 80002c8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 80002ca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    }

#endif

#if defined(TRACE)
  trace_printf ("[HardFault]\n");
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <HardFault_Handler_C+0x32>)
 80002ce:	f001 f891 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 80002d2:	f8cd 8000 	str.w	r8, [sp]
 80002d6:	463b      	mov	r3, r7
 80002d8:	4632      	mov	r2, r6
 80002da:	4629      	mov	r1, r5
 80002dc:	4620      	mov	r0, r4
 80002de:	f001 f8b5 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 80002e2:	be00      	bkpt	0x0000
 80002e4:	e7fe      	b.n	80002e4 <HardFault_Handler_C+0x2a>
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	08004b70 	.word	0x08004b70

080002f0 <MemManage_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
MemManage_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 80002f0:	be00      	bkpt	0x0000
 80002f2:	e7fe      	b.n	80002f2 <MemManage_Handler+0x2>

080002f4 <BusFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
BusFault_Handler (void)
{
  asm volatile(
 80002f4:	f01e 0f04 	tst.w	lr, #4
 80002f8:	bf0c      	ite	eq
 80002fa:	f3ef 8008 	mrseq	r0, MSP
 80002fe:	f3ef 8009 	mrsne	r0, PSP
 8000302:	4671      	mov	r1, lr
 8000304:	4a24      	ldr	r2, [pc, #144]	; (8000398 <PendSV_Handler+0xc>)
 8000306:	4710      	bx	r2

08000308 <BusFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
BusFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                    uint32_t lr __attribute__((unused)))
{
 8000308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800030c:	b082      	sub	sp, #8
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <BusFault_Handler_C+0x2c>)
 8000314:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 8000316:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000318:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  trace_printf ("[BusFault]\n");
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <BusFault_Handler_C+0x30>)
 800031c:	f001 f86a 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000320:	f8cd 8000 	str.w	r8, [sp]
 8000324:	463b      	mov	r3, r7
 8000326:	4632      	mov	r2, r6
 8000328:	4629      	mov	r1, r5
 800032a:	4620      	mov	r0, r4
 800032c:	f001 f88e 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000330:	be00      	bkpt	0x0000
 8000332:	e7fe      	b.n	8000332 <BusFault_Handler_C+0x2a>
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	08004b80 	.word	0x08004b80

0800033c <UsageFault_Handler>:
}

void __attribute__ ((section(".after_vectors"),weak,naked))
UsageFault_Handler (void)
{
  asm volatile(
 800033c:	f01e 0f04 	tst.w	lr, #4
 8000340:	bf0c      	ite	eq
 8000342:	f3ef 8008 	mrseq	r0, MSP
 8000346:	f3ef 8009 	mrsne	r0, PSP
 800034a:	4671      	mov	r1, lr
 800034c:	4a13      	ldr	r2, [pc, #76]	; (800039c <PendSV_Handler+0x10>)
 800034e:	4710      	bx	r2

08000350 <UsageFault_Handler_C>:
}

void __attribute__ ((section(".after_vectors"),weak,used))
UsageFault_Handler_C (ExceptionStackFrame* frame __attribute__((unused)),
                      uint32_t lr __attribute__((unused)))
{
 8000350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000354:	b082      	sub	sp, #8
 8000356:	4604      	mov	r4, r0
 8000358:	4688      	mov	r8, r1
#if defined(TRACE)
  uint32_t mmfar = SCB->MMFAR; // MemManage Fault Address
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <UsageFault_Handler_C+0x2c>)
 800035c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  uint32_t bfar = SCB->BFAR; // Bus Fault Address
 800035e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t cfsr = SCB->CFSR; // Configurable Fault Status Registers
 8000360:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    }

#endif

#if defined(TRACE)
  trace_printf ("[UsageFault]\n");
 8000362:	4807      	ldr	r0, [pc, #28]	; (8000380 <UsageFault_Handler_C+0x30>)
 8000364:	f001 f846 	bl	80013f4 <trace_printf>
  dumpExceptionStack (frame, cfsr, mmfar, bfar, lr);
 8000368:	f8cd 8000 	str.w	r8, [sp]
 800036c:	463b      	mov	r3, r7
 800036e:	4632      	mov	r2, r6
 8000370:	4629      	mov	r1, r5
 8000372:	4620      	mov	r0, r4
 8000374:	f001 f86a 	bl	800144c <dumpExceptionStack>
#endif // defined(TRACE)

#if defined(DEBUG)
  __DEBUG_BKPT();
 8000378:	be00      	bkpt	0x0000
 800037a:	e7fe      	b.n	800037a <UsageFault_Handler_C+0x2a>
 800037c:	e000ed00 	.word	0xe000ed00
 8000380:	08004b8c 	.word	0x08004b8c

08000384 <SVC_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
SVC_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000384:	be00      	bkpt	0x0000
 8000386:	e7fe      	b.n	8000386 <SVC_Handler+0x2>

08000388 <DebugMon_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
DebugMon_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 8000388:	be00      	bkpt	0x0000
 800038a:	e7fe      	b.n	800038a <DebugMon_Handler+0x2>

0800038c <PendSV_Handler>:

void __attribute__ ((section(".after_vectors"),weak))
PendSV_Handler (void)
{
#if defined(DEBUG)
  __DEBUG_BKPT();
 800038c:	be00      	bkpt	0x0000
 800038e:	e7fe      	b.n	800038e <PendSV_Handler+0x2>
SysTick_Handler (void)
{
  // DO NOT loop, just return.
  // Useful in case someone (like STM HAL) inadvertently enables SysTick.
  ;
}
 8000390:	4770      	bx	lr
 8000392:	0000      	.short	0x0000
 8000394:	080002bb 	.word	0x080002bb
 8000398:	08000309 	.word	0x08000309
 800039c:	08000351 	.word	0x08000351

080003a0 <Default_Handler>:

// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.

void __attribute__ ((section(".after_vectors")))
Default_Handler(void) {
 80003a0:	e7fe      	b.n	80003a0 <Default_Handler>

080003a2 <WWDG_IRQHandler>:
    while (1) {
    }
}

void __attribute__ ((weak, section(".after_vectors"))) WWDG_IRQHandler() {
 80003a2:	b508      	push	{r3, lr}
                          Default_Handler();
 80003a4:	f7ff fffc 	bl	80003a0 <Default_Handler>

080003a8 <PVD_PVM_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) PVD_PVM_IRQHandler() {
 80003a8:	b508      	push	{r3, lr}
                          Default_Handler();
 80003aa:	f7ff fff9 	bl	80003a0 <Default_Handler>

080003ae <TAMP_STAMP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TAMP_STAMP_IRQHandler() {
 80003ae:	b508      	push	{r3, lr}
                          Default_Handler();
 80003b0:	f7ff fff6 	bl	80003a0 <Default_Handler>

080003b4 <RTC_WKUP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RTC_WKUP_IRQHandler() {
 80003b4:	b508      	push	{r3, lr}
                          Default_Handler();
 80003b6:	f7ff fff3 	bl	80003a0 <Default_Handler>

080003ba <FLASH_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FLASH_IRQHandler() {
 80003ba:	b508      	push	{r3, lr}
                          Default_Handler();
 80003bc:	f7ff fff0 	bl	80003a0 <Default_Handler>

080003c0 <RCC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RCC_IRQHandler() {
 80003c0:	b508      	push	{r3, lr}
                          Default_Handler();
 80003c2:	f7ff ffed 	bl	80003a0 <Default_Handler>

080003c6 <EXTI0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI0_IRQHandler() {
 80003c6:	b508      	push	{r3, lr}
                          Default_Handler();
 80003c8:	f7ff ffea 	bl	80003a0 <Default_Handler>

080003cc <EXTI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI1_IRQHandler() {
 80003cc:	b508      	push	{r3, lr}
                          Default_Handler();
 80003ce:	f7ff ffe7 	bl	80003a0 <Default_Handler>

080003d2 <EXTI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI2_IRQHandler() {
 80003d2:	b508      	push	{r3, lr}
                          Default_Handler();
 80003d4:	f7ff ffe4 	bl	80003a0 <Default_Handler>

080003d8 <EXTI3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI3_IRQHandler() {
 80003d8:	b508      	push	{r3, lr}
                          Default_Handler();
 80003da:	f7ff ffe1 	bl	80003a0 <Default_Handler>

080003de <EXTI4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI4_IRQHandler() {
 80003de:	b508      	push	{r3, lr}
                          Default_Handler();
 80003e0:	f7ff ffde 	bl	80003a0 <Default_Handler>

080003e4 <DMA1_Channel1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel1_IRQHandler() {
 80003e4:	b508      	push	{r3, lr}
                          Default_Handler();
 80003e6:	f7ff ffdb 	bl	80003a0 <Default_Handler>

080003ea <DMA1_Channel2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel2_IRQHandler() {
 80003ea:	b508      	push	{r3, lr}
                          Default_Handler();
 80003ec:	f7ff ffd8 	bl	80003a0 <Default_Handler>

080003f0 <DMA1_Channel3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel3_IRQHandler() {
 80003f0:	b508      	push	{r3, lr}
                          Default_Handler();
 80003f2:	f7ff ffd5 	bl	80003a0 <Default_Handler>

080003f6 <DMA1_Channel4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel4_IRQHandler() {
 80003f6:	b508      	push	{r3, lr}
                          Default_Handler();
 80003f8:	f7ff ffd2 	bl	80003a0 <Default_Handler>

080003fc <DMA1_Channel5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel5_IRQHandler() {
 80003fc:	b508      	push	{r3, lr}
                          Default_Handler();
 80003fe:	f7ff ffcf 	bl	80003a0 <Default_Handler>

08000402 <DMA1_Channel6_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel6_IRQHandler() {
 8000402:	b508      	push	{r3, lr}
                          Default_Handler();
 8000404:	f7ff ffcc 	bl	80003a0 <Default_Handler>

08000408 <DMA1_Channel7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA1_Channel7_IRQHandler() {
 8000408:	b508      	push	{r3, lr}
                          Default_Handler();
 800040a:	f7ff ffc9 	bl	80003a0 <Default_Handler>

0800040e <ADC1_2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) ADC1_2_IRQHandler() {
 800040e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000410:	f7ff ffc6 	bl	80003a0 <Default_Handler>

08000414 <CAN1_TX_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_TX_IRQHandler() {
 8000414:	b508      	push	{r3, lr}
                          Default_Handler();
 8000416:	f7ff ffc3 	bl	80003a0 <Default_Handler>

0800041a <CAN1_RX0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX0_IRQHandler() {
 800041a:	b508      	push	{r3, lr}
                          Default_Handler();
 800041c:	f7ff ffc0 	bl	80003a0 <Default_Handler>

08000420 <CAN1_RX1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_RX1_IRQHandler() {
 8000420:	b508      	push	{r3, lr}
                          Default_Handler();
 8000422:	f7ff ffbd 	bl	80003a0 <Default_Handler>

08000426 <CAN1_SCE_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) CAN1_SCE_IRQHandler() {
 8000426:	b508      	push	{r3, lr}
                          Default_Handler();
 8000428:	f7ff ffba 	bl	80003a0 <Default_Handler>

0800042c <EXTI9_5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI9_5_IRQHandler() {
 800042c:	b508      	push	{r3, lr}
                          Default_Handler();
 800042e:	f7ff ffb7 	bl	80003a0 <Default_Handler>

08000432 <TIM1_BRK_TIM15_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_BRK_TIM15_IRQHandler() {
 8000432:	b508      	push	{r3, lr}
                          Default_Handler();
 8000434:	f7ff ffb4 	bl	80003a0 <Default_Handler>

08000438 <TIM1_UP_TIM16_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_UP_TIM16_IRQHandler() {
 8000438:	b508      	push	{r3, lr}
                          Default_Handler();
 800043a:	f7ff ffb1 	bl	80003a0 <Default_Handler>

0800043e <TIM1_TRG_COM_TIM17_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_TRG_COM_TIM17_IRQHandler() {
 800043e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000440:	f7ff ffae 	bl	80003a0 <Default_Handler>

08000444 <TIM1_CC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM1_CC_IRQHandler() {
 8000444:	b508      	push	{r3, lr}
                          Default_Handler();
 8000446:	f7ff ffab 	bl	80003a0 <Default_Handler>

0800044a <TIM2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM2_IRQHandler() {
 800044a:	b508      	push	{r3, lr}
                          Default_Handler();
 800044c:	f7ff ffa8 	bl	80003a0 <Default_Handler>
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM3_IRQHandler() {
 8000450:	b508      	push	{r3, lr}
                          Default_Handler();
 8000452:	f7ff ffa5 	bl	80003a0 <Default_Handler>

08000456 <TIM4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM4_IRQHandler() {
 8000456:	b508      	push	{r3, lr}
                          Default_Handler();
 8000458:	f7ff ffa2 	bl	80003a0 <Default_Handler>

0800045c <I2C1_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C1_EV_IRQHandler() {
 800045c:	b508      	push	{r3, lr}
                          Default_Handler();
 800045e:	f7ff ff9f 	bl	80003a0 <Default_Handler>

08000462 <I2C1_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C1_ER_IRQHandler() {
 8000462:	b508      	push	{r3, lr}
                          Default_Handler();
 8000464:	f7ff ff9c 	bl	80003a0 <Default_Handler>

08000468 <I2C2_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C2_EV_IRQHandler() {
 8000468:	b508      	push	{r3, lr}
                          Default_Handler();
 800046a:	f7ff ff99 	bl	80003a0 <Default_Handler>

0800046e <I2C2_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C2_ER_IRQHandler() {
 800046e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000470:	f7ff ff96 	bl	80003a0 <Default_Handler>

08000474 <SPI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI1_IRQHandler() {
 8000474:	b508      	push	{r3, lr}
                          Default_Handler();
 8000476:	f7ff ff93 	bl	80003a0 <Default_Handler>

0800047a <SPI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI2_IRQHandler() {
 800047a:	b508      	push	{r3, lr}
                          Default_Handler();
 800047c:	f7ff ff90 	bl	80003a0 <Default_Handler>

08000480 <USART1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART1_IRQHandler() {
 8000480:	b508      	push	{r3, lr}
                          Default_Handler();
 8000482:	f7ff ff8d 	bl	80003a0 <Default_Handler>

08000486 <USART2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART2_IRQHandler() {
 8000486:	b508      	push	{r3, lr}
                          Default_Handler();
 8000488:	f7ff ff8a 	bl	80003a0 <Default_Handler>

0800048c <USART3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) USART3_IRQHandler() {
 800048c:	b508      	push	{r3, lr}
                          Default_Handler();
 800048e:	f7ff ff87 	bl	80003a0 <Default_Handler>

08000492 <EXTI15_10_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) EXTI15_10_IRQHandler() {
 8000492:	b508      	push	{r3, lr}
                          Default_Handler();
 8000494:	f7ff ff84 	bl	80003a0 <Default_Handler>

08000498 <RTC_Alarm_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RTC_Alarm_IRQHandler() {
 8000498:	b508      	push	{r3, lr}
                          Default_Handler();
 800049a:	f7ff ff81 	bl	80003a0 <Default_Handler>

0800049e <DFSDM1_FLT3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT3_IRQHandler() {
 800049e:	b508      	push	{r3, lr}
                          Default_Handler();
 80004a0:	f7ff ff7e 	bl	80003a0 <Default_Handler>

080004a4 <TIM8_BRK_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_BRK_IRQHandler() {
 80004a4:	b508      	push	{r3, lr}
                          Default_Handler();
 80004a6:	f7ff ff7b 	bl	80003a0 <Default_Handler>

080004aa <TIM8_UP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_UP_IRQHandler() {
 80004aa:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ac:	f7ff ff78 	bl	80003a0 <Default_Handler>

080004b0 <TIM8_TRG_COM_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_TRG_COM_IRQHandler() {
 80004b0:	b508      	push	{r3, lr}
                          Default_Handler();
 80004b2:	f7ff ff75 	bl	80003a0 <Default_Handler>

080004b6 <TIM8_CC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM8_CC_IRQHandler() {
 80004b6:	b508      	push	{r3, lr}
                          Default_Handler();
 80004b8:	f7ff ff72 	bl	80003a0 <Default_Handler>

080004bc <ADC3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) ADC3_IRQHandler() {
 80004bc:	b508      	push	{r3, lr}
                          Default_Handler();
 80004be:	f7ff ff6f 	bl	80003a0 <Default_Handler>

080004c2 <FMC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FMC_IRQHandler() {
 80004c2:	b508      	push	{r3, lr}
                          Default_Handler();
 80004c4:	f7ff ff6c 	bl	80003a0 <Default_Handler>

080004c8 <SDMMC1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SDMMC1_IRQHandler() {
 80004c8:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ca:	f7ff ff69 	bl	80003a0 <Default_Handler>

080004ce <TIM5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM5_IRQHandler() {
 80004ce:	b508      	push	{r3, lr}
                          Default_Handler();
 80004d0:	f7ff ff66 	bl	80003a0 <Default_Handler>

080004d4 <SPI3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SPI3_IRQHandler() {
 80004d4:	b508      	push	{r3, lr}
                          Default_Handler();
 80004d6:	f7ff ff63 	bl	80003a0 <Default_Handler>

080004da <UART4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) UART4_IRQHandler() {
 80004da:	b508      	push	{r3, lr}
                          Default_Handler();
 80004dc:	f7ff ff60 	bl	80003a0 <Default_Handler>

080004e0 <UART5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) UART5_IRQHandler() {
 80004e0:	b508      	push	{r3, lr}
                          Default_Handler();
 80004e2:	f7ff ff5d 	bl	80003a0 <Default_Handler>
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM6_DAC_IRQHandler() {
 80004e6:	b508      	push	{r3, lr}
                          Default_Handler();
 80004e8:	f7ff ff5a 	bl	80003a0 <Default_Handler>

080004ec <TIM7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TIM7_IRQHandler() {
 80004ec:	b508      	push	{r3, lr}
                          Default_Handler();
 80004ee:	f7ff ff57 	bl	80003a0 <Default_Handler>

080004f2 <DMA2_Channel1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel1_IRQHandler() {
 80004f2:	b508      	push	{r3, lr}
                          Default_Handler();
 80004f4:	f7ff ff54 	bl	80003a0 <Default_Handler>

080004f8 <DMA2_Channel2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel2_IRQHandler() {
 80004f8:	b508      	push	{r3, lr}
                          Default_Handler();
 80004fa:	f7ff ff51 	bl	80003a0 <Default_Handler>

080004fe <DMA2_Channel3_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel3_IRQHandler() {
 80004fe:	b508      	push	{r3, lr}
                          Default_Handler();
 8000500:	f7ff ff4e 	bl	80003a0 <Default_Handler>

08000504 <DMA2_Channel4_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel4_IRQHandler() {
 8000504:	b508      	push	{r3, lr}
                          Default_Handler();
 8000506:	f7ff ff4b 	bl	80003a0 <Default_Handler>

0800050a <DMA2_Channel5_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel5_IRQHandler() {
 800050a:	b508      	push	{r3, lr}
                          Default_Handler();
 800050c:	f7ff ff48 	bl	80003a0 <Default_Handler>

08000510 <DFSDM1_FLT0_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT0_IRQHandler() {
 8000510:	b508      	push	{r3, lr}
                          Default_Handler();
 8000512:	f7ff ff45 	bl	80003a0 <Default_Handler>

08000516 <DFSDM1_FLT1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT1_IRQHandler() {
 8000516:	b508      	push	{r3, lr}
                          Default_Handler();
 8000518:	f7ff ff42 	bl	80003a0 <Default_Handler>

0800051c <DFSDM1_FLT2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DFSDM1_FLT2_IRQHandler() {
 800051c:	b508      	push	{r3, lr}
                          Default_Handler();
 800051e:	f7ff ff3f 	bl	80003a0 <Default_Handler>

08000522 <COMP_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) COMP_IRQHandler() {
 8000522:	b508      	push	{r3, lr}
                          Default_Handler();
 8000524:	f7ff ff3c 	bl	80003a0 <Default_Handler>

08000528 <LPTIM1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPTIM1_IRQHandler() {
 8000528:	b508      	push	{r3, lr}
                          Default_Handler();
 800052a:	f7ff ff39 	bl	80003a0 <Default_Handler>

0800052e <LPTIM2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPTIM2_IRQHandler() {
 800052e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000530:	f7ff ff36 	bl	80003a0 <Default_Handler>

08000534 <OTG_FS_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) OTG_FS_IRQHandler() {
 8000534:	b508      	push	{r3, lr}
                          Default_Handler();
 8000536:	f7ff ff33 	bl	80003a0 <Default_Handler>

0800053a <DMA2_Channel6_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel6_IRQHandler() {
 800053a:	b508      	push	{r3, lr}
                          Default_Handler();
 800053c:	f7ff ff30 	bl	80003a0 <Default_Handler>

08000540 <DMA2_Channel7_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) DMA2_Channel7_IRQHandler() {
 8000540:	b508      	push	{r3, lr}
                          Default_Handler();
 8000542:	f7ff ff2d 	bl	80003a0 <Default_Handler>

08000546 <LPUART1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LPUART1_IRQHandler() {
 8000546:	b508      	push	{r3, lr}
                          Default_Handler();
 8000548:	f7ff ff2a 	bl	80003a0 <Default_Handler>

0800054c <QUADSPI_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) QUADSPI_IRQHandler() {
 800054c:	b508      	push	{r3, lr}
                          Default_Handler();
 800054e:	f7ff ff27 	bl	80003a0 <Default_Handler>

08000552 <I2C3_EV_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C3_EV_IRQHandler() {
 8000552:	b508      	push	{r3, lr}
                          Default_Handler();
 8000554:	f7ff ff24 	bl	80003a0 <Default_Handler>

08000558 <I2C3_ER_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) I2C3_ER_IRQHandler() {
 8000558:	b508      	push	{r3, lr}
                          Default_Handler();
 800055a:	f7ff ff21 	bl	80003a0 <Default_Handler>

0800055e <SAI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SAI1_IRQHandler() {
 800055e:	b508      	push	{r3, lr}
                          Default_Handler();
 8000560:	f7ff ff1e 	bl	80003a0 <Default_Handler>

08000564 <SAI2_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SAI2_IRQHandler() {
 8000564:	b508      	push	{r3, lr}
                          Default_Handler();
 8000566:	f7ff ff1b 	bl	80003a0 <Default_Handler>

0800056a <SWPMI1_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) SWPMI1_IRQHandler() {
 800056a:	b508      	push	{r3, lr}
                          Default_Handler();
 800056c:	f7ff ff18 	bl	80003a0 <Default_Handler>

08000570 <TSC_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) TSC_IRQHandler() {
 8000570:	b508      	push	{r3, lr}
                          Default_Handler();
 8000572:	f7ff ff15 	bl	80003a0 <Default_Handler>

08000576 <LCD_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) LCD_IRQHandler() {
 8000576:	b508      	push	{r3, lr}
                          Default_Handler();
 8000578:	f7ff ff12 	bl	80003a0 <Default_Handler>

0800057c <RNG_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) RNG_IRQHandler() {
 800057c:	b508      	push	{r3, lr}
                          Default_Handler();
 800057e:	f7ff ff0f 	bl	80003a0 <Default_Handler>

08000582 <FPU_IRQHandler>:
                      };

void __attribute__ ((weak, section(".after_vectors"))) FPU_IRQHandler() {
 8000582:	b508      	push	{r3, lr}
                          Default_Handler();
 8000584:	f7ff ff0c 	bl	80003a0 <Default_Handler>

Disassembly of section .text:

080005b0 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 80005b0:	b508      	push	{r3, lr}
    displayAlarmTest();
 80005b2:	f001 fee9 	bl	8002388 <displayAlarmTest>
    if (firstStart) {
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <__bss_regions_array_end+0x28>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b14b      	cbz	r3, 80005d0 <testTask+0x20>
        firstStart = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <__bss_regions_array_end+0x28>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
    } else {
        soundHiAlarm();
    }
    osTaskAdd(testTask, 0, 1000);
 80005c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c6:	2100      	movs	r1, #0
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <__bss_regions_array_end+0x2c>)
 80005ca:	f002 fc9b 	bl	8002f04 <osTaskAdd>
}
 80005ce:	bd08      	pop	{r3, pc}
        soundHiAlarm();
 80005d0:	f002 fa1a 	bl	8002a08 <soundHiAlarm>
 80005d4:	e7f5      	b.n	80005c2 <testTask+0x12>
 80005d6:	bf00      	nop
 80005d8:	200000e0 	.word	0x200000e0
 80005dc:	080005b1 	.word	0x080005b1

080005e0 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80005e0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80005e2:	f002 fa03 	bl	80029ec <soundKeyBeep>
}
 80005e6:	bd08      	pop	{r3, pc}

080005e8 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80005e8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80005ea:	f002 f9ff 	bl	80029ec <soundKeyBeep>
    soundStopAlarm();
 80005ee:	f002 fa19 	bl	8002a24 <soundStopAlarm>
    soundSetLevel(3);
 80005f2:	2003      	movs	r0, #3
 80005f4:	f002 f9de 	bl	80029b4 <soundSetLevel>
    osTaskDelHandler(testTask);
 80005f8:	4802      	ldr	r0, [pc, #8]	; (8000604 <buttonNoHandler+0x1c>)
 80005fa:	f002 fcc7 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80005fe:	f000 fdc3 	bl	8001188 <showManualTestsScreen>
}
 8000602:	bd08      	pop	{r3, pc}
 8000604:	080005b1 	.word	0x080005b1

08000608 <startAlarmTest>:

void startAlarmTest() {
 8000608:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800060a:	2400      	movs	r4, #0
 800060c:	e007      	b.n	800061e <startAlarmTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <startAlarmTest+0x2c>)
 8000610:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8000614:	4620      	mov	r0, r4
 8000616:	f002 ff77 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800061a:	3401      	adds	r4, #1
 800061c:	b2e4      	uxtb	r4, r4
 800061e:	2c10      	cmp	r4, #16
 8000620:	d9f5      	bls.n	800060e <startAlarmTest+0x6>
    }

    firstStart = 1;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <startAlarmTest+0x30>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	2100      	movs	r1, #0
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <startAlarmTest+0x34>)
 800062e:	f002 fc69 	bl	8002f04 <osTaskAdd>
}
 8000632:	bd10      	pop	{r4, pc}
 8000634:	080046c0 	.word	0x080046c0
 8000638:	200000e0 	.word	0x200000e0
 800063c:	080005b1 	.word	0x080005b1

08000640 <button6Handler>:
    Button_Power, Button_Last
};

static void button6Handler(uint32_t pressType) {

    if (buttonsTestOrder[testStage] == Button_6) {
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <button6Handler+0x14>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <button6Handler+0x18>)
 8000646:	5cd2      	ldrb	r2, [r2, r3]
 8000648:	b912      	cbnz	r2, 8000650 <button6Handler+0x10>
        testStage++;
 800064a:	3301      	adds	r3, #1
 800064c:	4a01      	ldr	r2, [pc, #4]	; (8000654 <button6Handler+0x14>)
 800064e:	7013      	strb	r3, [r2, #0]
    }
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200000e1 	.word	0x200000e1
 8000658:	08004704 	.word	0x08004704

0800065c <button7Handler>:

static void button7Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_7) {
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <button7Handler+0x18>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <button7Handler+0x1c>)
 8000662:	5cd2      	ldrb	r2, [r2, r3]
 8000664:	2a01      	cmp	r2, #1
 8000666:	d000      	beq.n	800066a <button7Handler+0xe>
        testStage++;
    }
}
 8000668:	4770      	bx	lr
        testStage++;
 800066a:	3301      	adds	r3, #1
 800066c:	4a01      	ldr	r2, [pc, #4]	; (8000674 <button7Handler+0x18>)
 800066e:	7013      	strb	r3, [r2, #0]
}
 8000670:	e7fa      	b.n	8000668 <button7Handler+0xc>
 8000672:	bf00      	nop
 8000674:	200000e1 	.word	0x200000e1
 8000678:	08004704 	.word	0x08004704

0800067c <button8Handler>:

static void button8Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_8) {
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <button8Handler+0x18>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <button8Handler+0x1c>)
 8000682:	5cd2      	ldrb	r2, [r2, r3]
 8000684:	2a02      	cmp	r2, #2
 8000686:	d000      	beq.n	800068a <button8Handler+0xe>
        testStage++;
    }
}
 8000688:	4770      	bx	lr
        testStage++;
 800068a:	3301      	adds	r3, #1
 800068c:	4a01      	ldr	r2, [pc, #4]	; (8000694 <button8Handler+0x18>)
 800068e:	7013      	strb	r3, [r2, #0]
}
 8000690:	e7fa      	b.n	8000688 <button8Handler+0xc>
 8000692:	bf00      	nop
 8000694:	200000e1 	.word	0x200000e1
 8000698:	08004704 	.word	0x08004704

0800069c <button9Handler>:

static void button9Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_9) {
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <button9Handler+0x18>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <button9Handler+0x1c>)
 80006a2:	5cd2      	ldrb	r2, [r2, r3]
 80006a4:	2a03      	cmp	r2, #3
 80006a6:	d000      	beq.n	80006aa <button9Handler+0xe>
        testStage++;
    }
}
 80006a8:	4770      	bx	lr
        testStage++;
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a01      	ldr	r2, [pc, #4]	; (80006b4 <button9Handler+0x18>)
 80006ae:	7013      	strb	r3, [r2, #0]
}
 80006b0:	e7fa      	b.n	80006a8 <button9Handler+0xc>
 80006b2:	bf00      	nop
 80006b4:	200000e1 	.word	0x200000e1
 80006b8:	08004704 	.word	0x08004704

080006bc <button0Handler>:

static void button0Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_0) {
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <button0Handler+0x18>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <button0Handler+0x1c>)
 80006c2:	5cd2      	ldrb	r2, [r2, r3]
 80006c4:	2a04      	cmp	r2, #4
 80006c6:	d000      	beq.n	80006ca <button0Handler+0xe>
        testStage++;
    }
}
 80006c8:	4770      	bx	lr
        testStage++;
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a01      	ldr	r2, [pc, #4]	; (80006d4 <button0Handler+0x18>)
 80006ce:	7013      	strb	r3, [r2, #0]
}
 80006d0:	e7fa      	b.n	80006c8 <button0Handler+0xc>
 80006d2:	bf00      	nop
 80006d4:	200000e1 	.word	0x200000e1
 80006d8:	08004704 	.word	0x08004704

080006dc <buttonInfoHandler>:

static void buttonInfoHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Info) {
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <buttonInfoHandler+0x18>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <buttonInfoHandler+0x1c>)
 80006e2:	5cd2      	ldrb	r2, [r2, r3]
 80006e4:	2a05      	cmp	r2, #5
 80006e6:	d000      	beq.n	80006ea <buttonInfoHandler+0xe>
        testStage++;
    }
}
 80006e8:	4770      	bx	lr
        testStage++;
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a01      	ldr	r2, [pc, #4]	; (80006f4 <buttonInfoHandler+0x18>)
 80006ee:	7013      	strb	r3, [r2, #0]
}
 80006f0:	e7fa      	b.n	80006e8 <buttonInfoHandler+0xc>
 80006f2:	bf00      	nop
 80006f4:	200000e1 	.word	0x200000e1
 80006f8:	08004704 	.word	0x08004704

080006fc <buttonPrimeHandler>:

static void buttonPrimeHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Prime) {
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <buttonPrimeHandler+0x18>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <buttonPrimeHandler+0x1c>)
 8000702:	5cd2      	ldrb	r2, [r2, r3]
 8000704:	2a06      	cmp	r2, #6
 8000706:	d000      	beq.n	800070a <buttonPrimeHandler+0xe>
        testStage++;
    }
}
 8000708:	4770      	bx	lr
        testStage++;
 800070a:	3301      	adds	r3, #1
 800070c:	4a01      	ldr	r2, [pc, #4]	; (8000714 <buttonPrimeHandler+0x18>)
 800070e:	7013      	strb	r3, [r2, #0]
}
 8000710:	e7fa      	b.n	8000708 <buttonPrimeHandler+0xc>
 8000712:	bf00      	nop
 8000714:	200000e1 	.word	0x200000e1
 8000718:	08004704 	.word	0x08004704

0800071c <buttonLockHandler>:

static void buttonLockHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Lock) {
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <buttonLockHandler+0x18>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <buttonLockHandler+0x1c>)
 8000722:	5cd2      	ldrb	r2, [r2, r3]
 8000724:	2a07      	cmp	r2, #7
 8000726:	d000      	beq.n	800072a <buttonLockHandler+0xe>
        testStage++;
    }
}
 8000728:	4770      	bx	lr
        testStage++;
 800072a:	3301      	adds	r3, #1
 800072c:	4a01      	ldr	r2, [pc, #4]	; (8000734 <buttonLockHandler+0x18>)
 800072e:	7013      	strb	r3, [r2, #0]
}
 8000730:	e7fa      	b.n	8000728 <buttonLockHandler+0xc>
 8000732:	bf00      	nop
 8000734:	200000e1 	.word	0x200000e1
 8000738:	08004704 	.word	0x08004704

0800073c <button1Handler>:

static void button1Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_1) {
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <button1Handler+0x18>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <button1Handler+0x1c>)
 8000742:	5cd2      	ldrb	r2, [r2, r3]
 8000744:	2a08      	cmp	r2, #8
 8000746:	d000      	beq.n	800074a <button1Handler+0xe>
        testStage++;
    }
}
 8000748:	4770      	bx	lr
        testStage++;
 800074a:	3301      	adds	r3, #1
 800074c:	4a01      	ldr	r2, [pc, #4]	; (8000754 <button1Handler+0x18>)
 800074e:	7013      	strb	r3, [r2, #0]
}
 8000750:	e7fa      	b.n	8000748 <button1Handler+0xc>
 8000752:	bf00      	nop
 8000754:	200000e1 	.word	0x200000e1
 8000758:	08004704 	.word	0x08004704

0800075c <button2Handler>:

static void button2Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_2) {
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <button2Handler+0x18>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4a05      	ldr	r2, [pc, #20]	; (8000778 <button2Handler+0x1c>)
 8000762:	5cd2      	ldrb	r2, [r2, r3]
 8000764:	2a09      	cmp	r2, #9
 8000766:	d000      	beq.n	800076a <button2Handler+0xe>
        testStage++;
    }
}
 8000768:	4770      	bx	lr
        testStage++;
 800076a:	3301      	adds	r3, #1
 800076c:	4a01      	ldr	r2, [pc, #4]	; (8000774 <button2Handler+0x18>)
 800076e:	7013      	strb	r3, [r2, #0]
}
 8000770:	e7fa      	b.n	8000768 <button2Handler+0xc>
 8000772:	bf00      	nop
 8000774:	200000e1 	.word	0x200000e1
 8000778:	08004704 	.word	0x08004704

0800077c <button3Handler>:

static void button3Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_3) {
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <button3Handler+0x18>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <button3Handler+0x1c>)
 8000782:	5cd2      	ldrb	r2, [r2, r3]
 8000784:	2a0a      	cmp	r2, #10
 8000786:	d000      	beq.n	800078a <button3Handler+0xe>
        testStage++;
    }
}
 8000788:	4770      	bx	lr
        testStage++;
 800078a:	3301      	adds	r3, #1
 800078c:	4a01      	ldr	r2, [pc, #4]	; (8000794 <button3Handler+0x18>)
 800078e:	7013      	strb	r3, [r2, #0]
}
 8000790:	e7fa      	b.n	8000788 <button3Handler+0xc>
 8000792:	bf00      	nop
 8000794:	200000e1 	.word	0x200000e1
 8000798:	08004704 	.word	0x08004704

0800079c <button4Handler>:

static void button4Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_4) {
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <button4Handler+0x18>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <button4Handler+0x1c>)
 80007a2:	5cd2      	ldrb	r2, [r2, r3]
 80007a4:	2a0b      	cmp	r2, #11
 80007a6:	d000      	beq.n	80007aa <button4Handler+0xe>
        testStage++;
    }
}
 80007a8:	4770      	bx	lr
        testStage++;
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a01      	ldr	r2, [pc, #4]	; (80007b4 <button4Handler+0x18>)
 80007ae:	7013      	strb	r3, [r2, #0]
}
 80007b0:	e7fa      	b.n	80007a8 <button4Handler+0xc>
 80007b2:	bf00      	nop
 80007b4:	200000e1 	.word	0x200000e1
 80007b8:	08004704 	.word	0x08004704

080007bc <button5Handler>:

static void button5Handler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_5) {
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <button5Handler+0x18>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4a05      	ldr	r2, [pc, #20]	; (80007d8 <button5Handler+0x1c>)
 80007c2:	5cd2      	ldrb	r2, [r2, r3]
 80007c4:	2a0c      	cmp	r2, #12
 80007c6:	d000      	beq.n	80007ca <button5Handler+0xe>
        testStage++;
    }
}
 80007c8:	4770      	bx	lr
        testStage++;
 80007ca:	3301      	adds	r3, #1
 80007cc:	4a01      	ldr	r2, [pc, #4]	; (80007d4 <button5Handler+0x18>)
 80007ce:	7013      	strb	r3, [r2, #0]
}
 80007d0:	e7fa      	b.n	80007c8 <button5Handler+0xc>
 80007d2:	bf00      	nop
 80007d4:	200000e1 	.word	0x200000e1
 80007d8:	08004704 	.word	0x08004704

080007dc <buttonPointHandler>:

static void buttonPointHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Point) {
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <buttonPointHandler+0x18>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <buttonPointHandler+0x1c>)
 80007e2:	5cd2      	ldrb	r2, [r2, r3]
 80007e4:	2a0d      	cmp	r2, #13
 80007e6:	d000      	beq.n	80007ea <buttonPointHandler+0xe>
        testStage++;
    }
}
 80007e8:	4770      	bx	lr
        testStage++;
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a01      	ldr	r2, [pc, #4]	; (80007f4 <buttonPointHandler+0x18>)
 80007ee:	7013      	strb	r3, [r2, #0]
}
 80007f0:	e7fa      	b.n	80007e8 <buttonPointHandler+0xc>
 80007f2:	bf00      	nop
 80007f4:	200000e1 	.word	0x200000e1
 80007f8:	08004704 	.word	0x08004704

080007fc <buttonNoHandler>:
        showManualTestsScreen();
    }
}

static void buttonNoHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_No) {
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <buttonNoHandler+0x18>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <buttonNoHandler+0x1c>)
 8000802:	5cd2      	ldrb	r2, [r2, r3]
 8000804:	2a0f      	cmp	r2, #15
 8000806:	d000      	beq.n	800080a <buttonNoHandler+0xe>
        testStage++;
    }
}
 8000808:	4770      	bx	lr
        testStage++;
 800080a:	3301      	adds	r3, #1
 800080c:	4a01      	ldr	r2, [pc, #4]	; (8000814 <buttonNoHandler+0x18>)
 800080e:	7013      	strb	r3, [r2, #0]
}
 8000810:	e7fa      	b.n	8000808 <buttonNoHandler+0xc>
 8000812:	bf00      	nop
 8000814:	200000e1 	.word	0x200000e1
 8000818:	08004704 	.word	0x08004704

0800081c <buttonPowerHandler>:

static void buttonPowerHandler(uint32_t pressType) {
    if (buttonsTestOrder[testStage] == Button_Power) {
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <buttonPowerHandler+0x18>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <buttonPowerHandler+0x1c>)
 8000822:	5cd2      	ldrb	r2, [r2, r3]
 8000824:	2a10      	cmp	r2, #16
 8000826:	d000      	beq.n	800082a <buttonPowerHandler+0xe>
        testStage++;
    }
}
 8000828:	4770      	bx	lr
        testStage++;
 800082a:	3301      	adds	r3, #1
 800082c:	4a01      	ldr	r2, [pc, #4]	; (8000834 <buttonPowerHandler+0x18>)
 800082e:	7013      	strb	r3, [r2, #0]
}
 8000830:	e7fa      	b.n	8000828 <buttonPowerHandler+0xc>
 8000832:	bf00      	nop
 8000834:	200000e1 	.word	0x200000e1
 8000838:	08004704 	.word	0x08004704

0800083c <testTask>:
    button1Handler, button2Handler, button3Handler, button4Handler,
    button5Handler, buttonPointHandler, buttonOkHandler, buttonNoHandler,
    buttonPowerHandler
};

static void testTask(uint32_t parameter) {
 800083c:	b510      	push	{r4, lr}
    display64(buttonsTestOrder[testStage]);
 800083e:	4c08      	ldr	r4, [pc, #32]	; (8000860 <testTask+0x24>)
 8000840:	7823      	ldrb	r3, [r4, #0]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <testTask+0x28>)
 8000844:	5cd0      	ldrb	r0, [r2, r3]
 8000846:	f001 fb33 	bl	8001eb0 <display64>
    if (testStage <= Button_Last) {
 800084a:	7823      	ldrb	r3, [r4, #0]
 800084c:	2b11      	cmp	r3, #17
 800084e:	d900      	bls.n	8000852 <testTask+0x16>
        osTaskAdd(testTask, 0, 200);
    }
}
 8000850:	bd10      	pop	{r4, pc}
        osTaskAdd(testTask, 0, 200);
 8000852:	22c8      	movs	r2, #200	; 0xc8
 8000854:	2100      	movs	r1, #0
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <testTask+0x2c>)
 8000858:	f002 fb54 	bl	8002f04 <osTaskAdd>
}
 800085c:	e7f8      	b.n	8000850 <testTask+0x14>
 800085e:	bf00      	nop
 8000860:	200000e1 	.word	0x200000e1
 8000864:	08004704 	.word	0x08004704
 8000868:	0800083d 	.word	0x0800083d

0800086c <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 800086c:	b508      	push	{r3, lr}
    if (buttonsTestOrder[testStage] == Button_Ok) {
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <buttonOkHandler+0x28>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <buttonOkHandler+0x2c>)
 8000874:	5cd2      	ldrb	r2, [r2, r3]
 8000876:	2a0e      	cmp	r2, #14
 8000878:	d002      	beq.n	8000880 <buttonOkHandler+0x14>
    } else if (testStage == Button_Last) {
 800087a:	2b11      	cmp	r3, #17
 800087c:	d004      	beq.n	8000888 <buttonOkHandler+0x1c>
}
 800087e:	bd08      	pop	{r3, pc}
        testStage++;
 8000880:	3301      	adds	r3, #1
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <buttonOkHandler+0x28>)
 8000884:	7013      	strb	r3, [r2, #0]
 8000886:	e7fa      	b.n	800087e <buttonOkHandler+0x12>
        osTaskDelHandler(testTask);
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <buttonOkHandler+0x30>)
 800088a:	f002 fb7f 	bl	8002f8c <osTaskDelHandler>
        showManualTestsScreen();
 800088e:	f000 fc7b 	bl	8001188 <showManualTestsScreen>
}
 8000892:	e7f4      	b.n	800087e <buttonOkHandler+0x12>
 8000894:	200000e1 	.word	0x200000e1
 8000898:	08004704 	.word	0x08004704
 800089c:	0800083d 	.word	0x0800083d

080008a0 <startButtonsTest>:

void startButtonsTest() {
 80008a0:	b510      	push	{r4, lr}
    testStage = 0;
 80008a2:	2400      	movs	r4, #0
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <startButtonsTest+0x2c>)
 80008a6:	701c      	strb	r4, [r3, #0]

    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008a8:	e007      	b.n	80008ba <startButtonsTest+0x1a>
        setButtonHandler(btn, handlers[btn]);
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <startButtonsTest+0x30>)
 80008ac:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80008b0:	4620      	mov	r0, r4
 80008b2:	f002 fe29 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80008b6:	3401      	adds	r4, #1
 80008b8:	b2e4      	uxtb	r4, r4
 80008ba:	2c10      	cmp	r4, #16
 80008bc:	d9f5      	bls.n	80008aa <startButtonsTest+0xa>
    }
    osTaskAdd(testTask, 0, 200);
 80008be:	22c8      	movs	r2, #200	; 0xc8
 80008c0:	2100      	movs	r1, #0
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <startButtonsTest+0x34>)
 80008c4:	f002 fb1e 	bl	8002f04 <osTaskAdd>
}
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	bf00      	nop
 80008cc:	200000e1 	.word	0x200000e1
 80008d0:	08004718 	.word	0x08004718
 80008d4:	0800083d 	.word	0x0800083d

080008d8 <testTask>:
    dummyButtonHandler,         //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 80008d8:	b508      	push	{r3, lr}
    testStep = (testStep + 1) % 3;
 80008da:	4912      	ldr	r1, [pc, #72]	; (8000924 <testTask+0x4c>)
 80008dc:	680a      	ldr	r2, [r1, #0]
 80008de:	3201      	adds	r2, #1
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <testTask+0x50>)
 80008e2:	fba3 0302 	umull	r0, r3, r3, r2
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	600b      	str	r3, [r1, #0]

    switch (testStep) {
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d00e      	beq.n	8000912 <testTask+0x3a>
 80008f4:	b143      	cbz	r3, 8000908 <testTask+0x30>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d010      	beq.n	800091c <testTask+0x44>
        break;
    case 2:
        colorfill(color_lightblue);
        break;
    }
    osTaskAdd(testTask, 0, 1000);
 80008fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008fe:	2100      	movs	r1, #0
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <testTask+0x54>)
 8000902:	f002 faff 	bl	8002f04 <osTaskAdd>
}
 8000906:	bd08      	pop	{r3, pc}
        colorfill(color_lightred);
 8000908:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800090c:	f001 fc0a 	bl	8002124 <colorfill>
        break;
 8000910:	e7f3      	b.n	80008fa <testTask+0x22>
        colorfill(color_lightgreen);
 8000912:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000916:	f001 fc05 	bl	8002124 <colorfill>
        break;
 800091a:	e7ee      	b.n	80008fa <testTask+0x22>
        colorfill(color_lightblue);
 800091c:	201f      	movs	r0, #31
 800091e:	f001 fc01 	bl	8002124 <colorfill>
        break;
 8000922:	e7ea      	b.n	80008fa <testTask+0x22>
 8000924:	200000e4 	.word	0x200000e4
 8000928:	aaaaaaab 	.word	0xaaaaaaab
 800092c:	080008d9 	.word	0x080008d9

08000930 <dummyButtonHandler>:
static void dummyButtonHandler() {
 8000930:	b508      	push	{r3, lr}
    soundKeyBeep();
 8000932:	f002 f85b 	bl	80029ec <soundKeyBeep>
}
 8000936:	bd08      	pop	{r3, pc}

08000938 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 8000938:	b508      	push	{r3, lr}
    soundKeyBeep();
 800093a:	f002 f857 	bl	80029ec <soundKeyBeep>
    osTaskDelHandler(testTask);
 800093e:	4803      	ldr	r0, [pc, #12]	; (800094c <buttonNoHandler+0x14>)
 8000940:	f002 fb24 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 8000944:	f000 fc20 	bl	8001188 <showManualTestsScreen>
}
 8000948:	bd08      	pop	{r3, pc}
 800094a:	bf00      	nop
 800094c:	080008d9 	.word	0x080008d9

08000950 <startDisplayTest>:

void startDisplayTest() {
 8000950:	b510      	push	{r4, lr}
    testStep = 0;
 8000952:	2400      	movs	r4, #0
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <startDisplayTest+0x2c>)
 8000956:	601c      	str	r4, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000958:	e007      	b.n	800096a <startDisplayTest+0x1a>
        setButtonHandler(btn, handlers[btn]);
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <startDisplayTest+0x30>)
 800095c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8000960:	4620      	mov	r0, r4
 8000962:	f002 fdd1 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8000966:	3401      	adds	r4, #1
 8000968:	b2e4      	uxtb	r4, r4
 800096a:	2c10      	cmp	r4, #16
 800096c:	d9f5      	bls.n	800095a <startDisplayTest+0xa>
    }

    osTaskAdd(testTask, 0, 200);
 800096e:	22c8      	movs	r2, #200	; 0xc8
 8000970:	2100      	movs	r1, #0
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <startDisplayTest+0x34>)
 8000974:	f002 fac6 	bl	8002f04 <osTaskAdd>
}
 8000978:	bd10      	pop	{r4, pc}
 800097a:	bf00      	nop
 800097c:	200000e4 	.word	0x200000e4
 8000980:	0800475c 	.word	0x0800475c
 8000984:	080008d9 	.word	0x080008d9

08000988 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 8000988:	b508      	push	{r3, lr}
    display66();
 800098a:	f001 fa01 	bl	8001d90 <display66>
    osTaskAdd(testTask, 0, 200);
 800098e:	22c8      	movs	r2, #200	; 0xc8
 8000990:	2100      	movs	r1, #0
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <testTask+0x14>)
 8000994:	f002 fab6 	bl	8002f04 <osTaskAdd>
}
 8000998:	bd08      	pop	{r3, pc}
 800099a:	bf00      	nop
 800099c:	08000989 	.word	0x08000989

080009a0 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80009a0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80009a2:	f002 f823 	bl	80029ec <soundKeyBeep>
}
 80009a6:	bd08      	pop	{r3, pc}

080009a8 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 80009a8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80009aa:	f002 f81f 	bl	80029ec <soundKeyBeep>
    osTaskDelHandler(testTask);
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <buttonOkHandler+0x14>)
 80009b0:	f002 faec 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80009b4:	f000 fbe8 	bl	8001188 <showManualTestsScreen>
}
 80009b8:	bd08      	pop	{r3, pc}
 80009ba:	bf00      	nop
 80009bc:	08000989 	.word	0x08000989

080009c0 <startDoorTest>:

void startDoorTest() {
 80009c0:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80009c2:	2400      	movs	r4, #0
 80009c4:	e007      	b.n	80009d6 <startDoorTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <startDoorTest+0x28>)
 80009c8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80009cc:	4620      	mov	r0, r4
 80009ce:	f002 fd9b 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80009d2:	3401      	adds	r4, #1
 80009d4:	b2e4      	uxtb	r4, r4
 80009d6:	2c10      	cmp	r4, #16
 80009d8:	d9f5      	bls.n	80009c6 <startDoorTest+0x6>
    }

    osTaskAdd(testTask, 0, 200);
 80009da:	22c8      	movs	r2, #200	; 0xc8
 80009dc:	2100      	movs	r1, #0
 80009de:	4803      	ldr	r0, [pc, #12]	; (80009ec <startDoorTest+0x2c>)
 80009e0:	f002 fa90 	bl	8002f04 <osTaskAdd>
}
 80009e4:	bd10      	pop	{r4, pc}
 80009e6:	bf00      	nop
 80009e8:	080047a0 	.word	0x080047a0
 80009ec:	08000989 	.word	0x08000989

080009f0 <drawGameBorder>:
}
/*
 * Game drawing functions for drawing the game border and the tetrominos
 */
void drawGameBorder(void)
{
 80009f0:	b510      	push	{r4, lr}
	for (int x = X_MIN; x < X_MAX; x++) {
 80009f2:	247d      	movs	r4, #125	; 0x7d
 80009f4:	e00c      	b.n	8000a10 <drawGameBorder+0x20>
		pixel(x, Y_MIN, color_white);
 80009f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fa:	210a      	movs	r1, #10
 80009fc:	4620      	mov	r0, r4
 80009fe:	f001 fbae 	bl	800215e <pixel>
		pixel(x, Y_MAX, color_white);
 8000a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a06:	21d2      	movs	r1, #210	; 0xd2
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f001 fba8 	bl	800215e <pixel>
	for (int x = X_MIN; x < X_MAX; x++) {
 8000a0e:	3401      	adds	r4, #1
 8000a10:	2ce0      	cmp	r4, #224	; 0xe0
 8000a12:	ddf0      	ble.n	80009f6 <drawGameBorder+0x6>
	}
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 8000a14:	240a      	movs	r4, #10
 8000a16:	e00c      	b.n	8000a32 <drawGameBorder+0x42>
		pixel(X_MIN, y, color_white);
 8000a18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a1c:	4621      	mov	r1, r4
 8000a1e:	207d      	movs	r0, #125	; 0x7d
 8000a20:	f001 fb9d 	bl	800215e <pixel>
		pixel(X_MAX, y, color_white);
 8000a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a28:	4621      	mov	r1, r4
 8000a2a:	20e1      	movs	r0, #225	; 0xe1
 8000a2c:	f001 fb97 	bl	800215e <pixel>
	for (int y = Y_MIN; y <= Y_MAX; y++) {
 8000a30:	3401      	adds	r4, #1
 8000a32:	2cd2      	cmp	r4, #210	; 0xd2
 8000a34:	ddf0      	ble.n	8000a18 <drawGameBorder+0x28>
	}
}
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <gameRestart>:
void gameRestart() {
 8000a38:	b538      	push	{r3, r4, r5, lr}
    score = 0;
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <gameRestart+0x4c>)
 8000a3e:	601c      	str	r4, [r3, #0]
    firstTet = true;
 8000a40:	2501      	movs	r5, #1
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <gameRestart+0x50>)
 8000a44:	701d      	strb	r5, [r3, #0]
    gameDisplay();
 8000a46:	f001 fc41 	bl	80022cc <gameDisplay>
    showScores(0);
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f001 fbf0 	bl	8002230 <showScores>
    drawGameBorder();
 8000a50:	f7ff ffce 	bl	80009f0 <drawGameBorder>
    srand(SysTick->VAL);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <gameRestart+0x54>)
 8000a56:	6898      	ldr	r0, [r3, #8]
 8000a58:	f002 fdba 	bl	80035d0 <srand>
    tick = 1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <gameRestart+0x58>)
 8000a5e:	601d      	str	r5, [r3, #0]
    for (i = 0; i < 20; i++) {
 8000a60:	4620      	mov	r0, r4
 8000a62:	e00a      	b.n	8000a7a <gameRestart+0x42>
            board[i][j] = 0;
 8000a64:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000a68:	0051      	lsls	r1, r2, #1
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <gameRestart+0x5c>)
 8000a6c:	440a      	add	r2, r1
 8000a6e:	2100      	movs	r1, #0
 8000a70:	54d1      	strb	r1, [r2, r3]
        for (j = 0; j < 10; j++) {
 8000a72:	3301      	adds	r3, #1
 8000a74:	2b09      	cmp	r3, #9
 8000a76:	ddf5      	ble.n	8000a64 <gameRestart+0x2c>
    for (i = 0; i < 20; i++) {
 8000a78:	3001      	adds	r0, #1
 8000a7a:	2813      	cmp	r0, #19
 8000a7c:	dc01      	bgt.n	8000a82 <gameRestart+0x4a>
        for (j = 0; j < 10; j++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e7f8      	b.n	8000a74 <gameRestart+0x3c>
}
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001b0 	.word	0x200001b0
 8000a88:	20000570 	.word	0x20000570
 8000a8c:	e000e010 	.word	0xe000e010
 8000a90:	20000004 	.word	0x20000004
 8000a94:	200000e8 	.word	0x200000e8

08000a98 <drawSquare>:

void drawSquare(gameLoc *loc, uint16_t colour)
{
 8000a98:	b510      	push	{r4, lr}
	unsigned char y = Y_MIN + loc->row * PIXEL_SCALE_FACTOR;
 8000a9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aa4:	005c      	lsls	r4, r3, #1
	unsigned char x = X_MIN + loc->column * PIXEL_SCALE_FACTOR;
 8000aa6:	7803      	ldrb	r3, [r0, #0]
 8000aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000aac:	0058      	lsls	r0, r3, #1
 8000aae:	b2c0      	uxtb	r0, r0
 8000ab0:	307d      	adds	r0, #125	; 0x7d
	block(x, y, colour);
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 8000ab8:	b2c0      	uxtb	r0, r0
 8000aba:	f001 fb62 	bl	8002182 <block>
}
 8000abe:	bd10      	pop	{r4, pc}

08000ac0 <drawNextTet>:

void drawNextTet(uint16_t colour)
{
 8000ac0:	b530      	push	{r4, r5, lr}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	4605      	mov	r5, r0
    for (char i = 0; i < 4; i++) {
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	e018      	b.n	8000afc <drawNextTet+0x3c>
        gameLoc offset = tetrominos[nextTet.type][nextTet.orientation][i];
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <drawNextTet+0x44>)
 8000acc:	7811      	ldrb	r1, [r2, #0]
 8000ace:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8000ad2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000ad6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <drawNextTet+0x48>)
 8000adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
        gameLoc draw;
        draw.column = COL_MAX + 2 + offset.column;
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	320c      	adds	r2, #12
 8000ae4:	f88d 2004 	strb.w	r2, [sp, #4]
        draw.row = ROW_MAX / 2 + 2 + offset.row;
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	330c      	adds	r3, #12
 8000aec:	f88d 3005 	strb.w	r3, [sp, #5]
        drawSquare(&draw, colour);
 8000af0:	4629      	mov	r1, r5
 8000af2:	a801      	add	r0, sp, #4
 8000af4:	f7ff ffd0 	bl	8000a98 <drawSquare>
    for (char i = 0; i < 4; i++) {
 8000af8:	3401      	adds	r4, #1
 8000afa:	b264      	sxtb	r4, r4
 8000afc:	2c03      	cmp	r4, #3
 8000afe:	dde4      	ble.n	8000aca <drawNextTet+0xa>
    }
}
 8000b00:	b003      	add	sp, #12
 8000b02:	bd30      	pop	{r4, r5, pc}
 8000b04:	20000574 	.word	0x20000574
 8000b08:	080047e8 	.word	0x080047e8

08000b0c <drawTet>:

void drawTet(tet *t, uint16_t colour)
{
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	4605      	mov	r5, r0
 8000b12:	460e      	mov	r6, r1
	for (char i = 0; i < 4; i++) {
 8000b14:	2400      	movs	r4, #0
 8000b16:	e019      	b.n	8000b4c <drawTet+0x40>
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000b18:	782a      	ldrb	r2, [r5, #0]
 8000b1a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8000b1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000b22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <drawTet+0x48>)
 8000b28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
		gameLoc draw;
		draw.column = t->origin.column + offset.column;
 8000b2c:	78aa      	ldrb	r2, [r5, #2]
 8000b2e:	fa52 f281 	uxtab	r2, r2, r1
 8000b32:	f88d 2004 	strb.w	r2, [sp, #4]
		draw.row = t->origin.row + offset.row;
 8000b36:	78eb      	ldrb	r3, [r5, #3]
 8000b38:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8000b3c:	f88d 3005 	strb.w	r3, [sp, #5]
		drawSquare(&draw, colour);
 8000b40:	4631      	mov	r1, r6
 8000b42:	a801      	add	r0, sp, #4
 8000b44:	f7ff ffa8 	bl	8000a98 <drawSquare>
	for (char i = 0; i < 4; i++) {
 8000b48:	3401      	adds	r4, #1
 8000b4a:	b264      	sxtb	r4, r4
 8000b4c:	2c03      	cmp	r4, #3
 8000b4e:	dde3      	ble.n	8000b18 <drawTet+0xc>
	}
}
 8000b50:	b002      	add	sp, #8
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	080047e8 	.word	0x080047e8

08000b58 <newTet>:
		t->origin.row++;
	drawTet(t, color_white);
}

void newTet(gameLoc origin, char orientation, SHAPE type, tet *t)
{
 8000b58:	b410      	push	{r4}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	ac02      	add	r4, sp, #8
 8000b5e:	f824 0d04 	strh.w	r0, [r4, #-4]!
	t->type = type;
 8000b62:	701a      	strb	r2, [r3, #0]
	t->origin = origin;
 8000b64:	8822      	ldrh	r2, [r4, #0]
 8000b66:	805a      	strh	r2, [r3, #2]
	t->orientation = orientation;
 8000b68:	7059      	strb	r1, [r3, #1]
}
 8000b6a:	b003      	add	sp, #12
 8000b6c:	bc10      	pop	{r4}
 8000b6e:	4770      	bx	lr

08000b70 <downCollision>:
 * Boundary and collision checking code
 */

char downCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000b70:	2200      	movs	r2, #0
 8000b72:	2a03      	cmp	r2, #3
 8000b74:	dc2b      	bgt.n	8000bce <downCollision+0x5e>
{
 8000b76:	b430      	push	{r4, r5}
 8000b78:	b082      	sub	sp, #8
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000b7a:	7801      	ldrb	r1, [r0, #0]
 8000b7c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000b80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000b84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000b88:	4912      	ldr	r1, [pc, #72]	; (8000bd4 <downCollision+0x64>)
 8000b8a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
		gameLoc origin = t->origin;
 8000b8e:	8843      	ldrh	r3, [r0, #2]
 8000b90:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (board[origin.row + offset.row + 1][origin.column + offset.column]) { //Checking against other blocks
 8000b94:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8000b98:	f341 2407 	sbfx	r4, r1, #8, #8
 8000b9c:	4423      	add	r3, r4
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000ba4:	fa44 f181 	sxtab	r1, r4, r1
 8000ba8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <downCollision+0x68>)
 8000bae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8000bb2:	5661      	ldrsb	r1, [r4, r1]
 8000bb4:	b949      	cbnz	r1, 8000bca <downCollision+0x5a>
			return true;
		}
		if (origin.row + offset.row + 1 >= ROW_MAX) { // Checking against game boundaries
 8000bb6:	2b13      	cmp	r3, #19
 8000bb8:	dc07      	bgt.n	8000bca <downCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000bba:	3201      	adds	r2, #1
 8000bbc:	b252      	sxtb	r2, r2
 8000bbe:	2a03      	cmp	r2, #3
 8000bc0:	dddb      	ble.n	8000b7a <downCollision+0xa>
			return true;
		}
	}
	return false;
 8000bc2:	2000      	movs	r0, #0
}
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bc30      	pop	{r4, r5}
 8000bc8:	4770      	bx	lr
			return true;
 8000bca:	2001      	movs	r0, #1
 8000bcc:	e7fa      	b.n	8000bc4 <downCollision+0x54>
	return false;
 8000bce:	2000      	movs	r0, #0
}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	080047e8 	.word	0x080047e8
 8000bd8:	200000e8 	.word	0x200000e8

08000bdc <mvDown>:
{
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000be0:	2100      	movs	r1, #0
 8000be2:	f7ff ff93 	bl	8000b0c <drawTet>
	if (!downCollision(t))
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff ffc2 	bl	8000b70 <downCollision>
 8000bec:	b918      	cbnz	r0, 8000bf6 <mvDown+0x1a>
		t->origin.row++;
 8000bee:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	70e3      	strb	r3, [r4, #3]
	drawTet(t, color_white);
 8000bf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f7ff ff86 	bl	8000b0c <drawTet>
}
 8000c00:	bd10      	pop	{r4, pc}
	...

08000c04 <gameMoveDown>:
void gameMoveDown(void) {
 8000c04:	b508      	push	{r3, lr}
    mvDown(&currentTet);
 8000c06:	4802      	ldr	r0, [pc, #8]	; (8000c10 <gameMoveDown+0xc>)
 8000c08:	f7ff ffe8 	bl	8000bdc <mvDown>
}
 8000c0c:	bd08      	pop	{r3, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000578 	.word	0x20000578

08000c14 <gameTick>:
void gameTick() {
 8000c14:	b510      	push	{r4, lr}
 8000c16:	b082      	sub	sp, #8
    mvDown(&currentTet);
 8000c18:	4c20      	ldr	r4, [pc, #128]	; (8000c9c <gameTick+0x88>)
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff ffde 	bl	8000bdc <mvDown>
    if (downCollision(&currentTet)) {
 8000c20:	4620      	mov	r0, r4
 8000c22:	f7ff ffa5 	bl	8000b70 <downCollision>
 8000c26:	b3a8      	cbz	r0, 8000c94 <gameTick+0x80>
        for (int i = 0; i < 4; i++) {
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e029      	b.n	8000c80 <gameTick+0x6c>
            offset.column = tetrominos[currentTet.type][currentTet.orientation][i].column;
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <gameTick+0x88>)
 8000c2e:	7804      	ldrb	r4, [r0, #0]
 8000c30:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000c34:	491a      	ldr	r1, [pc, #104]	; (8000ca0 <gameTick+0x8c>)
 8000c36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000c3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000c3e:	f911 4013 	ldrsb.w	r4, [r1, r3, lsl #1]
 8000c42:	f88d 4000 	strb.w	r4, [sp]
            offset.row = tetrominos[currentTet.type][currentTet.orientation][i].row;
 8000c46:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8000c4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000c4e:	f88d 3001 	strb.w	r3, [sp, #1]
            gameLoc origin = currentTet.origin;
 8000c52:	8843      	ldrh	r3, [r0, #2]
 8000c54:	f8ad 3004 	strh.w	r3, [sp, #4]
            board[origin.row + offset.row][origin.column + offset.column] = true;
 8000c58:	f99d 1005 	ldrsb.w	r1, [sp, #5]
 8000c5c:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000c60:	fa41 f383 	sxtab	r3, r1, r3
 8000c64:	f99d 0004 	ldrsb.w	r0, [sp, #4]
 8000c68:	f89d 1000 	ldrb.w	r1, [sp]
 8000c6c:	fa40 f181 	sxtab	r1, r0, r1
 8000c70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c74:	0058      	lsls	r0, r3, #1
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <gameTick+0x90>)
 8000c78:	4403      	add	r3, r0
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	5458      	strb	r0, [r3, r1]
        for (int i = 0; i < 4; i++) {
 8000c7e:	4402      	add	r2, r0
 8000c80:	2a03      	cmp	r2, #3
 8000c82:	ddd3      	ble.n	8000c2c <gameTick+0x18>
        if (tick == -1)
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <gameTick+0x94>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d004      	beq.n	8000c98 <gameTick+0x84>
        tick = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <gameTick+0x94>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	b002      	add	sp, #8
 8000c96:	bd10      	pop	{r4, pc}
 8000c98:	e7fe      	b.n	8000c98 <gameTick+0x84>
 8000c9a:	bf00      	nop
 8000c9c:	20000578 	.word	0x20000578
 8000ca0:	080047e8 	.word	0x080047e8
 8000ca4:	200000e8 	.word	0x200000e8
 8000ca8:	20000004 	.word	0x20000004

08000cac <leftCollision>:

char leftCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000cac:	2100      	movs	r1, #0
 8000cae:	2903      	cmp	r1, #3
 8000cb0:	dc2b      	bgt.n	8000d0a <leftCollision+0x5e>
{
 8000cb2:	b410      	push	{r4}
 8000cb4:	b083      	sub	sp, #12
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000cb6:	7802      	ldrb	r2, [r0, #0]
 8000cb8:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000cbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000cc0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <leftCollision+0x64>)
 8000cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		gameLoc origin = t->origin;
 8000cca:	8842      	ldrh	r2, [r0, #2]
 8000ccc:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (board[origin.row + offset.row][origin.column + offset.column - 1]) //Checking against other blocks
 8000cd0:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8000cd4:	f343 2407 	sbfx	r4, r3, #8, #8
 8000cd8:	4422      	add	r2, r4
 8000cda:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000cde:	fa44 f383 	sxtab	r3, r4, r3
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <leftCollision+0x68>)
 8000cea:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8000cee:	56d2      	ldrsb	r2, [r2, r3]
 8000cf0:	b94a      	cbnz	r2, 8000d06 <leftCollision+0x5a>
			return true;
		if (origin.column + offset.column - 1 < COL_MIN) // Checking against game boundaries
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db07      	blt.n	8000d06 <leftCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000cf6:	3101      	adds	r1, #1
 8000cf8:	b249      	sxtb	r1, r1
 8000cfa:	2903      	cmp	r1, #3
 8000cfc:	dddb      	ble.n	8000cb6 <leftCollision+0xa>
			return true;
	}
	return false;
 8000cfe:	2000      	movs	r0, #0
}
 8000d00:	b003      	add	sp, #12
 8000d02:	bc10      	pop	{r4}
 8000d04:	4770      	bx	lr
			return true;
 8000d06:	2001      	movs	r0, #1
 8000d08:	e7fa      	b.n	8000d00 <leftCollision+0x54>
	return false;
 8000d0a:	2000      	movs	r0, #0
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	080047e8 	.word	0x080047e8
 8000d14:	200000e8 	.word	0x200000e8

08000d18 <mvLeft>:
{
 8000d18:	b510      	push	{r4, lr}
 8000d1a:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f7ff fef5 	bl	8000b0c <drawTet>
	if (!leftCollision(t))
 8000d22:	4620      	mov	r0, r4
 8000d24:	f7ff ffc2 	bl	8000cac <leftCollision>
 8000d28:	b918      	cbnz	r0, 8000d32 <mvLeft+0x1a>
		t->origin.column--;
 8000d2a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	70a3      	strb	r3, [r4, #2]
	drawTet(t, color_white);
 8000d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff fee8 	bl	8000b0c <drawTet>
}
 8000d3c:	bd10      	pop	{r4, pc}
	...

08000d40 <gameMoveLeft>:
void gameMoveLeft(void) {
 8000d40:	b508      	push	{r3, lr}
    mvLeft(&currentTet);
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <gameMoveLeft+0xc>)
 8000d44:	f7ff ffe8 	bl	8000d18 <mvLeft>
}
 8000d48:	bd08      	pop	{r3, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000578 	.word	0x20000578

08000d50 <rightCollision>:

char rightCollision(tet *t)
{
	for (char i = 0; i < 4; i++) {
 8000d50:	2100      	movs	r1, #0
 8000d52:	2903      	cmp	r1, #3
 8000d54:	dc2b      	bgt.n	8000dae <rightCollision+0x5e>
{
 8000d56:	b410      	push	{r4}
 8000d58:	b083      	sub	sp, #12
		gameLoc offset = tetrominos[t->type][t->orientation][i];
 8000d5a:	7802      	ldrb	r2, [r0, #0]
 8000d5c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000d60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d64:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <rightCollision+0x64>)
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		gameLoc origin = t->origin;
 8000d6e:	8842      	ldrh	r2, [r0, #2]
 8000d70:	f8ad 2004 	strh.w	r2, [sp, #4]
		if (board[origin.row + offset.row][origin.column + offset.column + 1]) //Checking against other blocks
 8000d74:	f99d 2005 	ldrsb.w	r2, [sp, #5]
 8000d78:	f343 2407 	sbfx	r4, r3, #8, #8
 8000d7c:	4422      	add	r2, r4
 8000d7e:	f99d 4004 	ldrsb.w	r4, [sp, #4]
 8000d82:	fa44 f383 	sxtab	r3, r4, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <rightCollision+0x68>)
 8000d8e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8000d92:	56d2      	ldrsb	r2, [r2, r3]
 8000d94:	b94a      	cbnz	r2, 8000daa <rightCollision+0x5a>
			return true;
		if (origin.column + offset.column + 1 >= COL_MAX) // Checking against game boundaries
 8000d96:	2b09      	cmp	r3, #9
 8000d98:	dc07      	bgt.n	8000daa <rightCollision+0x5a>
	for (char i = 0; i < 4; i++) {
 8000d9a:	3101      	adds	r1, #1
 8000d9c:	b249      	sxtb	r1, r1
 8000d9e:	2903      	cmp	r1, #3
 8000da0:	dddb      	ble.n	8000d5a <rightCollision+0xa>
			return true;
	}
	return false;
 8000da2:	2000      	movs	r0, #0
}
 8000da4:	b003      	add	sp, #12
 8000da6:	bc10      	pop	{r4}
 8000da8:	4770      	bx	lr
			return true;
 8000daa:	2001      	movs	r0, #1
 8000dac:	e7fa      	b.n	8000da4 <rightCollision+0x54>
	return false;
 8000dae:	2000      	movs	r0, #0
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	080047e8 	.word	0x080047e8
 8000db8:	200000e8 	.word	0x200000e8

08000dbc <mvRight>:
{
 8000dbc:	b510      	push	{r4, lr}
 8000dbe:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f7ff fea3 	bl	8000b0c <drawTet>
	if (!rightCollision(t))
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff ffc2 	bl	8000d50 <rightCollision>
 8000dcc:	b918      	cbnz	r0, 8000dd6 <mvRight+0x1a>
		t->origin.column++;
 8000dce:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	70a3      	strb	r3, [r4, #2]
	drawTet(t, color_white);
 8000dd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fe96 	bl	8000b0c <drawTet>
}
 8000de0:	bd10      	pop	{r4, pc}
	...

08000de4 <gameMoveRight>:
void gameMoveRight(void) {
 8000de4:	b508      	push	{r3, lr}
    mvRight(&currentTet);
 8000de6:	4802      	ldr	r0, [pc, #8]	; (8000df0 <gameMoveRight+0xc>)
 8000de8:	f7ff ffe8 	bl	8000dbc <mvRight>
}
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop
 8000df0:	20000578 	.word	0x20000578

08000df4 <rotCollision>:

char rotCollision(tet *t)
{
 8000df4:	b410      	push	{r4}
 8000df6:	b083      	sub	sp, #12
	gameLoc orig = t->origin;
 8000df8:	8843      	ldrh	r3, [r0, #2]
 8000dfa:	f8ad 3004 	strh.w	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2903      	cmp	r1, #3
 8000e02:	dc2b      	bgt.n	8000e5c <rotCollision+0x68>
		gameLoc offset = tetrominos[t->type][(t->orientation + 1) % 4][i];
 8000e04:	7804      	ldrb	r4, [r0, #0]
 8000e06:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	425a      	negs	r2, r3
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	bf58      	it	pl
 8000e18:	4253      	negpl	r3, r2
 8000e1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000e1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <rotCollision+0x70>)
 8000e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e28:	f8ad 3000 	strh.w	r3, [sp]
		if (offset.column + orig.column >= COL_MAX || offset.column + orig.column < COL_MIN) //Check out of bounds horizontally
 8000e2c:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8000e30:	fa42 f283 	sxtab	r2, r2, r3
 8000e34:	2a09      	cmp	r2, #9
 8000e36:	d80f      	bhi.n	8000e58 <rotCollision+0x64>
			return 1;
		if (offset.row + orig.row >= ROW_MAX || offset.row + orig.row < COL_MIN) // Check out of bounds vertically
 8000e38:	f99d 3001 	ldrsb.w	r3, [sp, #1]
 8000e3c:	f99d 4005 	ldrsb.w	r4, [sp, #5]
 8000e40:	4423      	add	r3, r4
 8000e42:	2b13      	cmp	r3, #19
 8000e44:	d808      	bhi.n	8000e58 <rotCollision+0x64>
			return 1;
		if (board[orig.row + offset.row][orig.column + offset.column]) // Check for other blocks
 8000e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e4a:	4c07      	ldr	r4, [pc, #28]	; (8000e68 <rotCollision+0x74>)
 8000e4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8000e50:	569b      	ldrsb	r3, [r3, r2]
 8000e52:	b90b      	cbnz	r3, 8000e58 <rotCollision+0x64>
	for (int i = 0; i < 4; i++) {
 8000e54:	3101      	adds	r1, #1
 8000e56:	e7d3      	b.n	8000e00 <rotCollision+0xc>
			return 1;
 8000e58:	2001      	movs	r0, #1
 8000e5a:	e000      	b.n	8000e5e <rotCollision+0x6a>
			return 1;
	}
	return 0;
 8000e5c:	2000      	movs	r0, #0
}
 8000e5e:	b003      	add	sp, #12
 8000e60:	bc10      	pop	{r4}
 8000e62:	4770      	bx	lr
 8000e64:	080047e8 	.word	0x080047e8
 8000e68:	200000e8 	.word	0x200000e8

08000e6c <rotateTet>:
{
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	4604      	mov	r4, r0
	drawTet(t, color_defback);
 8000e70:	2100      	movs	r1, #0
 8000e72:	f7ff fe4b 	bl	8000b0c <drawTet>
	if (!rotCollision(t))
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff ffbc 	bl	8000df4 <rotCollision>
 8000e7c:	b950      	cbnz	r0, 8000e94 <rotateTet+0x28>
		t->orientation = (t->orientation + 1) % 4;
 8000e7e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8000e82:	3301      	adds	r3, #1
 8000e84:	425a      	negs	r2, r3
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	f002 0203 	and.w	r2, r2, #3
 8000e8e:	bf58      	it	pl
 8000e90:	4253      	negpl	r3, r2
 8000e92:	7063      	strb	r3, [r4, #1]
	drawTet(t, color_white);
 8000e94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff fe37 	bl	8000b0c <drawTet>
}
 8000e9e:	bd10      	pop	{r4, pc}

08000ea0 <gameRotate>:
void gameRotate(void) {
 8000ea0:	b508      	push	{r3, lr}
    rotateTet(&currentTet);
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <gameRotate+0xc>)
 8000ea4:	f7ff ffe2 	bl	8000e6c <rotateTet>
}
 8000ea8:	bd08      	pop	{r3, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000578 	.word	0x20000578

08000eb0 <compress>:
	}
	return goalCount;
}

void compress(char line)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	b082      	sub	sp, #8
	for (char i = line - 1; i >= ROW_MIN; i--) {
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	b245      	sxtb	r5, r0
 8000eb8:	e02c      	b.n	8000f14 <compress+0x64>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 8000eba:	3401      	adds	r4, #1
 8000ebc:	b264      	sxtb	r4, r4
 8000ebe:	2c09      	cmp	r4, #9
 8000ec0:	dc26      	bgt.n	8000f10 <compress+0x60>
			if (board[i][j]) {
 8000ec2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000ec6:	005a      	lsls	r2, r3, #1
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <compress+0x70>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	571b      	ldrsb	r3, [r3, r4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f3      	beq.n	8000eba <compress+0xa>
				board[i][j] = false;
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <compress+0x70>)
 8000ed4:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000ed8:	004b      	lsls	r3, r1, #1
 8000eda:	4413      	add	r3, r2
 8000edc:	2100      	movs	r1, #0
 8000ede:	5519      	strb	r1, [r3, r4]
				board[i + 1][j] = true;
 8000ee0:	1c6b      	adds	r3, r5, #1
 8000ee2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ee6:	0058      	lsls	r0, r3, #1
 8000ee8:	4402      	add	r2, r0
 8000eea:	2301      	movs	r3, #1
 8000eec:	5513      	strb	r3, [r2, r4]
				gameLoc move;
				move.row = i;
 8000eee:	f88d 5005 	strb.w	r5, [sp, #5]
				move.column = j;
 8000ef2:	ae02      	add	r6, sp, #8
 8000ef4:	f806 4d04 	strb.w	r4, [r6, #-4]!
				drawSquare(&move, color_defback);
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f7ff fdcd 	bl	8000a98 <drawSquare>
				move.row = i + 1;
 8000efe:	1c6b      	adds	r3, r5, #1
 8000f00:	f88d 3005 	strb.w	r3, [sp, #5]
				drawSquare(&move, color_white);
 8000f04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff fdc5 	bl	8000a98 <drawSquare>
 8000f0e:	e7d4      	b.n	8000eba <compress+0xa>
	for (char i = line - 1; i >= ROW_MIN; i--) {
 8000f10:	3d01      	subs	r5, #1
 8000f12:	b26d      	sxtb	r5, r5
 8000f14:	2d00      	cmp	r5, #0
 8000f16:	db01      	blt.n	8000f1c <compress+0x6c>
		for (char j = COL_MIN; j < COL_MAX; j++) {
 8000f18:	2400      	movs	r4, #0
 8000f1a:	e7d0      	b.n	8000ebe <compress+0xe>
			}
		}
	}
}
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd70      	pop	{r4, r5, r6, pc}
 8000f20:	200000e8 	.word	0x200000e8

08000f24 <clearGoal>:
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b083      	sub	sp, #12
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f28:	2413      	movs	r4, #19
	char start = 0;
 8000f2a:	2700      	movs	r7, #0
	char goalCount = 0;
 8000f2c:	463e      	mov	r6, r7
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f2e:	e003      	b.n	8000f38 <clearGoal+0x14>
		char goal = true;
 8000f30:	2201      	movs	r2, #1
		if (goal) { // Clear it!
 8000f32:	b98a      	cbnz	r2, 8000f58 <clearGoal+0x34>
	for (char i = ROW_MAX - 1; i >= ROW_MIN; i--) {
 8000f34:	3c01      	subs	r4, #1
 8000f36:	b264      	sxtb	r4, r4
 8000f38:	2c00      	cmp	r4, #0
 8000f3a:	db2c      	blt.n	8000f96 <clearGoal+0x72>
		for(char j = COL_MIN; j < COL_MAX; j++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2b09      	cmp	r3, #9
 8000f40:	dcf6      	bgt.n	8000f30 <clearGoal+0xc>
			if (!board[i][j]) {
 8000f42:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000f46:	0051      	lsls	r1, r2, #1
 8000f48:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <clearGoal+0x80>)
 8000f4a:	440a      	add	r2, r1
 8000f4c:	56d2      	ldrsb	r2, [r2, r3]
 8000f4e:	2a00      	cmp	r2, #0
 8000f50:	d0ef      	beq.n	8000f32 <clearGoal+0xe>
		for(char j = COL_MIN; j < COL_MAX; j++) {
 8000f52:	3301      	adds	r3, #1
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	e7f2      	b.n	8000f3e <clearGoal+0x1a>
			goalCount++;
 8000f58:	3601      	adds	r6, #1
 8000f5a:	b276      	sxtb	r6, r6
			if (i > start)
 8000f5c:	42a7      	cmp	r7, r4
 8000f5e:	da00      	bge.n	8000f62 <clearGoal+0x3e>
				start = i;
 8000f60:	4627      	mov	r7, r4
			for (char k = COL_MIN; k < COL_MAX; k++) {
 8000f62:	2500      	movs	r5, #0
 8000f64:	e00f      	b.n	8000f86 <clearGoal+0x62>
				board[i][k] = false;
 8000f66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000f6a:	005a      	lsls	r2, r3, #1
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <clearGoal+0x80>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	2100      	movs	r1, #0
 8000f72:	5559      	strb	r1, [r3, r5]
				clear.row = i;
 8000f74:	f88d 4005 	strb.w	r4, [sp, #5]
				clear.column = k;
 8000f78:	a802      	add	r0, sp, #8
 8000f7a:	f800 5d04 	strb.w	r5, [r0, #-4]!
				drawSquare(&clear, color_defback);
 8000f7e:	f7ff fd8b 	bl	8000a98 <drawSquare>
			for (char k = COL_MIN; k < COL_MAX; k++) {
 8000f82:	3501      	adds	r5, #1
 8000f84:	b26d      	sxtb	r5, r5
 8000f86:	2d09      	cmp	r5, #9
 8000f88:	dded      	ble.n	8000f66 <clearGoal+0x42>
            compress(i);
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f7ff ff90 	bl	8000eb0 <compress>
            i += 1;
 8000f90:	3401      	adds	r4, #1
 8000f92:	b264      	sxtb	r4, r4
 8000f94:	e7ce      	b.n	8000f34 <clearGoal+0x10>
	if (goalCount) {
 8000f96:	b916      	cbnz	r6, 8000f9e <clearGoal+0x7a>
}
 8000f98:	4630      	mov	r0, r6
 8000f9a:	b003      	add	sp, #12
 8000f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		soundBeep();
 8000f9e:	f001 fd17 	bl	80029d0 <soundBeep>
 8000fa2:	e7f9      	b.n	8000f98 <clearGoal+0x74>
 8000fa4:	200000e8 	.word	0x200000e8

08000fa8 <isgameOver>:

char isgameOver()
{
	char row = ROW_MIN + 1;
	for (int col = COL_MIN; col < COL_MAX; col++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b09      	cmp	r3, #9
 8000fac:	dc06      	bgt.n	8000fbc <isgameOver+0x14>
		if (board[row][col])
 8000fae:	4a05      	ldr	r2, [pc, #20]	; (8000fc4 <isgameOver+0x1c>)
 8000fb0:	441a      	add	r2, r3
 8000fb2:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8000fb6:	b91a      	cbnz	r2, 8000fc0 <isgameOver+0x18>
	for (int col = COL_MIN; col < COL_MAX; col++) {
 8000fb8:	3301      	adds	r3, #1
 8000fba:	e7f6      	b.n	8000faa <isgameOver+0x2>
			return true;
	}
	return false;
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4770      	bx	lr
			return true;
 8000fc0:	2001      	movs	r0, #1
}
 8000fc2:	4770      	bx	lr
 8000fc4:	200000e8 	.word	0x200000e8

08000fc8 <gameLoop>:
/*
 * Main game loop
 */

void gameLoop(void)
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b082      	sub	sp, #8
		gameLoc origin = {5, 1};
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <gameLoop+0xec>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f8ad 3004 	strh.w	r3, [sp, #4]
		if (isgameOver()) {
 8000fd4:	f7ff ffe8 	bl	8000fa8 <isgameOver>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d143      	bne.n	8001064 <gameLoop+0x9c>
		    showScores(-1);
		    soundHiAlarm();
		} else {
		    if (tick) {
 8000fdc:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <gameLoop+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d064      	beq.n	80010ae <gameLoop+0xe6>
		        tick = 0;
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <gameLoop+0xf0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		        if (firstTet) {
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <gameLoop+0xf4>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d03f      	beq.n	8001072 <gameLoop+0xaa>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &currentTet);
 8000ff2:	f002 fb2f 	bl	8003654 <rand>
 8000ff6:	4c32      	ldr	r4, [pc, #200]	; (80010c0 <gameLoop+0xf8>)
 8000ff8:	fb84 3200 	smull	r3, r2, r4, r0
 8000ffc:	1813      	adds	r3, r2, r0
 8000ffe:	17c2      	asrs	r2, r0, #31
 8001000:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001004:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001008:	1a82      	subs	r2, r0, r2
 800100a:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <gameLoop+0xfc>)
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	2100      	movs	r1, #0
 8001010:	9801      	ldr	r0, [sp, #4]
 8001012:	f7ff fda1 	bl	8000b58 <newTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 8001016:	f002 fb1d 	bl	8003654 <rand>
 800101a:	fb84 3400 	smull	r3, r4, r4, r0
 800101e:	4404      	add	r4, r0
 8001020:	17c2      	asrs	r2, r0, #31
 8001022:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8001026:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800102a:	1a82      	subs	r2, r0, r2
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <gameLoop+0x100>)
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	2100      	movs	r1, #0
 8001032:	9801      	ldr	r0, [sp, #4]
 8001034:	f7ff fd90 	bl	8000b58 <newTet>
		            drawNextTet(color_white);
 8001038:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800103c:	f7ff fd40 	bl	8000ac0 <drawNextTet>
		            firstTet = false;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <gameLoop+0xf4>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		            currentTet = nextTet;
                    drawNextTet(color_defback);
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
                    drawNextTet(color_white);
		        }
		        drawTet(&currentTet, color_white);
 8001046:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800104a:	481e      	ldr	r0, [pc, #120]	; (80010c4 <gameLoop+0xfc>)
 800104c:	f7ff fd5e 	bl	8000b0c <drawTet>
		        score += clearGoal();
 8001050:	f7ff ff68 	bl	8000f24 <clearGoal>
 8001054:	4a1d      	ldr	r2, [pc, #116]	; (80010cc <gameLoop+0x104>)
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	4418      	add	r0, r3
 800105a:	6010      	str	r0, [r2, #0]
		        showScores(score);
 800105c:	f001 f8e8 	bl	8002230 <showScores>
		    } else {
		        gameTick();
		    }
		}
}
 8001060:	b002      	add	sp, #8
 8001062:	bd10      	pop	{r4, pc}
		    showScores(-1);
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f001 f8e2 	bl	8002230 <showScores>
		    soundHiAlarm();
 800106c:	f001 fccc 	bl	8002a08 <soundHiAlarm>
 8001070:	e7f6      	b.n	8001060 <gameLoop+0x98>
		            currentTet = nextTet;
 8001072:	4c15      	ldr	r4, [pc, #84]	; (80010c8 <gameLoop+0x100>)
 8001074:	6822      	ldr	r2, [r4, #0]
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <gameLoop+0xfc>)
 8001078:	601a      	str	r2, [r3, #0]
                    drawNextTet(color_defback);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fd20 	bl	8000ac0 <drawNextTet>
		            newTet(origin, 0, (SHAPE)(rand() % 7), &nextTet);
 8001080:	f002 fae8 	bl	8003654 <rand>
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <gameLoop+0xf8>)
 8001086:	fb82 3200 	smull	r3, r2, r2, r0
 800108a:	1813      	adds	r3, r2, r0
 800108c:	17c2      	asrs	r2, r0, #31
 800108e:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 8001092:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8001096:	1a82      	subs	r2, r0, r2
 8001098:	4623      	mov	r3, r4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	2100      	movs	r1, #0
 800109e:	9801      	ldr	r0, [sp, #4]
 80010a0:	f7ff fd5a 	bl	8000b58 <newTet>
                    drawNextTet(color_white);
 80010a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010a8:	f7ff fd0a 	bl	8000ac0 <drawNextTet>
 80010ac:	e7cb      	b.n	8001046 <gameLoop+0x7e>
		        gameTick();
 80010ae:	f7ff fdb1 	bl	8000c14 <gameTick>
}
 80010b2:	e7d5      	b.n	8001060 <gameLoop+0x98>
 80010b4:	080047e4 	.word	0x080047e4
 80010b8:	20000004 	.word	0x20000004
 80010bc:	20000570 	.word	0x20000570
 80010c0:	92492493 	.word	0x92492493
 80010c4:	20000578 	.word	0x20000578
 80010c8:	20000574 	.word	0x20000574
 80010cc:	200001b0 	.word	0x200001b0

080010d0 <manualTestsTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, buttonOkHandler, dummyButtonHandler,
    buttonPowerHandler
};

static void manualTestsTask(uint32_t parameters) {
 80010d0:	b508      	push	{r3, lr}
    display48(manualTests, ManualTestLast, currentTest);
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <manualTestsTask+0x1c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	2107      	movs	r1, #7
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <manualTestsTask+0x20>)
 80010da:	f000 ff9b 	bl	8002014 <display48>
    osTaskAdd(manualTestsTask, 0, 200);
 80010de:	22c8      	movs	r2, #200	; 0xc8
 80010e0:	2100      	movs	r1, #0
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <manualTestsTask+0x24>)
 80010e4:	f001 ff0e 	bl	8002f04 <osTaskAdd>
}
 80010e8:	bd08      	pop	{r3, pc}
 80010ea:	bf00      	nop
 80010ec:	200001b4 	.word	0x200001b4
 80010f0:	20000008 	.word	0x20000008
 80010f4:	080010d1 	.word	0x080010d1

080010f8 <buttonPowerHandler>:
    if ((pressType == BUTTON_PRESS_LONG) ||
 80010f8:	3802      	subs	r0, #2
 80010fa:	2801      	cmp	r0, #1
 80010fc:	d900      	bls.n	8001100 <buttonPowerHandler+0x8>
 80010fe:	4770      	bx	lr
static void buttonPowerHandler(uint32_t pressType) {
 8001100:	b508      	push	{r3, lr}
        powerOff();
 8001102:	f002 f8f5 	bl	80032f0 <powerOff>
}
 8001106:	bd08      	pop	{r3, pc}

08001108 <button5Handler>:
static void button5Handler(uint32_t pressType) {
 8001108:	b508      	push	{r3, lr}
    soundKeyBeep();
 800110a:	f001 fc6f 	bl	80029ec <soundKeyBeep>
    if (currentTest > 0) {
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <button5Handler+0x1c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b91b      	cbnz	r3, 800111c <button5Handler+0x14>
        currentTest = ManualTestLast - 1;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <button5Handler+0x1c>)
 8001116:	2206      	movs	r2, #6
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bd08      	pop	{r3, pc}
        currentTest--;
 800111c:	3b01      	subs	r3, #1
 800111e:	4a01      	ldr	r2, [pc, #4]	; (8001124 <button5Handler+0x1c>)
 8001120:	7013      	strb	r3, [r2, #0]
 8001122:	e7fa      	b.n	800111a <button5Handler+0x12>
 8001124:	200001b4 	.word	0x200001b4

08001128 <button0Handler>:
static void button0Handler(uint32_t pressType) {
 8001128:	b508      	push	{r3, lr}
    soundKeyBeep();
 800112a:	f001 fc5f 	bl	80029ec <soundKeyBeep>
    if (currentTest < ManualTestLast - 1) {
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <button0Handler+0x20>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b05      	cmp	r3, #5
 8001134:	d903      	bls.n	800113e <button0Handler+0x16>
        currentTest = 0;
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <button0Handler+0x20>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bd08      	pop	{r3, pc}
        currentTest++;
 800113e:	3301      	adds	r3, #1
 8001140:	4a01      	ldr	r2, [pc, #4]	; (8001148 <button0Handler+0x20>)
 8001142:	7013      	strb	r3, [r2, #0]
 8001144:	e7fa      	b.n	800113c <button0Handler+0x14>
 8001146:	bf00      	nop
 8001148:	200001b4 	.word	0x200001b4

0800114c <dummyButtonHandler>:
static void dummyButtonHandler() {
 800114c:	b508      	push	{r3, lr}
    soundKeyBeep();
 800114e:	f001 fc4d 	bl	80029ec <soundKeyBeep>
}
 8001152:	bd08      	pop	{r3, pc}

08001154 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 8001154:	b508      	push	{r3, lr}
    soundKeyBeep();
 8001156:	f001 fc49 	bl	80029ec <soundKeyBeep>
    if (manualTestsHandlers[currentTest] != 0) {
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <buttonOkHandler+0x28>)
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <buttonOkHandler+0x2c>)
 8001160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001164:	b143      	cbz	r3, 8001178 <buttonOkHandler+0x24>
        osTaskDelHandler(manualTestsTask);
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <buttonOkHandler+0x30>)
 8001168:	f001 ff10 	bl	8002f8c <osTaskDelHandler>
        manualTestsHandlers[currentTest]();
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <buttonOkHandler+0x28>)
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <buttonOkHandler+0x2c>)
 8001172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001176:	4798      	blx	r3
}
 8001178:	bd08      	pop	{r3, pc}
 800117a:	bf00      	nop
 800117c:	200001b4 	.word	0x200001b4
 8001180:	0800490c 	.word	0x0800490c
 8001184:	080010d1 	.word	0x080010d1

08001188 <showManualTestsScreen>:

void showManualTestsScreen(void) {
 8001188:	b510      	push	{r4, lr}
    currentTest = 0;
 800118a:	2400      	movs	r4, #0
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <showManualTestsScreen+0x2c>)
 800118e:	701c      	strb	r4, [r3, #0]
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 8001190:	e007      	b.n	80011a2 <showManualTestsScreen+0x1a>
        setButtonHandler(btn, handlers[btn]);
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <showManualTestsScreen+0x30>)
 8001194:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001198:	4620      	mov	r0, r4
 800119a:	f002 f9b5 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800119e:	3401      	adds	r4, #1
 80011a0:	b2e4      	uxtb	r4, r4
 80011a2:	2c10      	cmp	r4, #16
 80011a4:	d9f5      	bls.n	8001192 <showManualTestsScreen+0xa>
    }
    osTaskAdd(manualTestsTask, 0, 100);
 80011a6:	2264      	movs	r2, #100	; 0x64
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <showManualTestsScreen+0x34>)
 80011ac:	f001 feaa 	bl	8002f04 <osTaskAdd>
}
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	bf00      	nop
 80011b4:	200001b4 	.word	0x200001b4
 80011b8:	080048c8 	.word	0x080048c8
 80011bc:	080010d1 	.word	0x080010d1

080011c0 <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    button5Handler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 80011c0:	b508      	push	{r3, lr}
    display68();
 80011c2:	f000 fe2b 	bl	8001e1c <display68>
    osTaskAdd(testTask, 0, 200);
 80011c6:	22c8      	movs	r2, #200	; 0xc8
 80011c8:	2100      	movs	r1, #0
 80011ca:	4802      	ldr	r0, [pc, #8]	; (80011d4 <testTask+0x14>)
 80011cc:	f001 fe9a 	bl	8002f04 <osTaskAdd>
}
 80011d0:	bd08      	pop	{r3, pc}
 80011d2:	bf00      	nop
 80011d4:	080011c1 	.word	0x080011c1

080011d8 <dummyButtonHandler>:
static void dummyButtonHandler() {
 80011d8:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011da:	f001 fc07 	bl	80029ec <soundKeyBeep>
}
 80011de:	bd08      	pop	{r3, pc}

080011e0 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80011e0:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011e2:	f001 fc03 	bl	80029ec <soundKeyBeep>
    disableMotor();
 80011e6:	f001 fa87 	bl	80026f8 <disableMotor>
    osTaskDelHandler(testTask);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <buttonNoHandler+0x18>)
 80011ec:	f001 fece 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80011f0:	f7ff ffca 	bl	8001188 <showManualTestsScreen>
}
 80011f4:	bd08      	pop	{r3, pc}
 80011f6:	bf00      	nop
 80011f8:	080011c1 	.word	0x080011c1

080011fc <button5Handler>:
static void button5Handler(uint32_t pressType) {
 80011fc:	b508      	push	{r3, lr}
    soundKeyBeep();
 80011fe:	f001 fbf5 	bl	80029ec <soundKeyBeep>
    increaseMotorSpeed(5);
 8001202:	2005      	movs	r0, #5
 8001204:	f001 fa4a 	bl	800269c <increaseMotorSpeed>
}
 8001208:	bd08      	pop	{r3, pc}

0800120a <button0Handler>:
static void button0Handler(uint32_t pressType) {
 800120a:	b508      	push	{r3, lr}
    soundKeyBeep();
 800120c:	f001 fbee 	bl	80029ec <soundKeyBeep>
    decreaseMotorSpeed(5);
 8001210:	2005      	movs	r0, #5
 8001212:	f001 fa53 	bl	80026bc <decreaseMotorSpeed>
}
 8001216:	bd08      	pop	{r3, pc}

08001218 <startMotorTest>:

void startMotorTest() {
 8001218:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800121a:	2400      	movs	r4, #0
 800121c:	e007      	b.n	800122e <startMotorTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <startMotorTest+0x2c>)
 8001220:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001224:	4620      	mov	r0, r4
 8001226:	f002 f96f 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800122a:	3401      	adds	r4, #1
 800122c:	b2e4      	uxtb	r4, r4
 800122e:	2c10      	cmp	r4, #16
 8001230:	d9f5      	bls.n	800121e <startMotorTest+0x6>
    }

    enableMotor();
 8001232:	f001 fa51 	bl	80026d8 <enableMotor>
    osTaskAdd(testTask, 0, 200);
 8001236:	22c8      	movs	r2, #200	; 0xc8
 8001238:	2100      	movs	r1, #0
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <startMotorTest+0x30>)
 800123c:	f001 fe62 	bl	8002f04 <osTaskAdd>
}
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	08004988 	.word	0x08004988
 8001248:	080011c1 	.word	0x080011c1

0800124c <testTask>:
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, dummyButtonHandler,
    dummyButtonHandler, dummyButtonHandler, dummyButtonHandler, buttonNoHandler,
    dummyButtonHandler
};

static void testTask(uint32_t parameters) {
 800124c:	b510      	push	{r4, lr}
    if (firstStart) {
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <testTask+0x54>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b99b      	cbnz	r3, 800127c <testTask+0x30>
        currentSoundLevel = 1;
        display65(soundGetLevel());
        firstStart = 0;
    } else {
        soundSetLevel(currentSoundLevel);
 8001254:	4c13      	ldr	r4, [pc, #76]	; (80012a4 <testTask+0x58>)
 8001256:	7820      	ldrb	r0, [r4, #0]
 8001258:	f001 fbac 	bl	80029b4 <soundSetLevel>
        display65(soundGetLevel());
 800125c:	f001 fbb2 	bl	80029c4 <soundGetLevel>
 8001260:	b2c0      	uxtb	r0, r0
 8001262:	f000 fd6d 	bl	8001d40 <display65>
        soundKeyBeep();
 8001266:	f001 fbc1 	bl	80029ec <soundKeyBeep>

        currentSoundLevel++;
 800126a:	7823      	ldrb	r3, [r4, #0]
 800126c:	3301      	adds	r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	7023      	strb	r3, [r4, #0]
        if (currentSoundLevel > 7) {
 8001272:	2b07      	cmp	r3, #7
 8001274:	d90d      	bls.n	8001292 <testTask+0x46>
            currentSoundLevel = 1;
 8001276:	2201      	movs	r2, #1
 8001278:	7022      	strb	r2, [r4, #0]
 800127a:	e00a      	b.n	8001292 <testTask+0x46>
        currentSoundLevel = 1;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <testTask+0x58>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
        display65(soundGetLevel());
 8001282:	f001 fb9f 	bl	80029c4 <soundGetLevel>
 8001286:	b2c0      	uxtb	r0, r0
 8001288:	f000 fd5a 	bl	8001d40 <display65>
        firstStart = 0;
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <testTask+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
        }
    }
    osTaskAdd(testTask, 0, 1000);
 8001292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001296:	2100      	movs	r1, #0
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <testTask+0x5c>)
 800129a:	f001 fe33 	bl	8002f04 <osTaskAdd>
}
 800129e:	bd10      	pop	{r4, pc}
 80012a0:	200001b6 	.word	0x200001b6
 80012a4:	200001b5 	.word	0x200001b5
 80012a8:	0800124d 	.word	0x0800124d

080012ac <dummyButtonHandler>:
static void dummyButtonHandler() {
 80012ac:	b508      	push	{r3, lr}
    soundKeyBeep();
 80012ae:	f001 fb9d 	bl	80029ec <soundKeyBeep>
}
 80012b2:	bd08      	pop	{r3, pc}

080012b4 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 80012b4:	b508      	push	{r3, lr}
    soundKeyBeep();
 80012b6:	f001 fb99 	bl	80029ec <soundKeyBeep>
    soundSetLevel(3);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f001 fb7a 	bl	80029b4 <soundSetLevel>
    osTaskDelHandler(testTask);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <buttonNoHandler+0x18>)
 80012c2:	f001 fe63 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 80012c6:	f7ff ff5f 	bl	8001188 <showManualTestsScreen>
}
 80012ca:	bd08      	pop	{r3, pc}
 80012cc:	0800124d 	.word	0x0800124d

080012d0 <startSoundTest>:

void startSoundTest() {
 80012d0:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80012d2:	2400      	movs	r4, #0
 80012d4:	e007      	b.n	80012e6 <startSoundTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <startSoundTest+0x2c>)
 80012d8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80012dc:	4620      	mov	r0, r4
 80012de:	f002 f913 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 80012e2:	3401      	adds	r4, #1
 80012e4:	b2e4      	uxtb	r4, r4
 80012e6:	2c10      	cmp	r4, #16
 80012e8:	d9f5      	bls.n	80012d6 <startSoundTest+0x6>
    }

    firstStart = 1;
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <startSoundTest+0x30>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    osTaskAdd(testTask, 0, 200);
 80012f0:	22c8      	movs	r2, #200	; 0xc8
 80012f2:	2100      	movs	r1, #0
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <startSoundTest+0x34>)
 80012f6:	f001 fe05 	bl	8002f04 <osTaskAdd>
}
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	080049cc 	.word	0x080049cc
 8001300:	200001b6 	.word	0x200001b6
 8001304:	0800124d 	.word	0x0800124d

08001308 <dummyButtonHandler>:
#include <game.h>

static void testTask(uint32_t parameters);

static void dummyButtonHandler() {
}
 8001308:	4770      	bx	lr
	...

0800130c <testTask>:
    buttonOkHandler,            //Button_Ok
    buttonNoHandler,            //Button_No
    dummyButtonHandler          //Button_Power
};

static void testTask(uint32_t parameters) {
 800130c:	b508      	push	{r3, lr}
    gameLoop();
 800130e:	f7ff fe5b 	bl	8000fc8 <gameLoop>
    osTaskAdd(testTask, 0, 400);
 8001312:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001316:	2100      	movs	r1, #0
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <testTask+0x14>)
 800131a:	f001 fdf3 	bl	8002f04 <osTaskAdd>
}
 800131e:	bd08      	pop	{r3, pc}
 8001320:	0800130d 	.word	0x0800130d

08001324 <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 8001324:	b508      	push	{r3, lr}
    soundStopAlarm();
 8001326:	f001 fb7d 	bl	8002a24 <soundStopAlarm>
    gameRestart();
 800132a:	f7ff fb85 	bl	8000a38 <gameRestart>
}
 800132e:	bd08      	pop	{r3, pc}

08001330 <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 8001330:	b508      	push	{r3, lr}
    soundStopAlarm();
 8001332:	f001 fb77 	bl	8002a24 <soundStopAlarm>
    osTaskDelHandler(testTask);
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <buttonNoHandler+0x14>)
 8001338:	f001 fe28 	bl	8002f8c <osTaskDelHandler>
    showManualTestsScreen();
 800133c:	f7ff ff24 	bl	8001188 <showManualTestsScreen>
}
 8001340:	bd08      	pop	{r3, pc}
 8001342:	bf00      	nop
 8001344:	0800130d 	.word	0x0800130d

08001348 <buttonPointHandler>:
static void buttonPointHandler(uint32_t pressType) {
 8001348:	b508      	push	{r3, lr}
    gameMoveRight();
 800134a:	f7ff fd4b 	bl	8000de4 <gameMoveRight>
}
 800134e:	bd08      	pop	{r3, pc}

08001350 <button5Handler>:
static void button5Handler(uint32_t pressType) {
 8001350:	b508      	push	{r3, lr}
    gameRotate();
 8001352:	f7ff fda5 	bl	8000ea0 <gameRotate>
}
 8001356:	bd08      	pop	{r3, pc}

08001358 <button4Handler>:
static void button4Handler(uint32_t pressType) {
 8001358:	b508      	push	{r3, lr}
    gameMoveLeft();
 800135a:	f7ff fcf1 	bl	8000d40 <gameMoveLeft>
}
 800135e:	bd08      	pop	{r3, pc}

08001360 <buttonPrimeHandler>:
static void buttonPrimeHandler(uint32_t pressType) {
 8001360:	b508      	push	{r3, lr}
    gameMoveDown();
 8001362:	f7ff fc4f 	bl	8000c04 <gameMoveDown>
}
 8001366:	bd08      	pop	{r3, pc}

08001368 <startTetrisTest>:

void startTetrisTest(void) {
 8001368:	b510      	push	{r4, lr}
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800136a:	2400      	movs	r4, #0
 800136c:	e007      	b.n	800137e <startTetrisTest+0x16>
        setButtonHandler(btn, handlers[btn]);
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <startTetrisTest+0x2c>)
 8001370:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8001374:	4620      	mov	r0, r4
 8001376:	f002 f8c7 	bl	8003508 <setButtonHandler>
    for (buttonName_t btn = 0; btn < Button_Last; btn++) {
 800137a:	3401      	adds	r4, #1
 800137c:	b2e4      	uxtb	r4, r4
 800137e:	2c10      	cmp	r4, #16
 8001380:	d9f5      	bls.n	800136e <startTetrisTest+0x6>
    }
    gameRestart();
 8001382:	f7ff fb59 	bl	8000a38 <gameRestart>
    osTaskAdd(testTask, 0, 200);
 8001386:	22c8      	movs	r2, #200	; 0xc8
 8001388:	2100      	movs	r1, #0
 800138a:	4803      	ldr	r0, [pc, #12]	; (8001398 <startTetrisTest+0x30>)
 800138c:	f001 fdba 	bl	8002f04 <osTaskAdd>
}
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	08004a10 	.word	0x08004a10
 8001398:	0800130d 	.word	0x0800130d

0800139c <_exit>:
// is required.

void
__attribute__((weak))
_exit(int code __attribute__((unused)))
{
 800139c:	e7fe      	b.n	800139c <_exit>
	...

080013a0 <_sbrk>:
// The definitions used here should be kept in sync with the
// stack definitions in the linker script.

caddr_t
_sbrk(int incr)
{
 80013a0:	b508      	push	{r3, lr}
 80013a2:	4603      	mov	r3, r0
  extern char _Heap_Limit; // Defined by the linker.

  static char* current_heap_end;
  char* current_block_address;

  if (current_heap_end == 0)
 80013a4:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <_sbrk+0x38>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	b15a      	cbz	r2, 80013c2 <_sbrk+0x22>
    {
      current_heap_end = &_Heap_Begin;
    }

  current_block_address = current_heap_end;
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <_sbrk+0x38>)
 80013ac:	6810      	ldr	r0, [r2, #0]

  // Need to align heap to word boundary, else will get
  // hard faults on Cortex-M0. So we assume that heap starts on
  // word boundary, hence make sure we always add a multiple of
  // 4 to it.
  incr = (incr + 3) & (~3); // align value to 4
 80013ae:	3303      	adds	r3, #3
 80013b0:	f023 0303 	bic.w	r3, r3, #3
  if (current_heap_end + incr > &_Heap_Limit)
 80013b4:	4403      	add	r3, r0
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <_sbrk+0x3c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d806      	bhi.n	80013ca <_sbrk+0x2a>
      errno = ENOMEM;
      return (caddr_t) - 1;
#endif
    }

  current_heap_end += incr;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <_sbrk+0x38>)
 80013be:	6013      	str	r3, [r2, #0]

  return (caddr_t) current_block_address;
}
 80013c0:	bd08      	pop	{r3, pc}
      current_heap_end = &_Heap_Begin;
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x38>)
 80013c4:	4906      	ldr	r1, [pc, #24]	; (80013e0 <_sbrk+0x40>)
 80013c6:	6011      	str	r1, [r2, #0]
 80013c8:	e7ef      	b.n	80013aa <_sbrk+0xa>
      errno = ENOMEM;
 80013ca:	f002 f8bf 	bl	800354c <__errno>
 80013ce:	230c      	movs	r3, #12
 80013d0:	6003      	str	r3, [r0, #0]
      return (caddr_t) - 1;
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295
 80013d6:	e7f3      	b.n	80013c0 <_sbrk+0x20>
 80013d8:	200001b8 	.word	0x200001b8
 80013dc:	2000fc00 	.word	0x2000fc00
 80013e0:	20000584 	.word	0x20000584

080013e4 <__initialize_args>:
  // available from the host environment. argv[argc] shall be a null pointer.
  // (static, no const)
  static char* argv[2] =
    { name, NULL };

  *p_argc = 1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	6003      	str	r3, [r0, #0]
  *p_argv = &argv[0];
 80013e8:	4b01      	ldr	r3, [pc, #4]	; (80013f0 <__initialize_args+0xc>)
 80013ea:	600b      	str	r3, [r1, #0]
  return;
}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000024 	.word	0x20000024

080013f4 <trace_printf>:

// ----------------------------------------------------------------------------

int
trace_printf(const char* format, ...)
{
 80013f4:	b40f      	push	{r0, r1, r2, r3}
 80013f6:	b500      	push	{lr}
 80013f8:	b083      	sub	sp, #12
 80013fa:	ab04      	add	r3, sp, #16
 80013fc:	f853 2b04 	ldr.w	r2, [r3], #4
  int ret;
  va_list ap;

  va_start (ap, format);
 8001400:	9301      	str	r3, [sp, #4]
  // TODO: rewrite it to no longer use newlib, it is way too heavy

  static char buf[OS_INTEGER_TRACE_PRINTF_TMP_ARRAY_SIZE];

  // Print to the local buffer
  ret = vsnprintf (buf, sizeof(buf), format, ap);
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <trace_printf+0x2c>)
 8001406:	f002 fa15 	bl	8003834 <vsniprintf>
  if (ret > 0)
 800140a:	2800      	cmp	r0, #0
 800140c:	dd03      	ble.n	8001416 <trace_printf+0x22>
    {
      // Transfer the buffer to the device
      ret = trace_write (buf, (size_t)ret);
 800140e:	4601      	mov	r1, r0
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <trace_printf+0x2c>)
 8001412:	f000 f807 	bl	8001424 <trace_write>
    }

  va_end (ap);
  return ret;
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d eb04 	ldr.w	lr, [sp], #4
 800141c:	b004      	add	sp, #16
 800141e:	4770      	bx	lr
 8001420:	200001c0 	.word	0x200001c0

08001424 <trace_write>:
#elif defined(OS_USE_TRACE_SEMIHOSTING_DEBUG)
  return _trace_write_semihosting_debug(buf, nbyte);
#endif

  return -1;
}
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	4770      	bx	lr
	...

0800142c <__initialize_hardware_early>:
// priority is Privileged, and the Stack is set to Main.

void
__attribute__((weak))
__initialize_hardware_early(void)
{
 800142c:	b508      	push	{r3, lr}
  // Call the CSMSIS system initialisation routine.
  SystemInit();
 800142e:	f000 f887 	bl	8001540 <SystemInit>

#if defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  // Set VTOR to the actual address, provided by the linker script.
  // Override the manual, possibly wrong, SystemInit() setting.
  SCB->VTOR = (uint32_t)(&__vectors_start);
 8001432:	4a02      	ldr	r2, [pc, #8]	; (800143c <__initialize_hardware_early+0x10>)
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <__initialize_hardware_early+0x14>)
 8001436:	609a      	str	r2, [r3, #8]
#endif // (__VFP_FP__) && !(__SOFTFP__)

#if defined(OS_DEBUG_SEMIHOSTING_FAULTS)
  SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk;
#endif
}
 8001438:	bd08      	pop	{r3, pc}
 800143a:	bf00      	nop
 800143c:	08000000 	.word	0x08000000
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__initialize_hardware>:
// constructors.

void
__attribute__((weak))
__initialize_hardware(void)
{
 8001444:	b508      	push	{r3, lr}
  // Call the CSMSIS system clock routine to store the clock frequency
  // in the SystemCoreClock global RAM location.
  SystemCoreClockUpdate();
 8001446:	f000 f899 	bl	800157c <SystemCoreClockUpdate>
}
 800144a:	bd08      	pop	{r3, pc}

0800144c <dumpExceptionStack>:
{
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	4604      	mov	r4, r0
 8001450:	460d      	mov	r5, r1
 8001452:	4617      	mov	r7, r2
 8001454:	461e      	mov	r6, r3
  trace_printf ("Stack frame:\n");
 8001456:	4827      	ldr	r0, [pc, #156]	; (80014f4 <dumpExceptionStack+0xa8>)
 8001458:	f7ff ffcc 	bl	80013f4 <trace_printf>
  trace_printf (" R0 =  %08X\n", frame->r0);
 800145c:	6821      	ldr	r1, [r4, #0]
 800145e:	4826      	ldr	r0, [pc, #152]	; (80014f8 <dumpExceptionStack+0xac>)
 8001460:	f7ff ffc8 	bl	80013f4 <trace_printf>
  trace_printf (" R1 =  %08X\n", frame->r1);
 8001464:	6861      	ldr	r1, [r4, #4]
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <dumpExceptionStack+0xb0>)
 8001468:	f7ff ffc4 	bl	80013f4 <trace_printf>
  trace_printf (" R2 =  %08X\n", frame->r2);
 800146c:	68a1      	ldr	r1, [r4, #8]
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <dumpExceptionStack+0xb4>)
 8001470:	f7ff ffc0 	bl	80013f4 <trace_printf>
  trace_printf (" R3 =  %08X\n", frame->r3);
 8001474:	68e1      	ldr	r1, [r4, #12]
 8001476:	4823      	ldr	r0, [pc, #140]	; (8001504 <dumpExceptionStack+0xb8>)
 8001478:	f7ff ffbc 	bl	80013f4 <trace_printf>
  trace_printf (" R12 = %08X\n", frame->r12);
 800147c:	6921      	ldr	r1, [r4, #16]
 800147e:	4822      	ldr	r0, [pc, #136]	; (8001508 <dumpExceptionStack+0xbc>)
 8001480:	f7ff ffb8 	bl	80013f4 <trace_printf>
  trace_printf (" LR =  %08X\n", frame->lr);
 8001484:	6961      	ldr	r1, [r4, #20]
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <dumpExceptionStack+0xc0>)
 8001488:	f7ff ffb4 	bl	80013f4 <trace_printf>
  trace_printf (" PC =  %08X\n", frame->pc);
 800148c:	69a1      	ldr	r1, [r4, #24]
 800148e:	4820      	ldr	r0, [pc, #128]	; (8001510 <dumpExceptionStack+0xc4>)
 8001490:	f7ff ffb0 	bl	80013f4 <trace_printf>
  trace_printf (" PSR = %08X\n", frame->psr);
 8001494:	69e1      	ldr	r1, [r4, #28]
 8001496:	481f      	ldr	r0, [pc, #124]	; (8001514 <dumpExceptionStack+0xc8>)
 8001498:	f7ff ffac 	bl	80013f4 <trace_printf>
  trace_printf ("FSR/FAR:\n");
 800149c:	481e      	ldr	r0, [pc, #120]	; (8001518 <dumpExceptionStack+0xcc>)
 800149e:	f7ff ffa9 	bl	80013f4 <trace_printf>
  trace_printf (" CFSR =  %08X\n", cfsr);
 80014a2:	4629      	mov	r1, r5
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <dumpExceptionStack+0xd0>)
 80014a6:	f7ff ffa5 	bl	80013f4 <trace_printf>
  trace_printf (" HFSR =  %08X\n", SCB->HFSR);
 80014aa:	4c1d      	ldr	r4, [pc, #116]	; (8001520 <dumpExceptionStack+0xd4>)
 80014ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80014ae:	481d      	ldr	r0, [pc, #116]	; (8001524 <dumpExceptionStack+0xd8>)
 80014b0:	f7ff ffa0 	bl	80013f4 <trace_printf>
  trace_printf (" DFSR =  %08X\n", SCB->DFSR);
 80014b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <dumpExceptionStack+0xdc>)
 80014b8:	f7ff ff9c 	bl	80013f4 <trace_printf>
  trace_printf (" AFSR =  %08X\n", SCB->AFSR);
 80014bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80014be:	481b      	ldr	r0, [pc, #108]	; (800152c <dumpExceptionStack+0xe0>)
 80014c0:	f7ff ff98 	bl	80013f4 <trace_printf>
  if (cfsr & (1UL << 7))
 80014c4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80014c8:	d10a      	bne.n	80014e0 <dumpExceptionStack+0x94>
  if (cfsr & (1UL << 15))
 80014ca:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 80014ce:	d10c      	bne.n	80014ea <dumpExceptionStack+0x9e>
  trace_printf ("Misc\n");
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <dumpExceptionStack+0xe4>)
 80014d2:	f7ff ff8f 	bl	80013f4 <trace_printf>
  trace_printf (" LR/EXC_RETURN= %08X\n", lr);
 80014d6:	9906      	ldr	r1, [sp, #24]
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <dumpExceptionStack+0xe8>)
 80014da:	f7ff ff8b 	bl	80013f4 <trace_printf>
}
 80014de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      trace_printf (" MMFAR = %08X\n", mmfar);
 80014e0:	4639      	mov	r1, r7
 80014e2:	4815      	ldr	r0, [pc, #84]	; (8001538 <dumpExceptionStack+0xec>)
 80014e4:	f7ff ff86 	bl	80013f4 <trace_printf>
 80014e8:	e7ef      	b.n	80014ca <dumpExceptionStack+0x7e>
      trace_printf (" BFAR =  %08X\n", bfar);
 80014ea:	4631      	mov	r1, r6
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <dumpExceptionStack+0xf0>)
 80014ee:	f7ff ff81 	bl	80013f4 <trace_printf>
 80014f2:	e7ed      	b.n	80014d0 <dumpExceptionStack+0x84>
 80014f4:	08004a54 	.word	0x08004a54
 80014f8:	08004a64 	.word	0x08004a64
 80014fc:	08004a74 	.word	0x08004a74
 8001500:	08004a84 	.word	0x08004a84
 8001504:	08004a94 	.word	0x08004a94
 8001508:	08004aa4 	.word	0x08004aa4
 800150c:	08004ab4 	.word	0x08004ab4
 8001510:	08004ac4 	.word	0x08004ac4
 8001514:	08004ad4 	.word	0x08004ad4
 8001518:	08004ae4 	.word	0x08004ae4
 800151c:	08004af0 	.word	0x08004af0
 8001520:	e000ed00 	.word	0xe000ed00
 8001524:	08004b00 	.word	0x08004b00
 8001528:	08004b10 	.word	0x08004b10
 800152c:	08004b20 	.word	0x08004b20
 8001530:	08004b50 	.word	0x08004b50
 8001534:	08004b58 	.word	0x08004b58
 8001538:	08004b30 	.word	0x08004b30
 800153c:	08004b40 	.word	0x08004b40

08001540 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <SystemInit+0x34>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f042 0201 	orr.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800154a:	2100      	movs	r1, #0
 800154c:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001554:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001558:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800155a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800155e:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001566:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001568:	6199      	str	r1, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SystemInit+0x38>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	609a      	str	r2, [r3, #8]
#endif
}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <SystemCoreClockUpdate+0xc0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f013 0f08 	tst.w	r3, #8
 8001584:	d116      	bne.n	80015b4 <SystemCoreClockUpdate+0x38>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <SystemCoreClockUpdate+0xc0>)
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <SystemCoreClockUpdate+0xc4>)
 8001592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <SystemCoreClockUpdate+0xc0>)
 8001598:	6893      	ldr	r3, [r2, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b0c      	cmp	r3, #12
 80015a0:	d848      	bhi.n	8001634 <SystemCoreClockUpdate+0xb8>
 80015a2:	e8df f003 	tbb	[pc, r3]
 80015a6:	470c      	.short	0x470c
 80015a8:	47194747 	.word	0x47194747
 80015ac:	471d4747 	.word	0x471d4747
 80015b0:	4747      	.short	0x4747
 80015b2:	21          	.byte	0x21
 80015b3:	00          	.byte	0x00
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015bc:	e7e8      	b.n	8001590 <SystemCoreClockUpdate+0x14>
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015c0:	6019      	str	r1, [r3, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015ca:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <SystemCoreClockUpdate+0xcc>)
 80015cc:	5cd1      	ldrb	r1, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015ce:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015d0:	6813      	ldr	r3, [r2, #0]
 80015d2:	40cb      	lsrs	r3, r1
 80015d4:	6013      	str	r3, [r2, #0]
}
 80015d6:	4770      	bx	lr
      SystemCoreClock = HSI_VALUE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <SystemCoreClockUpdate+0xd0>)
 80015dc:	601a      	str	r2, [r3, #0]
      break;
 80015de:	e7f0      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
      SystemCoreClock = HSE_VALUE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 80015e2:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <SystemCoreClockUpdate+0xd4>)
 80015e4:	601a      	str	r2, [r3, #0]
      break;
 80015e6:	e7ec      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <SystemCoreClockUpdate+0xc0>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80015f6:	3301      	adds	r3, #1
      switch (pllsource)
 80015f8:	2a02      	cmp	r2, #2
 80015fa:	d004      	beq.n	8001606 <SystemCoreClockUpdate+0x8a>
 80015fc:	2a03      	cmp	r2, #3
 80015fe:	d015      	beq.n	800162c <SystemCoreClockUpdate+0xb0>
          pllvco = (msirange / pllm);
 8001600:	fbb1 f3f3 	udiv	r3, r1, r3
          break;
 8001604:	e002      	b.n	800160c <SystemCoreClockUpdate+0x90>
          pllvco = (HSI_VALUE / pllm);
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <SystemCoreClockUpdate+0xd0>)
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800160c:	490b      	ldr	r1, [pc, #44]	; (800163c <SystemCoreClockUpdate+0xc0>)
 800160e:	68ca      	ldr	r2, [r1, #12]
 8001610:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001614:	fb03 f302 	mul.w	r3, r3, r2
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001618:	68ca      	ldr	r2, [r1, #12]
 800161a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800161e:	3201      	adds	r2, #1
 8001620:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 8001622:	fbb3 f3f2 	udiv	r3, r3, r2
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 8001628:	6013      	str	r3, [r2, #0]
      break;
 800162a:	e7ca      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
          pllvco = (HSE_VALUE / pllm);
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <SystemCoreClockUpdate+0xd4>)
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
          break;
 8001632:	e7eb      	b.n	800160c <SystemCoreClockUpdate+0x90>
      SystemCoreClock = msirange;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <SystemCoreClockUpdate+0xc8>)
 8001636:	6019      	str	r1, [r3, #0]
      break;
 8001638:	e7c3      	b.n	80015c2 <SystemCoreClockUpdate+0x46>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	08004bac 	.word	0x08004bac
 8001644:	2000002c 	.word	0x2000002c
 8001648:	08004b9c 	.word	0x08004b9c
 800164c:	00f42400 	.word	0x00f42400
 8001650:	007a1200 	.word	0x007a1200

08001654 <TIM6_DAC_IRQHandler>:
#include <sound.h>
#include <stm32l4xx.h>

void TIM6_DAC_IRQHandler() {
 8001654:	b508      	push	{r3, lr}
    if (TIM6->SR & TIM_SR_UIF) {
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <TIM6_DAC_IRQHandler+0x20>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f013 0f01 	tst.w	r3, #1
 800165e:	d100      	bne.n	8001662 <TIM6_DAC_IRQHandler+0xe>
        TIM6->SR &= ~TIM_SR_UIF;
        soundControlHandler();
    }
}
 8001660:	bd08      	pop	{r3, pc}
        TIM6->SR &= ~TIM_SR_UIF;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <TIM6_DAC_IRQHandler+0x20>)
 8001664:	6913      	ldr	r3, [r2, #16]
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6113      	str	r3, [r2, #16]
        soundControlHandler();
 800166c:	f001 fb3e 	bl	8002cec <soundControlHandler>
}
 8001670:	e7f6      	b.n	8001660 <TIM6_DAC_IRQHandler+0xc>
 8001672:	bf00      	nop
 8001674:	40001000 	.word	0x40001000

08001678 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 8001678:	b508      	push	{r3, lr}
    if (TIM3->SR & TIM_SR_UIF) {
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <TIM3_IRQHandler+0x20>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f013 0f01 	tst.w	r3, #1
 8001682:	d100      	bne.n	8001686 <TIM3_IRQHandler+0xe>
        TIM3->SR &= ~TIM_SR_UIF;
        soundWaveformHandler();
    }
}
 8001684:	bd08      	pop	{r3, pc}
        TIM3->SR &= ~TIM_SR_UIF;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <TIM3_IRQHandler+0x20>)
 8001688:	6913      	ldr	r3, [r2, #16]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6113      	str	r3, [r2, #16]
        soundWaveformHandler();
 8001690:	f001 fb52 	bl	8002d38 <soundWaveformHandler>
}
 8001694:	e7f6      	b.n	8001684 <TIM3_IRQHandler+0xc>
 8001696:	bf00      	nop
 8001698:	40000400 	.word	0x40000400

0800169c <cmdWrite>:
    }
    start_display();
}

static void cmdWrite(uint16_t cmd) {
    WR_CLEAR();
 800169c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a6:	615a      	str	r2, [r3, #20]
    DC_CLEAR();
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ae:	615a      	str	r2, [r3, #20]
    GPIOD->ODR = cmd;
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <cmdWrite+0x24>)
 80016b2:	6150      	str	r0, [r2, #20]
    WR_SET();
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ba:	615a      	str	r2, [r3, #20]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	48000c00 	.word	0x48000c00

080016c4 <dataWrite>:

static void dataWrite(uint16_t data) {
    WR_CLEAR();
 80016c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ce:	615a      	str	r2, [r3, #20]
    DC_SET();
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016d6:	615a      	str	r2, [r3, #20]
    GPIOD->ODR = data;
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <dataWrite+0x24>)
 80016da:	6150      	str	r0, [r2, #20]
    WR_SET();
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016e2:	615a      	str	r2, [r3, #20]
}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	48000c00 	.word	0x48000c00

080016ec <setFgColor>:

void setFgColor(uint16_t color) {
    fgColor = color;
 80016ec:	4b01      	ldr	r3, [pc, #4]	; (80016f4 <setFgColor+0x8>)
 80016ee:	8018      	strh	r0, [r3, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000246 	.word	0x20000246

080016f8 <setBgColor>:

void setBgColor(uint16_t color) {
    bgColor = color;
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <setBgColor+0x8>)
 80016fa:	8018      	strh	r0, [r3, #0]
}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000240 	.word	0x20000240

08001704 <graflocat>:

//column -> x
//page -> y
void graflocat(uint16_t page, uint16_t column) {
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	4605      	mov	r5, r0
 8001708:	460c      	mov	r4, r1
    cmdWrite(0x2A);
 800170a:	202a      	movs	r0, #42	; 0x2a
 800170c:	f7ff ffc6 	bl	800169c <cmdWrite>
    dataWrite(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff ffd7 	bl	80016c4 <dataWrite>
    dataWrite(240 - page - getFontSize());
 8001716:	f000 fe71 	bl	80023fc <getFontSize>
 800171a:	b283      	uxth	r3, r0
 800171c:	4268      	negs	r0, r5
 800171e:	1ac0      	subs	r0, r0, r3
 8001720:	b280      	uxth	r0, r0
 8001722:	30f0      	adds	r0, #240	; 0xf0
 8001724:	b280      	uxth	r0, r0
 8001726:	f7ff ffcd 	bl	80016c4 <dataWrite>
    dataWrite(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ffca 	bl	80016c4 <dataWrite>
    dataWrite(240);
 8001730:	20f0      	movs	r0, #240	; 0xf0
 8001732:	f7ff ffc7 	bl	80016c4 <dataWrite>
    cmdWrite(0x2B);
 8001736:	202b      	movs	r0, #43	; 0x2b
 8001738:	f7ff ffb0 	bl	800169c <cmdWrite>
    dataWrite(column >> 8);
 800173c:	0a20      	lsrs	r0, r4, #8
 800173e:	f7ff ffc1 	bl	80016c4 <dataWrite>
    dataWrite(column & 0xFF);
 8001742:	b2e0      	uxtb	r0, r4
 8001744:	f7ff ffbe 	bl	80016c4 <dataWrite>
    dataWrite(0x01);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff ffbb 	bl	80016c4 <dataWrite>
    dataWrite(0x3F);
 800174e:	203f      	movs	r0, #63	; 0x3f
 8001750:	f7ff ffb8 	bl	80016c4 <dataWrite>

    currentPage = page;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <graflocat+0x5c>)
 8001756:	801d      	strh	r5, [r3, #0]
    currentColumn = column;
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <graflocat+0x60>)
 800175a:	801c      	strh	r4, [r3, #0]
}
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	20000244 	.word	0x20000244
 8001764:	20000242 	.word	0x20000242

08001768 <fillhx>:

void fillhx(uint16_t column) {
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4606      	mov	r6, r0
    uint16_t lastCol;

    lastCol = column;
    if (column > 320) {
 800176c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
 8001770:	d901      	bls.n	8001776 <fillhx+0xe>
        lastCol = 320;
 8001772:	f44f 76a0 	mov.w	r6, #320	; 0x140
    }
    graflocat(currentPage, currentColumn);
 8001776:	4c11      	ldr	r4, [pc, #68]	; (80017bc <fillhx+0x54>)
 8001778:	8821      	ldrh	r1, [r4, #0]
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <fillhx+0x58>)
 800177c:	8818      	ldrh	r0, [r3, #0]
 800177e:	f7ff ffc1 	bl	8001704 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 8001782:	8825      	ldrh	r5, [r4, #0]
 8001784:	e011      	b.n	80017aa <fillhx+0x42>
        cmdWrite(0x2C);
        for (int j = 0; j < getFontSize(); j++) {
            dataWrite(bgColor);
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <fillhx+0x5c>)
 8001788:	8818      	ldrh	r0, [r3, #0]
 800178a:	f7ff ff9b 	bl	80016c4 <dataWrite>
        for (int j = 0; j < getFontSize(); j++) {
 800178e:	3401      	adds	r4, #1
 8001790:	f000 fe34 	bl	80023fc <getFontSize>
 8001794:	42a0      	cmp	r0, r4
 8001796:	dcf6      	bgt.n	8001786 <fillhx+0x1e>
        }
        graflocat(currentPage, currentColumn + 1);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <fillhx+0x54>)
 800179a:	8819      	ldrh	r1, [r3, #0]
 800179c:	3101      	adds	r1, #1
 800179e:	b289      	uxth	r1, r1
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <fillhx+0x58>)
 80017a2:	8818      	ldrh	r0, [r3, #0]
 80017a4:	f7ff ffae 	bl	8001704 <graflocat>
    for (int i = currentColumn; i < lastCol; i++) {
 80017a8:	3501      	adds	r5, #1
 80017aa:	42ae      	cmp	r6, r5
 80017ac:	dd04      	ble.n	80017b8 <fillhx+0x50>
        cmdWrite(0x2C);
 80017ae:	202c      	movs	r0, #44	; 0x2c
 80017b0:	f7ff ff74 	bl	800169c <cmdWrite>
        for (int j = 0; j < getFontSize(); j++) {
 80017b4:	2400      	movs	r4, #0
 80017b6:	e7eb      	b.n	8001790 <fillhx+0x28>
    }
}
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
 80017ba:	bf00      	nop
 80017bc:	20000242 	.word	0x20000242
 80017c0:	20000244 	.word	0x20000244
 80017c4:	20000240 	.word	0x20000240

080017c8 <enterxxx>:

void enterxxx() {
 80017c8:	b508      	push	{r3, lr}
    fillhx(320);
 80017ca:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80017ce:	f7ff ffcb 	bl	8001768 <fillhx>
    currentColumn = 0;
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <enterxxx+0x20>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
    currentPage += getFontSize();
 80017d8:	f000 fe10 	bl	80023fc <getFontSize>
 80017dc:	4a03      	ldr	r2, [pc, #12]	; (80017ec <enterxxx+0x24>)
 80017de:	8813      	ldrh	r3, [r2, #0]
 80017e0:	fa13 f080 	uxtah	r0, r3, r0
 80017e4:	8010      	strh	r0, [r2, #0]
}
 80017e6:	bd08      	pop	{r3, pc}
 80017e8:	20000242 	.word	0x20000242
 80017ec:	20000244 	.word	0x20000244

080017f0 <start_display>:

void start_display() {
 80017f0:	b508      	push	{r3, lr}
    currentPage = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <start_display+0x20>)
 80017f6:	8013      	strh	r3, [r2, #0]
    currentColumn = 0;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <start_display+0x24>)
 80017fa:	8013      	strh	r3, [r2, #0]
    fgColor = color_datatitle;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <start_display+0x28>)
 80017fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001802:	8011      	strh	r1, [r2, #0]
    bgColor = color_defback;
 8001804:	4a05      	ldr	r2, [pc, #20]	; (800181c <start_display+0x2c>)
 8001806:	8013      	strh	r3, [r2, #0]
    setFontSize(8);
 8001808:	2008      	movs	r0, #8
 800180a:	f000 fdcd 	bl	80023a8 <setFontSize>
}
 800180e:	bd08      	pop	{r3, pc}
 8001810:	20000244 	.word	0x20000244
 8001814:	20000242 	.word	0x20000242
 8001818:	20000246 	.word	0x20000246
 800181c:	20000240 	.word	0x20000240

08001820 <initDisplay>:
void initDisplay() {
 8001820:	b508      	push	{r3, lr}
    RST_SET();
 8001822:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001826:	6953      	ldr	r3, [r2, #20]
 8001828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800182c:	6153      	str	r3, [r2, #20]
    for (int i = 0; i < 1000; i++);
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <initDisplay+0x14>
 8001832:	3301      	adds	r3, #1
 8001834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001838:	dbfb      	blt.n	8001832 <initDisplay+0x12>
    RD_SET();
 800183a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	615a      	str	r2, [r3, #20]
    CS_CLEAR();
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184c:	615a      	str	r2, [r3, #20]
    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	e014      	b.n	800187c <initDisplay+0x5c>
                WR_CLEAR();
 8001852:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001856:	6951      	ldr	r1, [r2, #20]
 8001858:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800185c:	6151      	str	r1, [r2, #20]
                DC_CLEAR();
 800185e:	6951      	ldr	r1, [r2, #20]
 8001860:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001864:	6151      	str	r1, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 8001866:	4916      	ldr	r1, [pc, #88]	; (80018c0 <initDisplay+0xa0>)
 8001868:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800186c:	7848      	ldrb	r0, [r1, #1]
 800186e:	4915      	ldr	r1, [pc, #84]	; (80018c4 <initDisplay+0xa4>)
 8001870:	6148      	str	r0, [r1, #20]
                WR_SET();
 8001872:	6951      	ldr	r1, [r2, #20]
 8001874:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001878:	6151      	str	r1, [r2, #20]
    for (uint32_t i = 0; i < INIT_SEQUENCE_LENGTH; i++) {
 800187a:	3301      	adds	r3, #1
 800187c:	2b4d      	cmp	r3, #77	; 0x4d
 800187e:	d81b      	bhi.n	80018b8 <initDisplay+0x98>
        switch (DisplayInitSequence[i].type) {
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <initDisplay+0xa0>)
 8001882:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001886:	2a00      	cmp	r2, #0
 8001888:	d0e3      	beq.n	8001852 <initDisplay+0x32>
 800188a:	2a01      	cmp	r2, #1
 800188c:	d1f5      	bne.n	800187a <initDisplay+0x5a>
                WR_CLEAR();
 800188e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001892:	6951      	ldr	r1, [r2, #20]
 8001894:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001898:	6151      	str	r1, [r2, #20]
                DC_SET();
 800189a:	6951      	ldr	r1, [r2, #20]
 800189c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80018a0:	6151      	str	r1, [r2, #20]
                GPIOD->ODR = DisplayInitSequence[i].data;
 80018a2:	4907      	ldr	r1, [pc, #28]	; (80018c0 <initDisplay+0xa0>)
 80018a4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80018a8:	7848      	ldrb	r0, [r1, #1]
 80018aa:	4906      	ldr	r1, [pc, #24]	; (80018c4 <initDisplay+0xa4>)
 80018ac:	6148      	str	r0, [r1, #20]
                WR_SET();
 80018ae:	6951      	ldr	r1, [r2, #20]
 80018b0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80018b4:	6151      	str	r1, [r2, #20]
                break;
 80018b6:	e7e0      	b.n	800187a <initDisplay+0x5a>
    start_display();
 80018b8:	f7ff ff9a 	bl	80017f0 <start_display>
}
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop
 80018c0:	08004bdc 	.word	0x08004bdc
 80018c4:	48000c00 	.word	0x48000c00

080018c8 <grafchar>:

void grafchar(char c) {
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	b083      	sub	sp, #12
 80018ce:	4604      	mov	r4, r0
    uint32_t pixelMask = 0;
    uint32_t charSize;
    uint32_t fontScale, scaleW;
    uint32_t i = 0;

    font = (Font*)getCurrentFont();
 80018d0:	f000 fd9a 	bl	8002408 <getCurrentFont>
 80018d4:	4681      	mov	r9, r0
    charImage = (FontCharacter*)font->chars[c - 0x20];
 80018d6:	f1a4 0320 	sub.w	r3, r4, #32
 80018da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80018de:	f8d3 b004 	ldr.w	fp, [r3, #4]
    charSize = charImage->charWidth * font->charHeight / font->elemSize;
 80018e2:	f89b 2000 	ldrb.w	r2, [fp]
 80018e6:	7803      	ldrb	r3, [r0, #0]
 80018e8:	fb03 f302 	mul.w	r3, r3, r2
 80018ec:	7842      	ldrb	r2, [r0, #1]
 80018ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80018f2:	9300      	str	r3, [sp, #0]
    fontScale = getFontScale();
 80018f4:	f000 fdaa 	bl	800244c <getFontScale>
 80018f8:	4605      	mov	r5, r0

    scaleW = fontScale;

    graflocat(currentPage, currentColumn);
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <grafchar+0x11c>)
 80018fc:	8819      	ldrh	r1, [r3, #0]
 80018fe:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <grafchar+0x120>)
 8001900:	8818      	ldrh	r0, [r3, #0]
 8001902:	f7ff feff 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	f7ff fec8 	bl	800169c <cmdWrite>
    scaleW = fontScale;
 800190c:	9501      	str	r5, [sp, #4]
    uint32_t i = 0;
 800190e:	f04f 0a00 	mov.w	sl, #0
    uint32_t pixelMask = 0;
 8001912:	46d0      	mov	r8, sl
    uint32_t charPixels = 0;
 8001914:	4656      	mov	r6, sl
    while (i < charSize) {
 8001916:	e039      	b.n	800198c <grafchar+0xc4>
        switch (font->elemSize) {
        case 8:
            charPixels = *((uint8_t*)charImage->charData + i);
 8001918:	f8db 3004 	ldr.w	r3, [fp, #4]
 800191c:	f813 600a 	ldrb.w	r6, [r3, sl]
            pixelMask = 0x80;
 8001920:	f04f 0880 	mov.w	r8, #128	; 0x80
            break;
 8001924:	e03d      	b.n	80019a2 <grafchar+0xda>
        case 16:
            charPixels = *((uint16_t*)charImage->charData + i);
 8001926:	f8db 3004 	ldr.w	r3, [fp, #4]
 800192a:	f833 601a 	ldrh.w	r6, [r3, sl, lsl #1]
            pixelMask = 0x8000;
 800192e:	f44f 4800 	mov.w	r8, #32768	; 0x8000
            break;
 8001932:	e036      	b.n	80019a2 <grafchar+0xda>
        case 32:
            charPixels = *((uint32_t*)charImage->charData + i);
 8001934:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001938:	f853 602a 	ldr.w	r6, [r3, sl, lsl #2]
            pixelMask = 0x80000000;
 800193c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
            break;
 8001940:	e02f      	b.n	80019a2 <grafchar+0xda>
        }

        for (int j = 0; j < font->elemSize; j++) {
            if ((charPixels & pixelMask) != 0) {
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
                    dataWrite(fgColor);
 8001942:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <grafchar+0x124>)
 8001944:	8818      	ldrh	r0, [r3, #0]
 8001946:	f7ff febd 	bl	80016c4 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 800194a:	3401      	adds	r4, #1
 800194c:	42ac      	cmp	r4, r5
 800194e:	d3f8      	bcc.n	8001942 <grafchar+0x7a>
            } else {
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
                    dataWrite(bgColor);
                }
            }
            charPixels <<= 1;
 8001950:	0076      	lsls	r6, r6, #1
        for (int j = 0; j < font->elemSize; j++) {
 8001952:	3701      	adds	r7, #1
 8001954:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001958:	42bb      	cmp	r3, r7
 800195a:	dd0c      	ble.n	8001976 <grafchar+0xae>
            if ((charPixels & pixelMask) != 0) {
 800195c:	ea16 0408 	ands.w	r4, r6, r8
 8001960:	d006      	beq.n	8001970 <grafchar+0xa8>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 8001962:	2400      	movs	r4, #0
 8001964:	e7f2      	b.n	800194c <grafchar+0x84>
                    dataWrite(bgColor);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <grafchar+0x128>)
 8001968:	8818      	ldrh	r0, [r3, #0]
 800196a:	f7ff feab 	bl	80016c4 <dataWrite>
                for (uint32_t scaleH = 0; scaleH < fontScale; scaleH++) {
 800196e:	3401      	adds	r4, #1
 8001970:	42ac      	cmp	r4, r5
 8001972:	d3f8      	bcc.n	8001966 <grafchar+0x9e>
 8001974:	e7ec      	b.n	8001950 <grafchar+0x88>
        }

        i++;
 8001976:	f10a 0a01 	add.w	sl, sl, #1
        if (i % (font->charHeight / font->elemSize) == 0) {
 800197a:	f899 2000 	ldrb.w	r2, [r9]
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	fbba f2f3 	udiv	r2, sl, r3
 8001986:	fb03 a312 	mls	r3, r3, r2, sl
 800198a:	b163      	cbz	r3, 80019a6 <grafchar+0xde>
    while (i < charSize) {
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	459a      	cmp	sl, r3
 8001990:	d224      	bcs.n	80019dc <grafchar+0x114>
        switch (font->elemSize) {
 8001992:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001996:	2b10      	cmp	r3, #16
 8001998:	d0c5      	beq.n	8001926 <grafchar+0x5e>
 800199a:	2b20      	cmp	r3, #32
 800199c:	d0ca      	beq.n	8001934 <grafchar+0x6c>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d0ba      	beq.n	8001918 <grafchar+0x50>
        for (int j = 0; j < font->elemSize; j++) {
 80019a2:	2700      	movs	r7, #0
 80019a4:	e7d6      	b.n	8001954 <grafchar+0x8c>
            graflocat(currentPage, currentColumn + 1);
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <grafchar+0x11c>)
 80019a8:	8819      	ldrh	r1, [r3, #0]
 80019aa:	3101      	adds	r1, #1
 80019ac:	b289      	uxth	r1, r1
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <grafchar+0x120>)
 80019b0:	8818      	ldrh	r0, [r3, #0]
 80019b2:	f7ff fea7 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 80019b6:	202c      	movs	r0, #44	; 0x2c
 80019b8:	f7ff fe70 	bl	800169c <cmdWrite>
            if (scaleW > 1) {
 80019bc:	9b01      	ldr	r3, [sp, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d90a      	bls.n	80019d8 <grafchar+0x110>
                scaleW--;
 80019c2:	3b01      	subs	r3, #1
 80019c4:	9301      	str	r3, [sp, #4]
                i = i - font->charHeight / font->elemSize;
 80019c6:	f899 3000 	ldrb.w	r3, [r9]
 80019ca:	f899 2001 	ldrb.w	r2, [r9, #1]
 80019ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80019d2:	ebaa 0a03 	sub.w	sl, sl, r3
 80019d6:	e7d9      	b.n	800198c <grafchar+0xc4>
            } else {
                scaleW = fontScale;
 80019d8:	9501      	str	r5, [sp, #4]
 80019da:	e7d7      	b.n	800198c <grafchar+0xc4>
            }
        }
    }
}
 80019dc:	b003      	add	sp, #12
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	20000242 	.word	0x20000242
 80019e8:	20000244 	.word	0x20000244
 80019ec:	20000246 	.word	0x20000246
 80019f0:	20000240 	.word	0x20000240

080019f4 <keyshow>:

void keyshow(uint8_t key) {
 80019f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    KeyCharacter *keyCharacter = getKeyCharacter(key);
 80019f8:	f000 fd2e 	bl	8002458 <getKeyCharacter>
 80019fc:	4606      	mov	r6, r0
    const FontCharacter *currentImage;
    uint8_t charPixels;
    uint8_t pixelMask;
    uint32_t i = 0;

    currentImage = keyCharacter->startCap;
 80019fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
    graflocat(currentPage, currentColumn);
 8001a02:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <keyshow+0x17c>)
 8001a04:	8819      	ldrh	r1, [r3, #0]
 8001a06:	4b5b      	ldr	r3, [pc, #364]	; (8001b74 <keyshow+0x180>)
 8001a08:	8818      	ldrh	r0, [r3, #0]
 8001a0a:	f7ff fe7b 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001a0e:	202c      	movs	r0, #44	; 0x2c
 8001a10:	f7ff fe44 	bl	800169c <cmdWrite>
    uint32_t i = 0;
 8001a14:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001a16:	e018      	b.n	8001a4a <keyshow+0x56>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->bgColor);
 8001a18:	8830      	ldrh	r0, [r6, #0]
 8001a1a:	f7ff fe53 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(bgColor);
            }
            charPixels <<= 1;
 8001a1e:	0064      	lsls	r4, r4, #1
 8001a20:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001a22:	3501      	adds	r5, #1
 8001a24:	2d07      	cmp	r5, #7
 8001a26:	dc07      	bgt.n	8001a38 <keyshow+0x44>
            if ((charPixels & pixelMask) != 0) {
 8001a28:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001a2c:	d1f4      	bne.n	8001a18 <keyshow+0x24>
                dataWrite(bgColor);
 8001a2e:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <keyshow+0x184>)
 8001a30:	8818      	ldrh	r0, [r3, #0]
 8001a32:	f7ff fe47 	bl	80016c4 <dataWrite>
 8001a36:	e7f2      	b.n	8001a1e <keyshow+0x2a>
        }
        i++;
 8001a38:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <keyshow+0x188>)
 8001a3c:	fba3 2307 	umull	r2, r3, r3, r7
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a46:	429f      	cmp	r7, r3
 8001a48:	d00a      	beq.n	8001a60 <keyshow+0x6c>
    while (i < currentImage->charWidth * 3) {
 8001a4a:	f898 3000 	ldrb.w	r3, [r8]
 8001a4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001a52:	42bb      	cmp	r3, r7
 8001a54:	d910      	bls.n	8001a78 <keyshow+0x84>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001a56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001a5a:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	e7e1      	b.n	8001a24 <keyshow+0x30>
            graflocat(currentPage, currentColumn + 1);
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <keyshow+0x17c>)
 8001a62:	8819      	ldrh	r1, [r3, #0]
 8001a64:	3101      	adds	r1, #1
 8001a66:	b289      	uxth	r1, r1
 8001a68:	4b42      	ldr	r3, [pc, #264]	; (8001b74 <keyshow+0x180>)
 8001a6a:	8818      	ldrh	r0, [r3, #0]
 8001a6c:	f7ff fe4a 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001a70:	202c      	movs	r0, #44	; 0x2c
 8001a72:	f7ff fe13 	bl	800169c <cmdWrite>
 8001a76:	e7e8      	b.n	8001a4a <keyshow+0x56>
        }
    }
    i = 0;
    currentImage = keyCharacter->keyCharacter;
 8001a78:	f8d6 8008 	ldr.w	r8, [r6, #8]
    graflocat(currentPage, currentColumn);
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <keyshow+0x17c>)
 8001a7e:	8819      	ldrh	r1, [r3, #0]
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <keyshow+0x180>)
 8001a82:	8818      	ldrh	r0, [r3, #0]
 8001a84:	f7ff fe3e 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001a88:	202c      	movs	r0, #44	; 0x2c
 8001a8a:	f7ff fe07 	bl	800169c <cmdWrite>
    i = 0;
 8001a8e:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001a90:	e017      	b.n	8001ac2 <keyshow+0xce>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->fgColor);
 8001a92:	8870      	ldrh	r0, [r6, #2]
 8001a94:	f7ff fe16 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(keyCharacter->bgColor);
            }
            charPixels <<= 1;
 8001a98:	0064      	lsls	r4, r4, #1
 8001a9a:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001a9c:	3501      	adds	r5, #1
 8001a9e:	2d07      	cmp	r5, #7
 8001aa0:	dc06      	bgt.n	8001ab0 <keyshow+0xbc>
            if ((charPixels & pixelMask) != 0) {
 8001aa2:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001aa6:	d1f4      	bne.n	8001a92 <keyshow+0x9e>
                dataWrite(keyCharacter->bgColor);
 8001aa8:	8830      	ldrh	r0, [r6, #0]
 8001aaa:	f7ff fe0b 	bl	80016c4 <dataWrite>
 8001aae:	e7f3      	b.n	8001a98 <keyshow+0xa4>
        }
        i++;
 8001ab0:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <keyshow+0x188>)
 8001ab4:	fba3 2307 	umull	r2, r3, r3, r7
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001abe:	429f      	cmp	r7, r3
 8001ac0:	d00a      	beq.n	8001ad8 <keyshow+0xe4>
    while (i < currentImage->charWidth * 3) {
 8001ac2:	f898 3000 	ldrb.w	r3, [r8]
 8001ac6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001aca:	42bb      	cmp	r3, r7
 8001acc:	d910      	bls.n	8001af0 <keyshow+0xfc>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001ace:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001ad2:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	e7e2      	b.n	8001a9e <keyshow+0xaa>
            graflocat(currentPage, currentColumn + 1);
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <keyshow+0x17c>)
 8001ada:	8819      	ldrh	r1, [r3, #0]
 8001adc:	3101      	adds	r1, #1
 8001ade:	b289      	uxth	r1, r1
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <keyshow+0x180>)
 8001ae2:	8818      	ldrh	r0, [r3, #0]
 8001ae4:	f7ff fe0e 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001ae8:	202c      	movs	r0, #44	; 0x2c
 8001aea:	f7ff fdd7 	bl	800169c <cmdWrite>
 8001aee:	e7e8      	b.n	8001ac2 <keyshow+0xce>
        }
    }
    i = 0;
    currentImage = keyCharacter->endCap;
 8001af0:	f8d6 800c 	ldr.w	r8, [r6, #12]
    graflocat(currentPage, currentColumn);
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <keyshow+0x17c>)
 8001af6:	8819      	ldrh	r1, [r3, #0]
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <keyshow+0x180>)
 8001afa:	8818      	ldrh	r0, [r3, #0]
 8001afc:	f7ff fe02 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8001b00:	202c      	movs	r0, #44	; 0x2c
 8001b02:	f7ff fdcb 	bl	800169c <cmdWrite>
    i = 0;
 8001b06:	2700      	movs	r7, #0
    while (i < currentImage->charWidth * 3) {
 8001b08:	e018      	b.n	8001b3c <keyshow+0x148>
        charPixels = *((uint8_t*)currentImage->charData + i);
        pixelMask = 0x80;
        for (int j = 0; j < 8; j++) {
            if ((charPixels & pixelMask) != 0) {
                dataWrite(keyCharacter->bgColor);
 8001b0a:	8830      	ldrh	r0, [r6, #0]
 8001b0c:	f7ff fdda 	bl	80016c4 <dataWrite>
            } else {
                dataWrite(bgColor);
            }
            charPixels <<= 1;
 8001b10:	0064      	lsls	r4, r4, #1
 8001b12:	b2e4      	uxtb	r4, r4
        for (int j = 0; j < 8; j++) {
 8001b14:	3501      	adds	r5, #1
 8001b16:	2d07      	cmp	r5, #7
 8001b18:	dc07      	bgt.n	8001b2a <keyshow+0x136>
            if ((charPixels & pixelMask) != 0) {
 8001b1a:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001b1e:	d1f4      	bne.n	8001b0a <keyshow+0x116>
                dataWrite(bgColor);
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <keyshow+0x184>)
 8001b22:	8818      	ldrh	r0, [r3, #0]
 8001b24:	f7ff fdce 	bl	80016c4 <dataWrite>
 8001b28:	e7f2      	b.n	8001b10 <keyshow+0x11c>
        }
        i++;
 8001b2a:	3701      	adds	r7, #1
        if (i % 3 == 0) {
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <keyshow+0x188>)
 8001b2e:	fba3 2307 	umull	r2, r3, r3, r7
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b38:	429f      	cmp	r7, r3
 8001b3a:	d00a      	beq.n	8001b52 <keyshow+0x15e>
    while (i < currentImage->charWidth * 3) {
 8001b3c:	f898 3000 	ldrb.w	r3, [r8]
 8001b40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b44:	42bb      	cmp	r3, r7
 8001b46:	d910      	bls.n	8001b6a <keyshow+0x176>
        charPixels = *((uint8_t*)currentImage->charData + i);
 8001b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b4c:	5ddc      	ldrb	r4, [r3, r7]
        for (int j = 0; j < 8; j++) {
 8001b4e:	2500      	movs	r5, #0
 8001b50:	e7e1      	b.n	8001b16 <keyshow+0x122>
            graflocat(currentPage, currentColumn + 1);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <keyshow+0x17c>)
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	3101      	adds	r1, #1
 8001b58:	b289      	uxth	r1, r1
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <keyshow+0x180>)
 8001b5c:	8818      	ldrh	r0, [r3, #0]
 8001b5e:	f7ff fdd1 	bl	8001704 <graflocat>
            cmdWrite(0x2C);
 8001b62:	202c      	movs	r0, #44	; 0x2c
 8001b64:	f7ff fd9a 	bl	800169c <cmdWrite>
 8001b68:	e7e8      	b.n	8001b3c <keyshow+0x148>
        }
    }
}
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000242 	.word	0x20000242
 8001b74:	20000244 	.word	0x20000244
 8001b78:	20000240 	.word	0x20000240
 8001b7c:	aaaaaaab 	.word	0xaaaaaaab

08001b80 <putstr>:

void putstr(const char *s) {
 8001b80:	b510      	push	{r4, lr}
 8001b82:	4604      	mov	r4, r0
    while (*s) {
 8001b84:	e002      	b.n	8001b8c <putstr+0xc>
        grafchar(*(s++));
 8001b86:	3401      	adds	r4, #1
 8001b88:	f7ff fe9e 	bl	80018c8 <grafchar>
    while (*s) {
 8001b8c:	f994 0000 	ldrsb.w	r0, [r4]
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d1f8      	bne.n	8001b86 <putstr+0x6>
    }
}
 8001b94:	bd10      	pop	{r4, pc}
	...

08001b98 <filldisplay>:

void filldisplay() {
 8001b98:	b508      	push	{r3, lr}
    setFontSize(8);
 8001b9a:	2008      	movs	r0, #8
 8001b9c:	f000 fc04 	bl	80023a8 <setFontSize>
    while (currentPage < 240) {
 8001ba0:	e001      	b.n	8001ba6 <filldisplay+0xe>
        enterxxx();
 8001ba2:	f7ff fe11 	bl	80017c8 <enterxxx>
    while (currentPage < 240) {
 8001ba6:	4b02      	ldr	r3, [pc, #8]	; (8001bb0 <filldisplay+0x18>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	2bef      	cmp	r3, #239	; 0xef
 8001bac:	d9f9      	bls.n	8001ba2 <filldisplay+0xa>
    }
}
 8001bae:	bd08      	pop	{r3, pc}
 8001bb0:	20000244 	.word	0x20000244

08001bb4 <enteremtystr>:

void enteremtystr() {
 8001bb4:	b508      	push	{r3, lr}
    enterxxx();
 8001bb6:	f7ff fe07 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8001bba:	2008      	movs	r0, #8
 8001bbc:	f000 fbf4 	bl	80023a8 <setFontSize>
    enterxxx();
 8001bc0:	f7ff fe02 	bl	80017c8 <enterxxx>
}
 8001bc4:	bd08      	pop	{r3, pc}

08001bc6 <display00>:

void display00() {
 8001bc6:	b508      	push	{r3, lr}
    start_display();
 8001bc8:	f7ff fe12 	bl	80017f0 <start_display>
    filldisplay();
 8001bcc:	f7ff ffe4 	bl	8001b98 <filldisplay>
}
 8001bd0:	bd08      	pop	{r3, pc}
	...

08001bd4 <display01>:

void display01() {
 8001bd4:	b508      	push	{r3, lr}
    uint16_t column1, column2;

    start_display();
 8001bd6:	f7ff fe0b 	bl	80017f0 <start_display>
    setFontSize(8);
 8001bda:	2008      	movs	r0, #8
 8001bdc:	f000 fbe4 	bl	80023a8 <setFontSize>
    setFgColor(color_white);
 8001be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001be4:	f7ff fd82 	bl	80016ec <setFgColor>
    enterxxx();
 8001be8:	f7ff fdee 	bl	80017c8 <enterxxx>
    setFontSize(32);
 8001bec:	2020      	movs	r0, #32
 8001bee:	f000 fbdb 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001bf2:	2010      	movs	r0, #16
 8001bf4:	f7ff fdb8 	bl	8001768 <fillhx>
    grafchar(0x5D);
 8001bf8:	205d      	movs	r0, #93	; 0x5d
 8001bfa:	f7ff fe65 	bl	80018c8 <grafchar>
    grafchar(0x5E);
 8001bfe:	205e      	movs	r0, #94	; 0x5e
 8001c00:	f7ff fe62 	bl	80018c8 <grafchar>
    grafchar(' ');
 8001c04:	2020      	movs	r0, #32
 8001c06:	f7ff fe5f 	bl	80018c8 <grafchar>
    column1 = currentColumn;
    putstr("BodyGuard");
 8001c0a:	4842      	ldr	r0, [pc, #264]	; (8001d14 <display01+0x140>)
 8001c0c:	f7ff ffb8 	bl	8001b80 <putstr>
    column2 = currentColumn;
    setFontSize(8);
 8001c10:	2008      	movs	r0, #8
 8001c12:	f000 fbc9 	bl	80023a8 <setFontSize>
    putstr("TM");
 8001c16:	4840      	ldr	r0, [pc, #256]	; (8001d18 <display01+0x144>)
 8001c18:	f7ff ffb2 	bl	8001b80 <putstr>
    setFontSize(32);
 8001c1c:	2020      	movs	r0, #32
 8001c1e:	f000 fbc3 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c22:	f7ff fdd1 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8001c26:	2008      	movs	r0, #8
 8001c28:	f000 fbbe 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c2c:	f7ff fdcc 	bl	80017c8 <enterxxx>
    setFontSize(32);
 8001c30:	2020      	movs	r0, #32
 8001c32:	f000 fbb9 	bl	80023a8 <setFontSize>
    putstr(" ARM Cortex-M4 inside");
 8001c36:	4839      	ldr	r0, [pc, #228]	; (8001d1c <display01+0x148>)
 8001c38:	f7ff ffa2 	bl	8001b80 <putstr>
    enterxxx();
 8001c3c:	f7ff fdc4 	bl	80017c8 <enterxxx>
    enterxxx();
 8001c40:	f7ff fdc2 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c44:	2010      	movs	r0, #16
 8001c46:	f000 fbaf 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c4a:	2010      	movs	r0, #16
 8001c4c:	f7ff fd8c 	bl	8001768 <fillhx>
    putstr("Software Version: ");
 8001c50:	4833      	ldr	r0, [pc, #204]	; (8001d20 <display01+0x14c>)
 8001c52:	f7ff ff95 	bl	8001b80 <putstr>
    enterxxx();
 8001c56:	f7ff fdb7 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001c5a:	200c      	movs	r0, #12
 8001c5c:	f000 fba4 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c60:	f7ff fdb2 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f000 fb9f 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c6a:	2010      	movs	r0, #16
 8001c6c:	f7ff fd7c 	bl	8001768 <fillhx>
    setFgColor(0xf483);
 8001c70:	f24f 4083 	movw	r0, #62595	; 0xf483
 8001c74:	f7ff fd3a 	bl	80016ec <setFgColor>
    putstr("NextGen Demo version");
 8001c78:	482a      	ldr	r0, [pc, #168]	; (8001d24 <display01+0x150>)
 8001c7a:	f7ff ff81 	bl	8001b80 <putstr>
    enterxxx();
 8001c7e:	f7ff fda3 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001c82:	200c      	movs	r0, #12
 8001c84:	f000 fb90 	bl	80023a8 <setFontSize>
    enterxxx();
 8001c88:	f7ff fd9e 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001c8c:	2010      	movs	r0, #16
 8001c8e:	f000 fb8b 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001c92:	2010      	movs	r0, #16
 8001c94:	f7ff fd68 	bl	8001768 <fillhx>
    setFgColor(color_white);
 8001c98:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c9c:	f7ff fd26 	bl	80016ec <setFgColor>
    putstr("Library");
 8001ca0:	4821      	ldr	r0, [pc, #132]	; (8001d28 <display01+0x154>)
 8001ca2:	f7ff ff6d 	bl	8001b80 <putstr>
    fillhx(150);
 8001ca6:	2096      	movs	r0, #150	; 0x96
 8001ca8:	f7ff fd5e 	bl	8001768 <fillhx>
    putstr("-----------");
 8001cac:	481f      	ldr	r0, [pc, #124]	; (8001d2c <display01+0x158>)
 8001cae:	f7ff ff67 	bl	8001b80 <putstr>
    enterxxx();
 8001cb2:	f7ff fd89 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001cb6:	200c      	movs	r0, #12
 8001cb8:	f000 fb76 	bl	80023a8 <setFontSize>
    enterxxx();
 8001cbc:	f7ff fd84 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f000 fb71 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001cc6:	2010      	movs	r0, #16
 8001cc8:	f7ff fd4e 	bl	8001768 <fillhx>
    putstr("Serial Number: ");
 8001ccc:	4818      	ldr	r0, [pc, #96]	; (8001d30 <display01+0x15c>)
 8001cce:	f7ff ff57 	bl	8001b80 <putstr>
    fillhx(150);
 8001cd2:	2096      	movs	r0, #150	; 0x96
 8001cd4:	f7ff fd48 	bl	8001768 <fillhx>
    putstr("T     1    ");
 8001cd8:	4816      	ldr	r0, [pc, #88]	; (8001d34 <display01+0x160>)
 8001cda:	f7ff ff51 	bl	8001b80 <putstr>
    enterxxx();
 8001cde:	f7ff fd73 	bl	80017c8 <enterxxx>
    setFontSize(12);
 8001ce2:	200c      	movs	r0, #12
 8001ce4:	f000 fb60 	bl	80023a8 <setFontSize>
    enterxxx();
 8001ce8:	f7ff fd6e 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001cec:	2010      	movs	r0, #16
 8001cee:	f000 fb5b 	bl	80023a8 <setFontSize>
    fillhx(16);
 8001cf2:	2010      	movs	r0, #16
 8001cf4:	f7ff fd38 	bl	8001768 <fillhx>
    putstr("Production Date: ");
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <display01+0x164>)
 8001cfa:	f7ff ff41 	bl	8001b80 <putstr>
    fillhx(150);
 8001cfe:	2096      	movs	r0, #150	; 0x96
 8001d00:	f7ff fd32 	bl	8001768 <fillhx>
    putstr("12-Nov-2019");
 8001d04:	480d      	ldr	r0, [pc, #52]	; (8001d3c <display01+0x168>)
 8001d06:	f7ff ff3b 	bl	8001b80 <putstr>
    enterxxx();
 8001d0a:	f7ff fd5d 	bl	80017c8 <enterxxx>
    enterxxx();
 8001d0e:	f7ff fd5b 	bl	80017c8 <enterxxx>
}
 8001d12:	bd08      	pop	{r3, pc}
 8001d14:	08004c78 	.word	0x08004c78
 8001d18:	08004c84 	.word	0x08004c84
 8001d1c:	08004c88 	.word	0x08004c88
 8001d20:	08004ca0 	.word	0x08004ca0
 8001d24:	08004cb4 	.word	0x08004cb4
 8001d28:	08004ccc 	.word	0x08004ccc
 8001d2c:	08004cd4 	.word	0x08004cd4
 8001d30:	08004ce0 	.word	0x08004ce0
 8001d34:	08004cf0 	.word	0x08004cf0
 8001d38:	08004cfc 	.word	0x08004cfc
 8001d3c:	08004d10 	.word	0x08004d10

08001d40 <display65>:

void display65(uint8_t level) {
 8001d40:	b510      	push	{r4, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	4604      	mov	r4, r0
    char *buf[8];

    start_display();
 8001d46:	f7ff fd53 	bl	80017f0 <start_display>
    setFontSize(32);
 8001d4a:	2020      	movs	r0, #32
 8001d4c:	f000 fb2c 	bl	80023a8 <setFontSize>
    putstr("Sound alarm test");
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <display65+0x48>)
 8001d52:	f7ff ff15 	bl	8001b80 <putstr>
    enterxxx();
 8001d56:	f7ff fd37 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001d5a:	2018      	movs	r0, #24
 8001d5c:	f000 fb24 	bl	80023a8 <setFontSize>
    enterxxx();
 8001d60:	f7ff fd32 	bl	80017c8 <enterxxx>
    putstr("Current sound level: ");
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <display65+0x4c>)
 8001d66:	f7ff ff0b 	bl	8001b80 <putstr>
    itoa(level, buf, 10);
 8001d6a:	220a      	movs	r2, #10
 8001d6c:	4669      	mov	r1, sp
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f001 fc20 	bl	80035b4 <itoa>
    putstr(buf);
 8001d74:	4668      	mov	r0, sp
 8001d76:	f7ff ff03 	bl	8001b80 <putstr>
    enterxxx();
 8001d7a:	f7ff fd25 	bl	80017c8 <enterxxx>
    filldisplay();
 8001d7e:	f7ff ff0b 	bl	8001b98 <filldisplay>
}
 8001d82:	b008      	add	sp, #32
 8001d84:	bd10      	pop	{r4, pc}
 8001d86:	bf00      	nop
 8001d88:	08004d84 	.word	0x08004d84
 8001d8c:	08004d98 	.word	0x08004d98

08001d90 <display66>:

void display66() {
 8001d90:	b508      	push	{r3, lr}
	start_display();
 8001d92:	f7ff fd2d 	bl	80017f0 <start_display>
	setFontSize(32);
 8001d96:	2020      	movs	r0, #32
 8001d98:	f000 fb06 	bl	80023a8 <setFontSize>
	putstr("Door Sensor Test ");
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <display66+0x74>)
 8001d9e:	f7ff feef 	bl	8001b80 <putstr>
    enterxxx();
 8001da2:	f7ff fd11 	bl	80017c8 <enterxxx>
    enterxxx();
 8001da6:	f7ff fd0f 	bl	80017c8 <enterxxx>

	setFontSize(72);
 8001daa:	2048      	movs	r0, #72	; 0x48
 8001dac:	f000 fafc 	bl	80023a8 <setFontSize>
    setFgColor(color_warnfont);
 8001db0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001db4:	f7ff fc9a 	bl	80016ec <setFgColor>
    if ((GPIOC->IDR & 0x01UL) != 0) {
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <display66+0x78>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f013 0f01 	tst.w	r3, #1
 8001dc0:	d11b      	bne.n	8001dfa <display66+0x6a>
        putstr("Open");
    } else {
        putstr("Close");
 8001dc2:	4812      	ldr	r0, [pc, #72]	; (8001e0c <display66+0x7c>)
 8001dc4:	f7ff fedc 	bl	8001b80 <putstr>
    }
    enterxxx();
 8001dc8:	f7ff fcfe 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001dcc:	2018      	movs	r0, #24
 8001dce:	f000 faeb 	bl	80023a8 <setFontSize>
    enterxxx();
 8001dd2:	f7ff fcf9 	bl	80017c8 <enterxxx>
    enterxxx();
 8001dd6:	f7ff fcf7 	bl	80017c8 <enterxxx>
    enterxxx();
 8001dda:	f7ff fcf5 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <display66+0x80>)
 8001de0:	f7ff fece 	bl	8001b80 <putstr>
    keyshow(Button_Ok);
 8001de4:	200e      	movs	r0, #14
 8001de6:	f7ff fe05 	bl	80019f4 <keyshow>
    putstr(" Key to Continue");
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <display66+0x84>)
 8001dec:	f7ff fec8 	bl	8001b80 <putstr>
    enterxxx();
 8001df0:	f7ff fcea 	bl	80017c8 <enterxxx>
    filldisplay();
 8001df4:	f7ff fed0 	bl	8001b98 <filldisplay>
}
 8001df8:	bd08      	pop	{r3, pc}
        putstr("Open");
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <display66+0x88>)
 8001dfc:	f7ff fec0 	bl	8001b80 <putstr>
 8001e00:	e7e2      	b.n	8001dc8 <display66+0x38>
 8001e02:	bf00      	nop
 8001e04:	08004db0 	.word	0x08004db0
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	08004dcc 	.word	0x08004dcc
 8001e10:	08004dd4 	.word	0x08004dd4
 8001e14:	08004ddc 	.word	0x08004ddc
 8001e18:	08004dc4 	.word	0x08004dc4

08001e1c <display68>:

void display68() {
 8001e1c:	b510      	push	{r4, lr}
    start_display();
 8001e1e:	f7ff fce7 	bl	80017f0 <start_display>
    setFontSize(32);
 8001e22:	2020      	movs	r0, #32
 8001e24:	f000 fac0 	bl	80023a8 <setFontSize>
    putstr("Motor rotation test");
 8001e28:	481b      	ldr	r0, [pc, #108]	; (8001e98 <display68+0x7c>)
 8001e2a:	f7ff fea9 	bl	8001b80 <putstr>
    enterxxx();
 8001e2e:	f7ff fccb 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001e32:	2018      	movs	r0, #24
 8001e34:	f000 fab8 	bl	80023a8 <setFontSize>
    enterxxx();
 8001e38:	f7ff fcc6 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e3c:	f7ff fcc4 	bl	80017c8 <enterxxx>
    putstr("Please check motor rotation");
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <display68+0x80>)
 8001e42:	f7ff fe9d 	bl	8001b80 <putstr>
    enterxxx();
 8001e46:	f7ff fcbf 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001e4a:	4c15      	ldr	r4, [pc, #84]	; (8001ea0 <display68+0x84>)
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fe97 	bl	8001b80 <putstr>
    keyshow(Button_5);
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff fdce 	bl	80019f4 <keyshow>
    putstr(" to increase and ");
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <display68+0x88>)
 8001e5a:	f7ff fe91 	bl	8001b80 <putstr>
    keyshow(Button_0);
 8001e5e:	2004      	movs	r0, #4
 8001e60:	f7ff fdc8 	bl	80019f4 <keyshow>
    enterxxx();
 8001e64:	f7ff fcb0 	bl	80017c8 <enterxxx>
    putstr("to decrease the motor speed");
 8001e68:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <display68+0x8c>)
 8001e6a:	f7ff fe89 	bl	8001b80 <putstr>
    enterxxx();
 8001e6e:	f7ff fcab 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e72:	f7ff fca9 	bl	80017c8 <enterxxx>
    enterxxx();
 8001e76:	f7ff fca7 	bl	80017c8 <enterxxx>
    putstr("Press ");
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fe80 	bl	8001b80 <putstr>
    keyshow(Button_No);
 8001e80:	200f      	movs	r0, #15
 8001e82:	f7ff fdb7 	bl	80019f4 <keyshow>
    putstr(" to exit");
 8001e86:	4809      	ldr	r0, [pc, #36]	; (8001eac <display68+0x90>)
 8001e88:	f7ff fe7a 	bl	8001b80 <putstr>
    enterxxx();
 8001e8c:	f7ff fc9c 	bl	80017c8 <enterxxx>
    filldisplay();
 8001e90:	f7ff fe82 	bl	8001b98 <filldisplay>
}
 8001e94:	bd10      	pop	{r4, pc}
 8001e96:	bf00      	nop
 8001e98:	08004df0 	.word	0x08004df0
 8001e9c:	08004e04 	.word	0x08004e04
 8001ea0:	08004dd4 	.word	0x08004dd4
 8001ea4:	08004e20 	.word	0x08004e20
 8001ea8:	08004e34 	.word	0x08004e34
 8001eac:	08004e50 	.word	0x08004e50

08001eb0 <display64>:

void display64(uint8_t currentKey) {
 8001eb0:	b510      	push	{r4, lr}
 8001eb2:	4604      	mov	r4, r0
    start_display();
 8001eb4:	f7ff fc9c 	bl	80017f0 <start_display>
    setFontSize(32);
 8001eb8:	2020      	movs	r0, #32
 8001eba:	f000 fa75 	bl	80023a8 <setFontSize>
    putstr("Keypad Test ");
 8001ebe:	4850      	ldr	r0, [pc, #320]	; (8002000 <display64+0x150>)
 8001ec0:	f7ff fe5e 	bl	8001b80 <putstr>
    enteremtystr();
 8001ec4:	f7ff fe76 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001ec8:	2018      	movs	r0, #24
 8001eca:	f000 fa6d 	bl	80023a8 <setFontSize>
    keyshow(Button_Power);
 8001ece:	2010      	movs	r0, #16
 8001ed0:	f7ff fd90 	bl	80019f4 <keyshow>
    fillhx(250);
 8001ed4:	20fa      	movs	r0, #250	; 0xfa
 8001ed6:	f7ff fc47 	bl	8001768 <fillhx>
    keyshow(Button_No);
 8001eda:	200f      	movs	r0, #15
 8001edc:	f7ff fd8a 	bl	80019f4 <keyshow>
    enteremtystr();
 8001ee0:	f7ff fe68 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001ee4:	2018      	movs	r0, #24
 8001ee6:	f000 fa5f 	bl	80023a8 <setFontSize>
    keyshow(Button_Lock);
 8001eea:	2007      	movs	r0, #7
 8001eec:	f7ff fd82 	bl	80019f4 <keyshow>
    fillhx(250);
 8001ef0:	20fa      	movs	r0, #250	; 0xfa
 8001ef2:	f7ff fc39 	bl	8001768 <fillhx>
    keyshow(Button_Ok);
 8001ef6:	200e      	movs	r0, #14
 8001ef8:	f7ff fd7c 	bl	80019f4 <keyshow>
    enteremtystr();
 8001efc:	f7ff fe5a 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001f00:	2018      	movs	r0, #24
 8001f02:	f000 fa51 	bl	80023a8 <setFontSize>
    keyshow(Button_Info);
 8001f06:	2005      	movs	r0, #5
 8001f08:	f7ff fd74 	bl	80019f4 <keyshow>
    fillhx(250);
 8001f0c:	20fa      	movs	r0, #250	; 0xfa
 8001f0e:	f7ff fc2b 	bl	8001768 <fillhx>
    keyshow(Button_Prime);
 8001f12:	2006      	movs	r0, #6
 8001f14:	f7ff fd6e 	bl	80019f4 <keyshow>
    enterxxx();
 8001f18:	f7ff fc56 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001f1c:	2010      	movs	r0, #16
 8001f1e:	f000 fa43 	bl	80023a8 <setFontSize>
    enterxxx();
 8001f22:	f7ff fc51 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001f26:	2018      	movs	r0, #24
 8001f28:	f000 fa3e 	bl	80023a8 <setFontSize>
    keyshow(Button_1);
 8001f2c:	2008      	movs	r0, #8
 8001f2e:	f7ff fd61 	bl	80019f4 <keyshow>
    fillhx(50);
 8001f32:	2032      	movs	r0, #50	; 0x32
 8001f34:	f7ff fc18 	bl	8001768 <fillhx>
    keyshow(Button_2);
 8001f38:	2009      	movs	r0, #9
 8001f3a:	f7ff fd5b 	bl	80019f4 <keyshow>
    fillhx(100);
 8001f3e:	2064      	movs	r0, #100	; 0x64
 8001f40:	f7ff fc12 	bl	8001768 <fillhx>
    keyshow(Button_3);
 8001f44:	200a      	movs	r0, #10
 8001f46:	f7ff fd55 	bl	80019f4 <keyshow>
    fillhx(150);
 8001f4a:	2096      	movs	r0, #150	; 0x96
 8001f4c:	f7ff fc0c 	bl	8001768 <fillhx>
    keyshow(Button_4);
 8001f50:	200b      	movs	r0, #11
 8001f52:	f7ff fd4f 	bl	80019f4 <keyshow>
    fillhx(200);
 8001f56:	20c8      	movs	r0, #200	; 0xc8
 8001f58:	f7ff fc06 	bl	8001768 <fillhx>
    keyshow(Button_5);
 8001f5c:	200c      	movs	r0, #12
 8001f5e:	f7ff fd49 	bl	80019f4 <keyshow>
    fillhx(250);
 8001f62:	20fa      	movs	r0, #250	; 0xfa
 8001f64:	f7ff fc00 	bl	8001768 <fillhx>
    keyshow(Button_Point);
 8001f68:	200d      	movs	r0, #13
 8001f6a:	f7ff fd43 	bl	80019f4 <keyshow>
    enteremtystr();
 8001f6e:	f7ff fe21 	bl	8001bb4 <enteremtystr>
    setFontSize(24);
 8001f72:	2018      	movs	r0, #24
 8001f74:	f000 fa18 	bl	80023a8 <setFontSize>
    keyshow(Button_6);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7ff fd3b 	bl	80019f4 <keyshow>
    fillhx(50);
 8001f7e:	2032      	movs	r0, #50	; 0x32
 8001f80:	f7ff fbf2 	bl	8001768 <fillhx>
    keyshow(Button_7);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff fd35 	bl	80019f4 <keyshow>
    fillhx(100);
 8001f8a:	2064      	movs	r0, #100	; 0x64
 8001f8c:	f7ff fbec 	bl	8001768 <fillhx>
    keyshow(Button_8);
 8001f90:	2002      	movs	r0, #2
 8001f92:	f7ff fd2f 	bl	80019f4 <keyshow>
    fillhx(150);
 8001f96:	2096      	movs	r0, #150	; 0x96
 8001f98:	f7ff fbe6 	bl	8001768 <fillhx>
    keyshow(Button_9);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f7ff fd29 	bl	80019f4 <keyshow>
    fillhx(200);
 8001fa2:	20c8      	movs	r0, #200	; 0xc8
 8001fa4:	f7ff fbe0 	bl	8001768 <fillhx>
    keyshow(Button_0);
 8001fa8:	2004      	movs	r0, #4
 8001faa:	f7ff fd23 	bl	80019f4 <keyshow>
    enterxxx();
 8001fae:	f7ff fc0b 	bl	80017c8 <enterxxx>
    setFontSize(16);
 8001fb2:	2010      	movs	r0, #16
 8001fb4:	f000 f9f8 	bl	80023a8 <setFontSize>
    enterxxx();
 8001fb8:	f7ff fc06 	bl	80017c8 <enterxxx>
    setFontSize(24);
 8001fbc:	2018      	movs	r0, #24
 8001fbe:	f000 f9f3 	bl	80023a8 <setFontSize>
    setFgColor(color_white);
 8001fc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fc6:	f7ff fb91 	bl	80016ec <setFgColor>
    if (currentKey != Button_Last) {
 8001fca:	2c11      	cmp	r4, #17
 8001fcc:	d00d      	beq.n	8001fea <display64+0x13a>
        putstr("Press ");
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <display64+0x154>)
 8001fd0:	f7ff fdd6 	bl	8001b80 <putstr>
        keyshow(currentKey);
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fd0d 	bl	80019f4 <keyshow>
        putstr(" Key");
 8001fda:	480b      	ldr	r0, [pc, #44]	; (8002008 <display64+0x158>)
 8001fdc:	f7ff fdd0 	bl	8001b80 <putstr>
    } else {
        putstr("Test OK! Press ");
        keyshow(Button_Ok);
        putstr(" to continue.");
    }
    enterxxx();
 8001fe0:	f7ff fbf2 	bl	80017c8 <enterxxx>
    filldisplay();
 8001fe4:	f7ff fdd8 	bl	8001b98 <filldisplay>
};
 8001fe8:	bd10      	pop	{r4, pc}
        putstr("Test OK! Press ");
 8001fea:	4808      	ldr	r0, [pc, #32]	; (800200c <display64+0x15c>)
 8001fec:	f7ff fdc8 	bl	8001b80 <putstr>
        keyshow(Button_Ok);
 8001ff0:	200e      	movs	r0, #14
 8001ff2:	f7ff fcff 	bl	80019f4 <keyshow>
        putstr(" to continue.");
 8001ff6:	4806      	ldr	r0, [pc, #24]	; (8002010 <display64+0x160>)
 8001ff8:	f7ff fdc2 	bl	8001b80 <putstr>
 8001ffc:	e7f0      	b.n	8001fe0 <display64+0x130>
 8001ffe:	bf00      	nop
 8002000:	08004d4c 	.word	0x08004d4c
 8002004:	08004dd4 	.word	0x08004dd4
 8002008:	08004d5c 	.word	0x08004d5c
 800200c:	08004d64 	.word	0x08004d64
 8002010:	08004d74 	.word	0x08004d74

08002014 <display48>:

void display48(char *items[], int32_t count, int32_t selected) {
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002018:	4680      	mov	r8, r0
 800201a:	460d      	mov	r5, r1
 800201c:	4616      	mov	r6, r2
    int32_t startItem, endItem;

    start_display();
 800201e:	f7ff fbe7 	bl	80017f0 <start_display>
    setFontSize(32);
 8002022:	2020      	movs	r0, #32
 8002024:	f000 f9c0 	bl	80023a8 <setFontSize>
    putstr("Technician options: ");
 8002028:	483a      	ldr	r0, [pc, #232]	; (8002114 <display48+0x100>)
 800202a:	f7ff fda9 	bl	8001b80 <putstr>
    enteremtystr();
 800202e:	f7ff fdc1 	bl	8001bb4 <enteremtystr>
    if (selected < 4) {
 8002032:	2e03      	cmp	r6, #3
 8002034:	dc05      	bgt.n	8002042 <display48+0x2e>
        startItem = 0;
        if (count > 7) {
 8002036:	2d07      	cmp	r5, #7
 8002038:	dd0d      	ble.n	8002056 <display48+0x42>
            endItem = 7;
 800203a:	2507      	movs	r5, #7
        startItem = 0;
 800203c:	2700      	movs	r7, #0
    } else {
        startItem = selected - 3;
        endItem = selected + 4;
    }

    for (int i = startItem; i < endItem; i++) {
 800203e:	463c      	mov	r4, r7
 8002040:	e022      	b.n	8002088 <display48+0x74>
    } else if (selected > count - 4) {
 8002042:	1f2b      	subs	r3, r5, #4
 8002044:	42b3      	cmp	r3, r6
 8002046:	da03      	bge.n	8002050 <display48+0x3c>
        if (count >= 7) {
 8002048:	2d06      	cmp	r5, #6
 800204a:	dd06      	ble.n	800205a <display48+0x46>
            startItem = count - 7;
 800204c:	1fef      	subs	r7, r5, #7
 800204e:	e7f6      	b.n	800203e <display48+0x2a>
        startItem = selected - 3;
 8002050:	1ef7      	subs	r7, r6, #3
        endItem = selected + 4;
 8002052:	1d35      	adds	r5, r6, #4
 8002054:	e7f3      	b.n	800203e <display48+0x2a>
        startItem = 0;
 8002056:	2700      	movs	r7, #0
 8002058:	e7f1      	b.n	800203e <display48+0x2a>
            startItem = 0;
 800205a:	2700      	movs	r7, #0
 800205c:	e7ef      	b.n	800203e <display48+0x2a>
            setFontSize(24);
            putstr(items[i]);
            setFgColor(color_white);
            enterxxx();
        } else {
            setFgColor(color_white);
 800205e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002062:	f7ff fb43 	bl	80016ec <setFgColor>
            setBgColor(color_green);
 8002066:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800206a:	f7ff fb45 	bl	80016f8 <setBgColor>
            setFontSize(32);
 800206e:	2020      	movs	r0, #32
 8002070:	f000 f99a 	bl	80023a8 <setFontSize>
            putstr(items[i]);
 8002074:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8002078:	f7ff fd82 	bl	8001b80 <putstr>
            setBgColor(color_defback);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fb3b 	bl	80016f8 <setBgColor>
            enterxxx();
 8002082:	f7ff fba1 	bl	80017c8 <enterxxx>
    for (int i = startItem; i < endItem; i++) {
 8002086:	3401      	adds	r4, #1
 8002088:	42a5      	cmp	r5, r4
 800208a:	dd16      	ble.n	80020ba <display48+0xa6>
        if (i != selected) {
 800208c:	42b4      	cmp	r4, r6
 800208e:	d0e6      	beq.n	800205e <display48+0x4a>
            setFgColor(color_selnotsel);
 8002090:	f647 30ef 	movw	r0, #31727	; 0x7bef
 8002094:	f7ff fb2a 	bl	80016ec <setFgColor>
            setBgColor(color_defback);
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff fb2d 	bl	80016f8 <setBgColor>
            setFontSize(24);
 800209e:	2018      	movs	r0, #24
 80020a0:	f000 f982 	bl	80023a8 <setFontSize>
            putstr(items[i]);
 80020a4:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 80020a8:	f7ff fd6a 	bl	8001b80 <putstr>
            setFgColor(color_white);
 80020ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020b0:	f7ff fb1c 	bl	80016ec <setFgColor>
            enterxxx();
 80020b4:	f7ff fb88 	bl	80017c8 <enterxxx>
 80020b8:	e7e5      	b.n	8002086 <display48+0x72>
        }
    }

    setFontSize(24);
 80020ba:	2018      	movs	r0, #24
 80020bc:	f000 f974 	bl	80023a8 <setFontSize>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 80020c0:	2400      	movs	r4, #0
 80020c2:	e002      	b.n	80020ca <display48+0xb6>
        enterxxx();
 80020c4:	f7ff fb80 	bl	80017c8 <enterxxx>
    for (int i = 0; i < 7 - (endItem - startItem); i++) {
 80020c8:	3401      	adds	r4, #1
 80020ca:	1beb      	subs	r3, r5, r7
 80020cc:	f1c3 0307 	rsb	r3, r3, #7
 80020d0:	42a3      	cmp	r3, r4
 80020d2:	dcf7      	bgt.n	80020c4 <display48+0xb0>
    }

    setFgColor(color_white);
 80020d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020d8:	f7ff fb08 	bl	80016ec <setFgColor>
    setFontSize(24);
 80020dc:	2018      	movs	r0, #24
 80020de:	f000 f963 	bl	80023a8 <setFontSize>
    putstr("Select ");
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <display48+0x104>)
 80020e4:	f7ff fd4c 	bl	8001b80 <putstr>
    keyshow(Button_5);
 80020e8:	200c      	movs	r0, #12
 80020ea:	f7ff fc83 	bl	80019f4 <keyshow>
    putstr(", ");
 80020ee:	480b      	ldr	r0, [pc, #44]	; (800211c <display48+0x108>)
 80020f0:	f7ff fd46 	bl	8001b80 <putstr>
    keyshow(Button_0);
 80020f4:	2004      	movs	r0, #4
 80020f6:	f7ff fc7d 	bl	80019f4 <keyshow>
    putstr(" and press ");
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <display48+0x10c>)
 80020fc:	f7ff fd40 	bl	8001b80 <putstr>
    keyshow(Button_Ok);
 8002100:	200e      	movs	r0, #14
 8002102:	f7ff fc77 	bl	80019f4 <keyshow>
    enterxxx();
 8002106:	f7ff fb5f 	bl	80017c8 <enterxxx>
    filldisplay();
 800210a:	f7ff fd45 	bl	8001b98 <filldisplay>
}
 800210e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002112:	bf00      	nop
 8002114:	08004d1c 	.word	0x08004d1c
 8002118:	08004d34 	.word	0x08004d34
 800211c:	08004d3c 	.word	0x08004d3c
 8002120:	08004d40 	.word	0x08004d40

08002124 <colorfill>:

void colorfill(uint16_t color) {
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4605      	mov	r5, r0
    int x, y;

    start_display();
 8002128:	f7ff fb62 	bl	80017f0 <start_display>
    setFontSize(8);
 800212c:	2008      	movs	r0, #8
 800212e:	f000 f93b 	bl	80023a8 <setFontSize>
    graflocat(240 - 8, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	20e8      	movs	r0, #232	; 0xe8
 8002136:	f7ff fae5 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 800213a:	202c      	movs	r0, #44	; 0x2c
 800213c:	f7ff faae 	bl	800169c <cmdWrite>
    for (x = 0; x < 320; x++) {
 8002140:	2600      	movs	r6, #0
 8002142:	e006      	b.n	8002152 <colorfill+0x2e>
        for (y = 0; y < 240; y++) {
            dataWrite(color);
 8002144:	4628      	mov	r0, r5
 8002146:	f7ff fabd 	bl	80016c4 <dataWrite>
        for (y = 0; y < 240; y++) {
 800214a:	3401      	adds	r4, #1
 800214c:	2cef      	cmp	r4, #239	; 0xef
 800214e:	ddf9      	ble.n	8002144 <colorfill+0x20>
    for (x = 0; x < 320; x++) {
 8002150:	3601      	adds	r6, #1
 8002152:	f5b6 7fa0 	cmp.w	r6, #320	; 0x140
 8002156:	da01      	bge.n	800215c <colorfill+0x38>
        for (y = 0; y < 240; y++) {
 8002158:	2400      	movs	r4, #0
 800215a:	e7f7      	b.n	800214c <colorfill+0x28>
        }
    }
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}

0800215e <pixel>:

void pixel(int x, int y, uint16_t color) {
 800215e:	b570      	push	{r4, r5, r6, lr}
 8002160:	4606      	mov	r6, r0
 8002162:	460d      	mov	r5, r1
 8002164:	4614      	mov	r4, r2
    setFontSize(0);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f91e 	bl	80023a8 <setFontSize>
    graflocat(y, x);
 800216c:	b2b1      	uxth	r1, r6
 800216e:	b2a8      	uxth	r0, r5
 8002170:	f7ff fac8 	bl	8001704 <graflocat>
    cmdWrite(0x2C);
 8002174:	202c      	movs	r0, #44	; 0x2c
 8002176:	f7ff fa91 	bl	800169c <cmdWrite>
    dataWrite(color);
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff faa2 	bl	80016c4 <dataWrite>
}
 8002180:	bd70      	pop	{r4, r5, r6, pc}

08002182 <block>:

void block(int x, int y, uint16_t color) {
 8002182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002186:	4680      	mov	r8, r0
 8002188:	460d      	mov	r5, r1
    if (color == color_defback) {
 800218a:	4616      	mov	r6, r2
 800218c:	b992      	cbnz	r2, 80021b4 <block+0x32>
        for (int i = x + 1; i < x + 9; i++) {
 800218e:	1c47      	adds	r7, r0, #1
 8002190:	e00a      	b.n	80021a8 <block+0x26>
            for (int j = y + 1; j < y + 9; j++) {
                pixel(i, j, color);
 8002192:	4632      	mov	r2, r6
 8002194:	4621      	mov	r1, r4
 8002196:	4638      	mov	r0, r7
 8002198:	f7ff ffe1 	bl	800215e <pixel>
            for (int j = y + 1; j < y + 9; j++) {
 800219c:	3401      	adds	r4, #1
 800219e:	f105 0309 	add.w	r3, r5, #9
 80021a2:	42a3      	cmp	r3, r4
 80021a4:	dcf5      	bgt.n	8002192 <block+0x10>
        for (int i = x + 1; i < x + 9; i++) {
 80021a6:	3701      	adds	r7, #1
 80021a8:	f108 0309 	add.w	r3, r8, #9
 80021ac:	42bb      	cmp	r3, r7
 80021ae:	dd3d      	ble.n	800222c <block+0xaa>
            for (int j = y + 1; j < y + 9; j++) {
 80021b0:	1c6c      	adds	r4, r5, #1
 80021b2:	e7f4      	b.n	800219e <block+0x1c>
            }
        }
    } else {
        for (int i = x + 2; i < x + 8; i++) {
 80021b4:	1c87      	adds	r7, r0, #2
 80021b6:	e00a      	b.n	80021ce <block+0x4c>
            for (int j = y + 2; j < y + 8; j++) {
                pixel(i, j, color);
 80021b8:	4632      	mov	r2, r6
 80021ba:	4621      	mov	r1, r4
 80021bc:	4638      	mov	r0, r7
 80021be:	f7ff ffce 	bl	800215e <pixel>
            for (int j = y + 2; j < y + 8; j++) {
 80021c2:	3401      	adds	r4, #1
 80021c4:	f105 0308 	add.w	r3, r5, #8
 80021c8:	42a3      	cmp	r3, r4
 80021ca:	dcf5      	bgt.n	80021b8 <block+0x36>
        for (int i = x + 2; i < x + 8; i++) {
 80021cc:	3701      	adds	r7, #1
 80021ce:	f108 0908 	add.w	r9, r8, #8
 80021d2:	45b9      	cmp	r9, r7
 80021d4:	dd01      	ble.n	80021da <block+0x58>
            for (int j = y + 2; j < y + 8; j++) {
 80021d6:	1cac      	adds	r4, r5, #2
 80021d8:	e7f4      	b.n	80021c4 <block+0x42>
            }
        }
        for (int i = x + 1; i < x + 9; i++) {
 80021da:	f108 0601 	add.w	r6, r8, #1
 80021de:	4634      	mov	r4, r6
 80021e0:	e00d      	b.n	80021fe <block+0x7c>
            pixel(i, y + 1, color_white);
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	1c69      	adds	r1, r5, #1
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff ffb8 	bl	800215e <pixel>
            pixel(i, y + 8, color_gray);
 80021ee:	f248 4210 	movw	r2, #33808	; 0x8410
 80021f2:	f105 0108 	add.w	r1, r5, #8
 80021f6:	4620      	mov	r0, r4
 80021f8:	f7ff ffb1 	bl	800215e <pixel>
        for (int i = x + 1; i < x + 9; i++) {
 80021fc:	3401      	adds	r4, #1
 80021fe:	f108 0309 	add.w	r3, r8, #9
 8002202:	42a3      	cmp	r3, r4
 8002204:	dced      	bgt.n	80021e2 <block+0x60>
        }
        for (int j = y + 1; j < y + 9; j++) {
 8002206:	1c6c      	adds	r4, r5, #1
 8002208:	e00c      	b.n	8002224 <block+0xa2>
            pixel(x + 1, j, color_white);
 800220a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220e:	4621      	mov	r1, r4
 8002210:	4630      	mov	r0, r6
 8002212:	f7ff ffa4 	bl	800215e <pixel>
            pixel(x + 8, j, color_gray);
 8002216:	f248 4210 	movw	r2, #33808	; 0x8410
 800221a:	4621      	mov	r1, r4
 800221c:	4648      	mov	r0, r9
 800221e:	f7ff ff9e 	bl	800215e <pixel>
        for (int j = y + 1; j < y + 9; j++) {
 8002222:	3401      	adds	r4, #1
 8002224:	f105 0309 	add.w	r3, r5, #9
 8002228:	42a3      	cmp	r3, r4
 800222a:	dcee      	bgt.n	800220a <block+0x88>
        }

    }
}
 800222c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002230 <showScores>:

void showScores(int scores) {
 8002230:	b510      	push	{r4, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	4604      	mov	r4, r0
    char buf[8];

    start_display();
 8002236:	f7ff fadb 	bl	80017f0 <start_display>
    setFontSize(24);
 800223a:	2018      	movs	r0, #24
 800223c:	f000 f8b4 	bl	80023a8 <setFontSize>
    graflocat(0, 235);
 8002240:	21eb      	movs	r1, #235	; 0xeb
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff fa5e 	bl	8001704 <graflocat>
    enterxxx();
 8002248:	f7ff fabe 	bl	80017c8 <enterxxx>
    graflocat(currentPage, 235);
 800224c:	21eb      	movs	r1, #235	; 0xeb
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <showScores+0x88>)
 8002250:	8818      	ldrh	r0, [r3, #0]
 8002252:	f7ff fa57 	bl	8001704 <graflocat>
    if (scores >= 0) {
 8002256:	2c00      	cmp	r4, #0
 8002258:	db1f      	blt.n	800229a <showScores+0x6a>
        itoa(scores, buf, 10);
 800225a:	220a      	movs	r2, #10
 800225c:	4669      	mov	r1, sp
 800225e:	4620      	mov	r0, r4
 8002260:	f001 f9a8 	bl	80035b4 <itoa>
        putstr("Scores");
 8002264:	4815      	ldr	r0, [pc, #84]	; (80022bc <showScores+0x8c>)
 8002266:	f7ff fc8b 	bl	8001b80 <putstr>
        enterxxx();
 800226a:	f7ff faad 	bl	80017c8 <enterxxx>
        graflocat(currentPage, 235);
 800226e:	21eb      	movs	r1, #235	; 0xeb
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <showScores+0x88>)
 8002272:	8818      	ldrh	r0, [r3, #0]
 8002274:	f7ff fa46 	bl	8001704 <graflocat>
        putstr(buf);
 8002278:	4668      	mov	r0, sp
 800227a:	f7ff fc81 	bl	8001b80 <putstr>
        putstr("Game");
        enterxxx();
        graflocat(currentPage, 235);
        putstr("Over");
    }
    graflocat(4 * getFontSize(), 235);
 800227e:	f000 f8bd 	bl	80023fc <getFontSize>
 8002282:	0080      	lsls	r0, r0, #2
 8002284:	b280      	uxth	r0, r0
 8002286:	21eb      	movs	r1, #235	; 0xeb
 8002288:	f7ff fa3c 	bl	8001704 <graflocat>
    putstr("Next:");
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <showScores+0x90>)
 800228e:	f7ff fc77 	bl	8001b80 <putstr>
    enterxxx();
 8002292:	f7ff fa99 	bl	80017c8 <enterxxx>

}
 8002296:	b002      	add	sp, #8
 8002298:	bd10      	pop	{r4, pc}
        putstr("Game");
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <showScores+0x94>)
 800229c:	f7ff fc70 	bl	8001b80 <putstr>
        enterxxx();
 80022a0:	f7ff fa92 	bl	80017c8 <enterxxx>
        graflocat(currentPage, 235);
 80022a4:	21eb      	movs	r1, #235	; 0xeb
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <showScores+0x88>)
 80022a8:	8818      	ldrh	r0, [r3, #0]
 80022aa:	f7ff fa2b 	bl	8001704 <graflocat>
        putstr("Over");
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <showScores+0x98>)
 80022b0:	f7ff fc66 	bl	8001b80 <putstr>
 80022b4:	e7e3      	b.n	800227e <showScores+0x4e>
 80022b6:	bf00      	nop
 80022b8:	20000244 	.word	0x20000244
 80022bc:	08004ea0 	.word	0x08004ea0
 80022c0:	08004eb8 	.word	0x08004eb8
 80022c4:	08004ea8 	.word	0x08004ea8
 80022c8:	08004eb0 	.word	0x08004eb0

080022cc <gameDisplay>:

void gameDisplay() {
 80022cc:	b508      	push	{r3, lr}
    colorfill(color_defback);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff ff28 	bl	8002124 <colorfill>
    start_display();
 80022d4:	f7ff fa8c 	bl	80017f0 <start_display>
    setFontSize(24);
 80022d8:	2018      	movs	r0, #24
 80022da:	f000 f865 	bl	80023a8 <setFontSize>
    enterxxx();
 80022de:	f7ff fa73 	bl	80017c8 <enterxxx>
    keyshow(Button_4);
 80022e2:	200b      	movs	r0, #11
 80022e4:	f7ff fb86 	bl	80019f4 <keyshow>
    putstr(" - Left");
 80022e8:	4822      	ldr	r0, [pc, #136]	; (8002374 <gameDisplay+0xa8>)
 80022ea:	f7ff fc49 	bl	8001b80 <putstr>
    enterxxx();
 80022ee:	f7ff fa6b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 80022f2:	2008      	movs	r0, #8
 80022f4:	f000 f858 	bl	80023a8 <setFontSize>
    enterxxx();
 80022f8:	f7ff fa66 	bl	80017c8 <enterxxx>
    setFontSize(24);
 80022fc:	2018      	movs	r0, #24
 80022fe:	f000 f853 	bl	80023a8 <setFontSize>
    keyshow(Button_Point);
 8002302:	200d      	movs	r0, #13
 8002304:	f7ff fb76 	bl	80019f4 <keyshow>
    putstr(" - Right");
 8002308:	481b      	ldr	r0, [pc, #108]	; (8002378 <gameDisplay+0xac>)
 800230a:	f7ff fc39 	bl	8001b80 <putstr>
    enterxxx();
 800230e:	f7ff fa5b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002312:	2008      	movs	r0, #8
 8002314:	f000 f848 	bl	80023a8 <setFontSize>
    enterxxx();
 8002318:	f7ff fa56 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800231c:	2018      	movs	r0, #24
 800231e:	f000 f843 	bl	80023a8 <setFontSize>
    keyshow(Button_5);
 8002322:	200c      	movs	r0, #12
 8002324:	f7ff fb66 	bl	80019f4 <keyshow>
    putstr(" - Rotate");
 8002328:	4814      	ldr	r0, [pc, #80]	; (800237c <gameDisplay+0xb0>)
 800232a:	f7ff fc29 	bl	8001b80 <putstr>
    enterxxx();
 800232e:	f7ff fa4b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002332:	2008      	movs	r0, #8
 8002334:	f000 f838 	bl	80023a8 <setFontSize>
    enterxxx();
 8002338:	f7ff fa46 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800233c:	2018      	movs	r0, #24
 800233e:	f000 f833 	bl	80023a8 <setFontSize>
    keyshow(Button_Prime);
 8002342:	2006      	movs	r0, #6
 8002344:	f7ff fb56 	bl	80019f4 <keyshow>
    putstr(" - Down");
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <gameDisplay+0xb4>)
 800234a:	f7ff fc19 	bl	8001b80 <putstr>
    enterxxx();
 800234e:	f7ff fa3b 	bl	80017c8 <enterxxx>
    setFontSize(8);
 8002352:	2008      	movs	r0, #8
 8002354:	f000 f828 	bl	80023a8 <setFontSize>
    enterxxx();
 8002358:	f7ff fa36 	bl	80017c8 <enterxxx>
    setFontSize(24);
 800235c:	2018      	movs	r0, #24
 800235e:	f000 f823 	bl	80023a8 <setFontSize>
    keyshow(Button_Ok);
 8002362:	200e      	movs	r0, #14
 8002364:	f7ff fb46 	bl	80019f4 <keyshow>
    putstr(" - New");
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <gameDisplay+0xb8>)
 800236a:	f7ff fc09 	bl	8001b80 <putstr>
    enterxxx();
 800236e:	f7ff fa2b 	bl	80017c8 <enterxxx>
}
 8002372:	bd08      	pop	{r3, pc}
 8002374:	08004e70 	.word	0x08004e70
 8002378:	08004e78 	.word	0x08004e78
 800237c:	08004e84 	.word	0x08004e84
 8002380:	08004e90 	.word	0x08004e90
 8002384:	08004e98 	.word	0x08004e98

08002388 <displayAlarmTest>:

void displayAlarmTest() {
 8002388:	b508      	push	{r3, lr}
    start_display();
 800238a:	f7ff fa31 	bl	80017f0 <start_display>
    setFontSize(32);
 800238e:	2020      	movs	r0, #32
 8002390:	f000 f80a 	bl	80023a8 <setFontSize>
    putstr("High priority alarm");
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <displayAlarmTest+0x1c>)
 8002396:	f7ff fbf3 	bl	8001b80 <putstr>
    enterxxx();
 800239a:	f7ff fa15 	bl	80017c8 <enterxxx>
    filldisplay();
 800239e:	f7ff fbfb 	bl	8001b98 <filldisplay>
}
 80023a2:	bd08      	pop	{r3, pc}
 80023a4:	08004e5c 	.word	0x08004e5c

080023a8 <setFontSize>:
    currentFontSize = 8;
    fontScale = 1;
}

void setFontSize(uint8_t fontSize) {
    currentFontSize = fontSize;
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <setFontSize+0x4c>)
 80023aa:	7018      	strb	r0, [r3, #0]

    switch (fontSize) {
 80023ac:	2820      	cmp	r0, #32
 80023ae:	d011      	beq.n	80023d4 <setFontSize+0x2c>
 80023b0:	d90a      	bls.n	80023c8 <setFontSize+0x20>
 80023b2:	2840      	cmp	r0, #64	; 0x40
 80023b4:	d014      	beq.n	80023e0 <setFontSize+0x38>
 80023b6:	d911      	bls.n	80023dc <setFontSize+0x34>
 80023b8:	2848      	cmp	r0, #72	; 0x48
 80023ba:	d017      	beq.n	80023ec <setFontSize+0x44>
 80023bc:	2860      	cmp	r0, #96	; 0x60
 80023be:	d114      	bne.n	80023ea <setFontSize+0x42>
        break;
    case 72:
        fontScale = 3;
        break;
    case 96:
        fontScale = 4;
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <setFontSize+0x50>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	601a      	str	r2, [r3, #0]
        break;
    }
}
 80023c6:	4770      	bx	lr
    switch (fontSize) {
 80023c8:	2810      	cmp	r0, #16
 80023ca:	d003      	beq.n	80023d4 <setFontSize+0x2c>
 80023cc:	2818      	cmp	r0, #24
 80023ce:	d001      	beq.n	80023d4 <setFontSize+0x2c>
 80023d0:	2808      	cmp	r0, #8
 80023d2:	d1f8      	bne.n	80023c6 <setFontSize+0x1e>
        fontScale = 1;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <setFontSize+0x50>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
        break;
 80023da:	4770      	bx	lr
    switch (fontSize) {
 80023dc:	2830      	cmp	r0, #48	; 0x30
 80023de:	d103      	bne.n	80023e8 <setFontSize+0x40>
        fontScale = 2;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <setFontSize+0x50>)
 80023e2:	2202      	movs	r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
        break;
 80023e6:	4770      	bx	lr
 80023e8:	4770      	bx	lr
 80023ea:	4770      	bx	lr
        fontScale = 3;
 80023ec:	4b02      	ldr	r3, [pc, #8]	; (80023f8 <setFontSize+0x50>)
 80023ee:	2203      	movs	r2, #3
 80023f0:	601a      	str	r2, [r3, #0]
        break;
 80023f2:	4770      	bx	lr
 80023f4:	20000248 	.word	0x20000248
 80023f8:	2000024c 	.word	0x2000024c

080023fc <getFontSize>:

uint8_t getFontSize() {
    return currentFontSize;
}
 80023fc:	4b01      	ldr	r3, [pc, #4]	; (8002404 <getFontSize+0x8>)
 80023fe:	7818      	ldrb	r0, [r3, #0]
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000248 	.word	0x20000248

08002408 <getCurrentFont>:

const Font *getCurrentFont() {
    switch (currentFontSize) {
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <getCurrentFont+0x30>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b20      	cmp	r3, #32
 800240e:	d010      	beq.n	8002432 <getCurrentFont+0x2a>
 8002410:	d807      	bhi.n	8002422 <getCurrentFont+0x1a>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d101      	bne.n	800241a <getCurrentFont+0x12>
    case 8:
        return &font8;
    case 16:
        return &font16;
 8002416:	4809      	ldr	r0, [pc, #36]	; (800243c <getCurrentFont+0x34>)
    case 96:
        return &font24;
    default:
        return &font8;
    }
}
 8002418:	4770      	bx	lr
    switch (currentFontSize) {
 800241a:	2b18      	cmp	r3, #24
 800241c:	d107      	bne.n	800242e <getCurrentFont+0x26>
        return &font24;
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <getCurrentFont+0x38>)
 8002420:	4770      	bx	lr
    switch (currentFontSize) {
 8002422:	2b48      	cmp	r3, #72	; 0x48
 8002424:	d0fb      	beq.n	800241e <getCurrentFont+0x16>
 8002426:	2b60      	cmp	r3, #96	; 0x60
 8002428:	d0f9      	beq.n	800241e <getCurrentFont+0x16>
 800242a:	2b30      	cmp	r3, #48	; 0x30
 800242c:	d0f7      	beq.n	800241e <getCurrentFont+0x16>
        return &font8;
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <getCurrentFont+0x3c>)
 8002430:	4770      	bx	lr
        return &font32;
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <getCurrentFont+0x40>)
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000248 	.word	0x20000248
 800243c:	080054a8 	.word	0x080054a8
 8002440:	0800582c 	.word	0x0800582c
 8002444:	08005f34 	.word	0x08005f34
 8002448:	08005bb0 	.word	0x08005bb0

0800244c <getFontScale>:

uint32_t getFontScale() {
    return fontScale;
}
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <getFontScale+0x8>)
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	2000024c 	.word	0x2000024c

08002458 <getKeyCharacter>:

const KeyCharacter *getKeyCharacter(buttonName_t button) {
    return FontKeys[button];
}
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <getKeyCharacter+0x8>)
 800245a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800245e:	4770      	bx	lr
 8002460:	20000030 	.word	0x20000030

08002464 <ledOff>:
    ledOff(ledRed);
    ledOff(ledGreen);
}

void ledOff(led_t led) {
    switch (led) {
 8002464:	b110      	cbz	r0, 800246c <ledOff+0x8>
 8002466:	2801      	cmp	r0, #1
 8002468:	d006      	beq.n	8002478 <ledOff+0x14>
 800246a:	4770      	bx	lr
    case ledRed:
        GPIOB->ODR &= ~(1 << 9);
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <ledOff+0x20>)
 800246e:	6953      	ldr	r3, [r2, #20]
 8002470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002474:	6153      	str	r3, [r2, #20]
        break;
 8002476:	4770      	bx	lr
    case ledGreen:
        GPIOB->ODR &= ~(1 << 8);
 8002478:	4a02      	ldr	r2, [pc, #8]	; (8002484 <ledOff+0x20>)
 800247a:	6953      	ldr	r3, [r2, #20]
 800247c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002480:	6153      	str	r3, [r2, #20]
        break;
    }
}
 8002482:	4770      	bx	lr
 8002484:	48000400 	.word	0x48000400

08002488 <initLeds>:
void initLeds() {
 8002488:	b508      	push	{r3, lr}
    ledOff(ledRed);
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff ffea 	bl	8002464 <ledOff>
    ledOff(ledGreen);
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff ffe7 	bl	8002464 <ledOff>
}
 8002496:	bd08      	pop	{r3, pc}

08002498 <max706_toggle>:
    GPIOC->PUPDR = 1 << GPIO_PUPDR_PUPD0_Pos;

    GPIOD->MODER = 0x55555555;
}

void max706_toggle(uint32_t parameter) {
 8002498:	b508      	push	{r3, lr}
    GPIOC->ODR ^= (1 << 3);
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <max706_toggle+0x1c>)
 800249c:	6953      	ldr	r3, [r2, #20]
 800249e:	f083 0308 	eor.w	r3, r3, #8
 80024a2:	6153      	str	r3, [r2, #20]

    osTaskAdd(max706_toggle, 0, 500);
 80024a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024a8:	2100      	movs	r1, #0
 80024aa:	4803      	ldr	r0, [pc, #12]	; (80024b8 <max706_toggle+0x20>)
 80024ac:	f000 fd2a 	bl	8002f04 <osTaskAdd>
}
 80024b0:	bd08      	pop	{r3, pc}
 80024b2:	bf00      	nop
 80024b4:	48000800 	.word	0x48000800
 80024b8:	08002499 	.word	0x08002499

080024bc <initializationTask>:
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL);

    SystemCoreClockUpdate();
}

void initializationTask(uint32_t parameter) {
 80024bc:	b508      	push	{r3, lr}
    static uint32_t time;

    if (time == 0) {
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <initializationTask+0x3c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	b143      	cbz	r3, 80024d6 <initializationTask+0x1a>
        display00();
        osTaskAdd(initializationTask, 0, 50);
    } else if (time < 5) {
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d90e      	bls.n	80024e6 <initializationTask+0x2a>
        display01();
        osTaskAdd(initializationTask, 0, 1000);
    } else {
        showManualTestsScreen();
 80024c8:	f7fe fe5e 	bl	8001188 <showManualTestsScreen>
    }
    time++;
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <initializationTask+0x3c>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	3301      	adds	r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bd08      	pop	{r3, pc}
        display00();
 80024d6:	f7ff fb76 	bl	8001bc6 <display00>
        osTaskAdd(initializationTask, 0, 50);
 80024da:	2232      	movs	r2, #50	; 0x32
 80024dc:	2100      	movs	r1, #0
 80024de:	4807      	ldr	r0, [pc, #28]	; (80024fc <initializationTask+0x40>)
 80024e0:	f000 fd10 	bl	8002f04 <osTaskAdd>
 80024e4:	e7f2      	b.n	80024cc <initializationTask+0x10>
        display01();
 80024e6:	f7ff fb75 	bl	8001bd4 <display01>
        osTaskAdd(initializationTask, 0, 1000);
 80024ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024ee:	2100      	movs	r1, #0
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <initializationTask+0x40>)
 80024f2:	f000 fd07 	bl	8002f04 <osTaskAdd>
 80024f6:	e7e9      	b.n	80024cc <initializationTask+0x10>
 80024f8:	20000250 	.word	0x20000250
 80024fc:	080024bd 	.word	0x080024bd

08002500 <initGPIO>:
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN |
 8002500:	4a1f      	ldr	r2, [pc, #124]	; (8002580 <initGPIO+0x80>)
 8002502:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002504:	f043 031f 	orr.w	r3, r3, #31
 8002508:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA->MODER &= ~(GPIO_MODER_MODE8_Msk |
 800250a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8002514:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002518:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << GPIO_MODER_MODE8_Pos) |
 800251a:	6813      	ldr	r3, [r2, #0]
 800251c:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (1 << GPIO_MODER_MODE3_Pos) |
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <initGPIO+0x84>)
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <initGPIO+0x88>)
 800252a:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODE5_Msk);
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002532:	601a      	str	r2, [r3, #0]
    GPIOB->PUPDR = (1 < GPIO_PUPDR_PUPD5_Pos);  //KEYS3 with pull-up
 8002534:	2101      	movs	r1, #1
 8002536:	60d9      	str	r1, [r3, #12]
    GPIOE->MODER = 0xFFFB0000UL;				//PORTE[9] is alternate function
 8002538:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800253c:	4a13      	ldr	r2, [pc, #76]	; (800258c <initGPIO+0x8c>)
 800253e:	601a      	str	r2, [r3, #0]
    GPIOE->PUPDR = 0x5555;                      //PORTE[7:0] with pull up
 8002540:	f245 5255 	movw	r2, #21845	; 0x5555
 8002544:	60da      	str	r2, [r3, #12]
    GPIOE->AFR[1] = 1 << GPIO_AFRH_AFSEL9_Pos;	//TIM1_CH1 is an alternate function AF1 for PE9
 8002546:	2210      	movs	r2, #16
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOC->MODER &= ~(GPIO_MODER_MODE0_Msk |
 800254a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002554:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002558:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (1 << GPIO_MODER_MODE2_Pos) |
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002560:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8002564:	601a      	str	r2, [r3, #0]
    GPIOC->AFR[1] = 2 << GPIO_AFRH_AFSEL9_Pos;  //TIM3_CH4 is an alternate function AF2 for PC9
 8002566:	2220      	movs	r2, #32
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    GPIOC->ODR |= (1 << 2);
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	f042 0204 	orr.w	r2, r2, #4
 8002570:	615a      	str	r2, [r3, #20]
    GPIOC->PUPDR = 1 << GPIO_PUPDR_PUPD0_Pos;
 8002572:	60d9      	str	r1, [r3, #12]
    GPIOD->MODER = 0x55555555;
 8002574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002578:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	4770      	bx	lr
 8002580:	40021000 	.word	0x40021000
 8002584:	48000400 	.word	0x48000400
 8002588:	11050140 	.word	0x11050140
 800258c:	fffb0000 	.word	0xfffb0000

08002590 <initClocks>:
void initClocks() {
 8002590:	b508      	push	{r3, lr}
    RCC->CR |= RCC_CR_HSEON;
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <initClocks+0x48>)
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259a:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSERDY) == 0);
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <initClocks+0x48>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025a4:	d0fa      	beq.n	800259c <initClocks+0xc>
    RCC->PLLCFGR = (0x3 << RCC_PLLCFGR_PLLSRC_Pos) | //Main PLL Clock source -> HSE (8 MHz)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <initClocks+0x48>)
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <initClocks+0x4c>)
 80025aa:	60da      	str	r2, [r3, #12]
    RCC->CR |= RCC_CR_PLLON;
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025b2:	601a      	str	r2, [r3, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <initClocks+0x48>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025bc:	d0fa      	beq.n	80025b4 <initClocks+0x24>
    RCC->CFGR = RCC_CFGR_SW_PLL << RCC_CFGR_SW_Pos;
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <initClocks+0x48>)
 80025c0:	2203      	movs	r2, #3
 80025c2:	609a      	str	r2, [r3, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_PLL);
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <initClocks+0x48>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d1f9      	bne.n	80025c4 <initClocks+0x34>
    SystemCoreClockUpdate();
 80025d0:	f7fe ffd4 	bl	800157c <SystemCoreClockUpdate>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	03000f03 	.word	0x03000f03

080025e0 <main>:

int main (int argc, char* argv[]) {
 80025e0:	b508      	push	{r3, lr}
    initClocks();
 80025e2:	f7ff ffd5 	bl	8002590 <initClocks>
    osInit(1000, timerInit, timerElapseSinceLastTime);
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <main+0x58>)
 80025e8:	4914      	ldr	r1, [pc, #80]	; (800263c <main+0x5c>)
 80025ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ee:	f000 fc51 	bl	8002e94 <osInit>

    initGPIO();
 80025f2:	f7ff ff85 	bl	8002500 <initGPIO>
    initSound();
 80025f6:	f000 f9cb 	bl	8002990 <initSound>
    initMotor();
 80025fa:	f000 f84b 	bl	8002694 <initMotor>
    initLeds();
 80025fe:	f7ff ff43 	bl	8002488 <initLeds>
    initDisplay();
 8002602:	f7ff f90d 	bl	8001820 <initDisplay>

    osTaskAdd(max706_toggle, 0, 500);
 8002606:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800260a:	2100      	movs	r1, #0
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <main+0x60>)
 800260e:	f000 fc79 	bl	8002f04 <osTaskAdd>
    buttonInit(getButtonsConfig(), Button_Last);
 8002612:	f000 fddb 	bl	80031cc <getButtonsConfig>
 8002616:	2111      	movs	r1, #17
 8002618:	f000 ff36 	bl	8003488 <buttonInit>
    osTaskAdd(buttonsPollTask, 0, 5);
 800261c:	2205      	movs	r2, #5
 800261e:	2100      	movs	r1, #0
 8002620:	4808      	ldr	r0, [pc, #32]	; (8002644 <main+0x64>)
 8002622:	f000 fc6f 	bl	8002f04 <osTaskAdd>
    osTaskAdd(initializationTask, 0, 100);
 8002626:	2264      	movs	r2, #100	; 0x64
 8002628:	2100      	movs	r1, #0
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <main+0x68>)
 800262c:	f000 fc6a 	bl	8002f04 <osTaskAdd>
    osRun();
 8002630:	f000 fc48 	bl	8002ec4 <osRun>
}
 8002634:	bd08      	pop	{r3, pc}
 8002636:	bf00      	nop
 8002638:	08002dcd 	.word	0x08002dcd
 800263c:	08002d85 	.word	0x08002d85
 8002640:	08002499 	.word	0x08002499
 8002644:	0800325d 	.word	0x0800325d
 8002648:	080024bd 	.word	0x080024bd

0800264c <initMotorTimer>:

#define MOTOR_TIMER_FREQ (78125)
#define MOTOR_TIMER_PERIOD (SystemCoreClock / MOTOR_TIMER_FREQ)

static void initMotorTimer() {
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800264c:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <initMotorTimer+0x38>)
 800264e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002650:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002654:	6613      	str	r3, [r2, #96]	; 0x60

	TIM1->CCMR1 = 0x6 << TIM_CCMR1_OC1M_Pos;    //PWM Mode 1
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <initMotorTimer+0x3c>)
 8002658:	2260      	movs	r2, #96	; 0x60
 800265a:	619a      	str	r2, [r3, #24]

	TIM1->CCER = TIM_CCER_CC1E;                 //Enable Channel1 output
 800265c:	2201      	movs	r2, #1
 800265e:	621a      	str	r2, [r3, #32]
	TIM1->PSC = 0;
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = MOTOR_TIMER_PERIOD - 1;
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <initMotorTimer+0x40>)
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4909      	ldr	r1, [pc, #36]	; (8002690 <initMotorTimer+0x44>)
 800266a:	fba1 1202 	umull	r1, r2, r1, r2
 800266e:	0bd2      	lsrs	r2, r2, #15
 8002670:	3a01      	subs	r2, #1
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 10;
 8002674:	220a      	movs	r2, #10
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->BDTR |= TIM_BDTR_MOE;
 8002678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	40012c00 	.word	0x40012c00
 800268c:	2000002c 	.word	0x2000002c
 8002690:	6b5fca6b 	.word	0x6b5fca6b

08002694 <initMotor>:

void initMotor() {
 8002694:	b508      	push	{r3, lr}
	initMotorTimer();
 8002696:	f7ff ffd9 	bl	800264c <initMotorTimer>
}
 800269a:	bd08      	pop	{r3, pc}

0800269c <increaseMotorSpeed>:

void increaseMotorSpeed(uint16_t step) {
    uint16_t tmp = TIM1->CCR1;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <increaseMotorSpeed+0x1c>)
 800269e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a0:	b29b      	uxth	r3, r3
    uint16_t maxDuty = 100;

    if (step > (maxDuty - tmp)) {
 80026a2:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80026a6:	4290      	cmp	r0, r2
 80026a8:	dc04      	bgt.n	80026b4 <increaseMotorSpeed+0x18>
        tmp = maxDuty;
    } else {
        tmp += step;
 80026aa:	4403      	add	r3, r0
 80026ac:	b29b      	uxth	r3, r3
    }
    TIM1->CCR1 = tmp;
 80026ae:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <increaseMotorSpeed+0x1c>)
 80026b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80026b2:	4770      	bx	lr
        tmp = maxDuty;
 80026b4:	2364      	movs	r3, #100	; 0x64
 80026b6:	e7fa      	b.n	80026ae <increaseMotorSpeed+0x12>
 80026b8:	40012c00 	.word	0x40012c00

080026bc <decreaseMotorSpeed>:

void decreaseMotorSpeed(uint16_t step) {
    uint16_t tmp = TIM1->CCR1;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <decreaseMotorSpeed+0x18>)
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	b29b      	uxth	r3, r3

    if (step > tmp) {
 80026c2:	4283      	cmp	r3, r0
 80026c4:	d304      	bcc.n	80026d0 <decreaseMotorSpeed+0x14>
        tmp = 0;
    } else {
        tmp -= step;
 80026c6:	1a1b      	subs	r3, r3, r0
 80026c8:	b29b      	uxth	r3, r3
    }
    TIM1->CCR1 = tmp;
 80026ca:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <decreaseMotorSpeed+0x18>)
 80026cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80026ce:	4770      	bx	lr
        tmp = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e7fa      	b.n	80026ca <decreaseMotorSpeed+0xe>
 80026d4:	40012c00 	.word	0x40012c00

080026d8 <enableMotor>:

void enableMotor() {
    GPIOB->ODR |= (1 << 12);
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <enableMotor+0x18>)
 80026da:	6953      	ldr	r3, [r2, #20]
 80026dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e0:	6153      	str	r3, [r2, #20]
    TIM1->CR1 |= TIM_CR1_CEN;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <enableMotor+0x1c>)
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	48000400 	.word	0x48000400
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <disableMotor>:

void disableMotor() {
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <disableMotor+0x18>)
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6013      	str	r3, [r2, #0]
    GPIOB->ODR &= ~(1 << 12);
 8002702:	4a04      	ldr	r2, [pc, #16]	; (8002714 <disableMotor+0x1c>)
 8002704:	6953      	ldr	r3, [r2, #20]
 8002706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800270a:	6153      	str	r3, [r2, #20]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	48000400 	.word	0x48000400

08002718 <soundInitTimers>:
static const uint8_t audioleveltab[AUDIOLEVELS_COUNT] = {
    4, 6, 10, 15, 25, 40, 64, 127
};

static void soundInitTimers() {
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN | RCC_APB1ENR1_TIM6EN;
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <soundInitTimers+0x4c>)
 800271a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800271c:	f043 0312 	orr.w	r3, r3, #18
 8002720:	6593      	str	r3, [r2, #88]	; 0x58

    TIM3->CCMR2 = 0x6 << TIM_CCMR2_OC4M_Pos;    //PWM Mode 1
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <soundInitTimers+0x50>)
 8002724:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002728:	61da      	str	r2, [r3, #28]
    TIM3->CR1 = 0x1 << TIM_CR1_CMS_Pos;
 800272a:	2220      	movs	r2, #32
 800272c:	601a      	str	r2, [r3, #0]
    TIM3->SR = 0;
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
    TIM3->CCER = TIM_CCER_CC4E;                 //Enable Channel1 output
 8002732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002736:	6219      	str	r1, [r3, #32]
    TIM3->PSC = 0;
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 0;
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->BDTR |= TIM_BDTR_MOE;
 800273c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002742:	645a      	str	r2, [r3, #68]	; 0x44

    TIM6->ARR = SystemCoreClock / SOUND_CONTROL_TIMER_FREQ;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <soundInitTimers+0x54>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <soundInitTimers+0x58>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	4a08      	ldr	r2, [pc, #32]	; (8002774 <soundInitTimers+0x5c>)
 8002752:	62d3      	str	r3, [r2, #44]	; 0x2c
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <soundInitTimers+0x60>)
 8002756:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002760:	605a      	str	r2, [r3, #4]

    NVIC_EnableIRQ(TIM3_IRQn);
    NVIC_EnableIRQ(TIM6_DAC_IRQn);
}
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40000400 	.word	0x40000400
 800276c:	2000002c 	.word	0x2000002c
 8002770:	10624dd3 	.word	0x10624dd3
 8002774:	40001000 	.word	0x40001000
 8002778:	e000e100 	.word	0xe000e100

0800277c <soundSetTimerPeriod>:

static void soundSetTimerPeriod(uint32_t period) {
    TIM3->ARR = period;
 800277c:	4b01      	ldr	r3, [pc, #4]	; (8002784 <soundSetTimerPeriod+0x8>)
 800277e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40000400 	.word	0x40000400

08002788 <soundSetTimerDuty>:

static void soundSetTimerDuty(uint32_t duty) {
    TIM3->CCR4 = duty;
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <soundSetTimerDuty+0x8>)
 800278a:	6418      	str	r0, [r3, #64]	; 0x40
}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40000400 	.word	0x40000400

08002794 <intervalConvert>:

//Convert HCS08 TPM intervals (duty cycle and period) to
//STM32 TIM3 intervals
static uint32_t intervalConvert(uint32_t interval) {
    uint32_t sysClkMhz = SystemCoreClock / 1000000;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <intervalConvert+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <intervalConvert+0x20>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9b      	lsrs	r3, r3, #18

    return interval * sysClkMhz / ORIGINAL_FREQUENCY_MHZ;
 80027a0:	fb00 f003 	mul.w	r0, r0, r3
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <intervalConvert+0x24>)
 80027a6:	fba3 3000 	umull	r3, r0, r3, r0
}
 80027aa:	0900      	lsrs	r0, r0, #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	2000002c 	.word	0x2000002c
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	cccccccd 	.word	0xcccccccd

080027bc <soundStart>:

static void soundStart() {
    toneburst = 0;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <soundStart+0x1c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
    TIM6->CR1 |= TIM_CR1_CEN;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <soundStart+0x20>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
    TIM6->DIER |= TIM_DIER_UIE;
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	60da      	str	r2, [r3, #12]
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000268 	.word	0x20000268
 80027dc:	40001000 	.word	0x40001000

080027e0 <soundStop>:

static void soundStop() {
    TIM3->CR1 &= ~TIM_CR1_CEN;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <soundStop+0x30>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	60da      	str	r2, [r3, #12]
    TIM6->CR1 &= ~TIM_CR1_CEN;
 80027f2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    TIM6->DIER &= ~TIM_DIER_UIE;
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	60da      	str	r2, [r3, #12]
    currentState = sound_silence;
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <soundStop+0x34>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40000400 	.word	0x40000400
 8002814:	20000266 	.word	0x20000266

08002818 <soundPlayNote>:

static void soundPlayNote(uint32_t period, uint32_t level) {
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
    soundSetTimerPeriod(intervalConvert(period));
 800281e:	f7ff ffb9 	bl	8002794 <intervalConvert>
 8002822:	f7ff ffab 	bl	800277c <soundSetTimerPeriod>

    if (level < AUDIOLEVELS_COUNT) {
 8002826:	2d07      	cmp	r5, #7
 8002828:	d812      	bhi.n	8002850 <soundPlayNote+0x38>
        audiohar1 = intervalConvert(audioleveltab[level] *
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <soundPlayNote+0x54>)
 800282c:	5d58      	ldrb	r0, [r3, r5]
                                    (period / 512 + 5));
 800282e:	0a64      	lsrs	r4, r4, #9
 8002830:	3405      	adds	r4, #5
        audiohar1 = intervalConvert(audioleveltab[level] *
 8002832:	fb04 f000 	mul.w	r0, r4, r0
 8002836:	f7ff ffad 	bl	8002794 <intervalConvert>
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <soundPlayNote+0x58>)
 800283c:	6018      	str	r0, [r3, #0]
        audiohar2 = audiohar1 / 8;
 800283e:	08c2      	lsrs	r2, r0, #3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <soundPlayNote+0x5c>)
 8002842:	601a      	str	r2, [r3, #0]
        audiohar3 = audiohar2 / 8;
 8002844:	0982      	lsrs	r2, r0, #6
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <soundPlayNote+0x60>)
 8002848:	601a      	str	r2, [r3, #0]
        audiohar4 = audiohar3 / 8;
 800284a:	0a40      	lsrs	r0, r0, #9
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <soundPlayNote+0x64>)
 800284e:	6018      	str	r0, [r3, #0]
    }
    audiophase = 12;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <soundPlayNote+0x68>)
 8002852:	220c      	movs	r2, #12
 8002854:	701a      	strb	r2, [r3, #0]
    TIM3->CR1 |= TIM_CR1_CEN;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <soundPlayNote+0x6c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    TIM3->DIER |= TIM_DIER_UIE;
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	60da      	str	r2, [r3, #12]
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	0800a9b4 	.word	0x0800a9b4
 8002870:	20000254 	.word	0x20000254
 8002874:	20000258 	.word	0x20000258
 8002878:	2000025c 	.word	0x2000025c
 800287c:	20000260 	.word	0x20000260
 8002880:	20000265 	.word	0x20000265
 8002884:	40000400 	.word	0x40000400

08002888 <soundStopNote>:

static void soundStopNote() {
    TIM3->CR1 &= ~TIM_CR1_CEN;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <soundStopNote+0x14>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    TIM3->DIER &= ~TIM_DIER_UIE;
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	60da      	str	r2, [r3, #12]
}
 800289a:	4770      	bx	lr
 800289c:	40000400 	.word	0x40000400

080028a0 <beepControlHandler>:
    default:
        break;
    }
}

static void beepControlHandler() {
 80028a0:	b508      	push	{r3, lr}
    switch (toneburst) {
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <beepControlHandler+0xe8>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f240 1291 	movw	r2, #401	; 0x191
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d050      	beq.n	8002950 <beepControlHandler+0xb0>
 80028ae:	f5b3 7fc9 	cmp.w	r3, #402	; 0x192
 80028b2:	d215      	bcs.n	80028e0 <beepControlHandler+0x40>
 80028b4:	2b1f      	cmp	r3, #31
 80028b6:	d03b      	beq.n	8002930 <beepControlHandler+0x90>
 80028b8:	d80b      	bhi.n	80028d2 <beepControlHandler+0x32>
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d030      	beq.n	8002920 <beepControlHandler+0x80>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d135      	bne.n	800292e <beepControlHandler+0x8e>
    case 1:
        soundPlayNote(2485, audiolevel - 4);
        break;
    case 16:
        soundPlayNote(2485, audiolevel - 3);
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <beepControlHandler+0xec>)
 80028c4:	7819      	ldrb	r1, [r3, #0]
 80028c6:	3903      	subs	r1, #3
 80028c8:	f640 10b5 	movw	r0, #2485	; 0x9b5
 80028cc:	f7ff ffa4 	bl	8002818 <soundPlayNote>
        break;
 80028d0:	e02d      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 80028d2:	2be7      	cmp	r3, #231	; 0xe7
 80028d4:	d034      	beq.n	8002940 <beepControlHandler+0xa0>
 80028d6:	2bf6      	cmp	r3, #246	; 0xf6
 80028d8:	d129      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 231:
        soundPlayNote(2485, audiolevel - 3);
        break;
    case 246:
        soundStopNote();
 80028da:	f7ff ffd5 	bl	8002888 <soundStopNote>
        break;
 80028de:	e026      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 80028e0:	f240 2277 	movw	r2, #631	; 0x277
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d043      	beq.n	8002970 <beepControlHandler+0xd0>
 80028e8:	f5b3 7f1e 	cmp.w	r3, #632	; 0x278
 80028ec:	d20e      	bcs.n	800290c <beepControlHandler+0x6c>
 80028ee:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 80028f2:	d035      	beq.n	8002960 <beepControlHandler+0xc0>
 80028f4:	f240 12af 	movw	r2, #431	; 0x1af
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d118      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 416:
        soundPlayNote(3131, audiolevel - 3);
        break;
    case 431:
        soundPlayNote(3131, audiolevel - 1);
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <beepControlHandler+0xec>)
 80028fe:	7819      	ldrb	r1, [r3, #0]
 8002900:	3901      	subs	r1, #1
 8002902:	f640 403b 	movw	r0, #3131	; 0xc3b
 8002906:	f7ff ff87 	bl	8002818 <soundPlayNote>
        break;
 800290a:	e010      	b.n	800292e <beepControlHandler+0x8e>
    switch (toneburst) {
 800290c:	f240 2286 	movw	r2, #646	; 0x286
 8002910:	4293      	cmp	r3, r2
 8002912:	d035      	beq.n	8002980 <beepControlHandler+0xe0>
 8002914:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002918:	d109      	bne.n	800292e <beepControlHandler+0x8e>
        break;
    case 646:
        soundStopNote();
        break;
    case 800:
        soundStop();
 800291a:	f7ff ff61 	bl	80027e0 <soundStop>
        break;
    }
}
 800291e:	e006      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(2485, audiolevel - 4);
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <beepControlHandler+0xec>)
 8002922:	7819      	ldrb	r1, [r3, #0]
 8002924:	3904      	subs	r1, #4
 8002926:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800292a:	f7ff ff75 	bl	8002818 <soundPlayNote>
}
 800292e:	bd08      	pop	{r3, pc}
        soundPlayNote(2485, audiolevel - 1);
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <beepControlHandler+0xec>)
 8002932:	7819      	ldrb	r1, [r3, #0]
 8002934:	3901      	subs	r1, #1
 8002936:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800293a:	f7ff ff6d 	bl	8002818 <soundPlayNote>
        break;
 800293e:	e7f6      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(2485, audiolevel - 3);
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <beepControlHandler+0xec>)
 8002942:	7819      	ldrb	r1, [r3, #0]
 8002944:	3903      	subs	r1, #3
 8002946:	f640 10b5 	movw	r0, #2485	; 0x9b5
 800294a:	f7ff ff65 	bl	8002818 <soundPlayNote>
        break;
 800294e:	e7ee      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 4);
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <beepControlHandler+0xec>)
 8002952:	7819      	ldrb	r1, [r3, #0]
 8002954:	3904      	subs	r1, #4
 8002956:	f640 403b 	movw	r0, #3131	; 0xc3b
 800295a:	f7ff ff5d 	bl	8002818 <soundPlayNote>
        break;
 800295e:	e7e6      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 3);
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <beepControlHandler+0xec>)
 8002962:	7819      	ldrb	r1, [r3, #0]
 8002964:	3903      	subs	r1, #3
 8002966:	f640 403b 	movw	r0, #3131	; 0xc3b
 800296a:	f7ff ff55 	bl	8002818 <soundPlayNote>
        break;
 800296e:	e7de      	b.n	800292e <beepControlHandler+0x8e>
        soundPlayNote(3131, audiolevel - 3);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <beepControlHandler+0xec>)
 8002972:	7819      	ldrb	r1, [r3, #0]
 8002974:	3903      	subs	r1, #3
 8002976:	f640 403b 	movw	r0, #3131	; 0xc3b
 800297a:	f7ff ff4d 	bl	8002818 <soundPlayNote>
        break;
 800297e:	e7d6      	b.n	800292e <beepControlHandler+0x8e>
        soundStopNote();
 8002980:	f7ff ff82 	bl	8002888 <soundStopNote>
        break;
 8002984:	e7d3      	b.n	800292e <beepControlHandler+0x8e>
 8002986:	bf00      	nop
 8002988:	20000268 	.word	0x20000268
 800298c:	20000264 	.word	0x20000264

08002990 <initSound>:
void initSound() {
 8002990:	b508      	push	{r3, lr}
    toneburst = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <initSound+0x18>)
 8002996:	8013      	strh	r3, [r2, #0]
    audiolevel = 3;
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <initSound+0x1c>)
 800299a:	2103      	movs	r1, #3
 800299c:	7011      	strb	r1, [r2, #0]
    currentState = sound_silence;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <initSound+0x20>)
 80029a0:	7013      	strb	r3, [r2, #0]
    soundInitTimers();
 80029a2:	f7ff feb9 	bl	8002718 <soundInitTimers>
}
 80029a6:	bd08      	pop	{r3, pc}
 80029a8:	20000268 	.word	0x20000268
 80029ac:	20000264 	.word	0x20000264
 80029b0:	20000266 	.word	0x20000266

080029b4 <soundSetLevel>:
    if (level < 8) {
 80029b4:	2807      	cmp	r0, #7
 80029b6:	d801      	bhi.n	80029bc <soundSetLevel+0x8>
        audiolevel = level;
 80029b8:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <soundSetLevel+0xc>)
 80029ba:	7018      	strb	r0, [r3, #0]
}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000264 	.word	0x20000264

080029c4 <soundGetLevel>:
}
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <soundGetLevel+0x8>)
 80029c6:	7818      	ldrb	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000264 	.word	0x20000264

080029d0 <soundBeep>:
void soundBeep() {
 80029d0:	b508      	push	{r3, lr}
    if (currentState == sound_silence) {
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <soundBeep+0x18>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b103      	cbz	r3, 80029da <soundBeep+0xa>
}
 80029d8:	bd08      	pop	{r3, pc}
        currentState = sound_beep;
 80029da:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <soundBeep+0x18>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
        soundStart();
 80029e0:	f7ff feec 	bl	80027bc <soundStart>
}
 80029e4:	e7f8      	b.n	80029d8 <soundBeep+0x8>
 80029e6:	bf00      	nop
 80029e8:	20000266 	.word	0x20000266

080029ec <soundKeyBeep>:
void soundKeyBeep() {
 80029ec:	b508      	push	{r3, lr}
    if (currentState == sound_silence) {
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <soundKeyBeep+0x18>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b103      	cbz	r3, 80029f6 <soundKeyBeep+0xa>
}
 80029f4:	bd08      	pop	{r3, pc}
        currentState = sound_keybeep;
 80029f6:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <soundKeyBeep+0x18>)
 80029f8:	2202      	movs	r2, #2
 80029fa:	701a      	strb	r2, [r3, #0]
        soundStart();
 80029fc:	f7ff fede 	bl	80027bc <soundStart>
}
 8002a00:	e7f8      	b.n	80029f4 <soundKeyBeep+0x8>
 8002a02:	bf00      	nop
 8002a04:	20000266 	.word	0x20000266

08002a08 <soundHiAlarm>:
void soundHiAlarm() {
 8002a08:	b508      	push	{r3, lr}
    if (currentState != sound_hialarm) {
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <soundHiAlarm+0x18>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d004      	beq.n	8002a1c <soundHiAlarm+0x14>
        currentState = sound_hialarm;
 8002a12:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <soundHiAlarm+0x18>)
 8002a14:	2204      	movs	r2, #4
 8002a16:	701a      	strb	r2, [r3, #0]
        soundStart();
 8002a18:	f7ff fed0 	bl	80027bc <soundStart>
}
 8002a1c:	bd08      	pop	{r3, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000266 	.word	0x20000266

08002a24 <soundStopAlarm>:
void soundStopAlarm() {
 8002a24:	b508      	push	{r3, lr}
    switch (currentState) {
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <soundStopAlarm+0x14>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	3b03      	subs	r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d900      	bls.n	8002a32 <soundStopAlarm+0xe>
}
 8002a30:	bd08      	pop	{r3, pc}
        soundStop();
 8002a32:	f7ff fed5 	bl	80027e0 <soundStop>
}
 8002a36:	e7fb      	b.n	8002a30 <soundStopAlarm+0xc>
 8002a38:	20000266 	.word	0x20000266

08002a3c <keybeepControlHandler>:

void keybeepControlHandler() {
 8002a3c:	b508      	push	{r3, lr}
    switch (toneburst) {
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <keybeepControlHandler+0x58>)
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	2b83      	cmp	r3, #131	; 0x83
 8002a44:	d01b      	beq.n	8002a7e <keybeepControlHandler+0x42>
 8002a46:	d80b      	bhi.n	8002a60 <keybeepControlHandler+0x24>
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d010      	beq.n	8002a6e <keybeepControlHandler+0x32>
 8002a4c:	2b0b      	cmp	r3, #11
 8002a4e:	d115      	bne.n	8002a7c <keybeepControlHandler+0x40>
    case 1:
        soundPlayNote(2485, audiolevel - 3);
        break;
    case 11:
        soundPlayNote(2485, audiolevel - 1);
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a52:	7819      	ldrb	r1, [r3, #0]
 8002a54:	3901      	subs	r1, #1
 8002a56:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a5a:	f7ff fedd 	bl	8002818 <soundPlayNote>
        break;
 8002a5e:	e00d      	b.n	8002a7c <keybeepControlHandler+0x40>
    switch (toneburst) {
 8002a60:	2b8d      	cmp	r3, #141	; 0x8d
 8002a62:	d014      	beq.n	8002a8e <keybeepControlHandler+0x52>
 8002a64:	2ba1      	cmp	r3, #161	; 0xa1
 8002a66:	d109      	bne.n	8002a7c <keybeepControlHandler+0x40>
        break;
    case 141:
        soundStopNote();
        break;
    case 161:
        soundStop();
 8002a68:	f7ff feba 	bl	80027e0 <soundStop>
        break;
    }
}
 8002a6c:	e006      	b.n	8002a7c <keybeepControlHandler+0x40>
        soundPlayNote(2485, audiolevel - 3);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a70:	7819      	ldrb	r1, [r3, #0]
 8002a72:	3903      	subs	r1, #3
 8002a74:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a78:	f7ff fece 	bl	8002818 <soundPlayNote>
}
 8002a7c:	bd08      	pop	{r3, pc}
        soundPlayNote(2485, audiolevel - 3);
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <keybeepControlHandler+0x5c>)
 8002a80:	7819      	ldrb	r1, [r3, #0]
 8002a82:	3903      	subs	r1, #3
 8002a84:	f640 10b5 	movw	r0, #2485	; 0x9b5
 8002a88:	f7ff fec6 	bl	8002818 <soundPlayNote>
        break;
 8002a8c:	e7f6      	b.n	8002a7c <keybeepControlHandler+0x40>
        soundStopNote();
 8002a8e:	f7ff fefb 	bl	8002888 <soundStopNote>
        break;
 8002a92:	e7f3      	b.n	8002a7c <keybeepControlHandler+0x40>
 8002a94:	20000268 	.word	0x20000268
 8002a98:	20000264 	.word	0x20000264

08002a9c <hialarmControlHandler>:

void hialarmControlHandler() {
 8002a9c:	b508      	push	{r3, lr}
    uint16_t toneburst_local;

    if (toneburst < 2000) {
 8002a9e:	4b91      	ldr	r3, [pc, #580]	; (8002ce4 <hialarmControlHandler+0x248>)
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002aa6:	d302      	bcc.n	8002aae <hialarmControlHandler+0x12>
        toneburst_local = toneburst;
    } else {
        toneburst_local = toneburst - 2000;
 8002aa8:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002aac:	b29b      	uxth	r3, r3
    }

    switch (toneburst_local) {
 8002aae:	f240 2209 	movw	r2, #521	; 0x209
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f000 80d7 	beq.w	8002c66 <hialarmControlHandler+0x1ca>
 8002ab8:	d843      	bhi.n	8002b42 <hialarmControlHandler+0xa6>
 8002aba:	2bfb      	cmp	r3, #251	; 0xfb
 8002abc:	f000 80ab 	beq.w	8002c16 <hialarmControlHandler+0x17a>
 8002ac0:	d919      	bls.n	8002af6 <hialarmControlHandler+0x5a>
 8002ac2:	f240 12af 	movw	r2, #431	; 0x1af
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f000 80b5 	beq.w	8002c36 <hialarmControlHandler+0x19a>
 8002acc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ad0:	d327      	bcc.n	8002b22 <hialarmControlHandler+0x86>
 8002ad2:	f240 12f5 	movw	r2, #501	; 0x1f5
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	f000 80b5 	beq.w	8002c46 <hialarmControlHandler+0x1aa>
 8002adc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	f000 80b8 	beq.w	8002c56 <hialarmControlHandler+0x1ba>
 8002ae6:	f240 12b9 	movw	r2, #441	; 0x1b9
 8002aea:	4293      	cmp	r3, r2
 8002aec:	f040 8082 	bne.w	8002bf4 <hialarmControlHandler+0x158>
        break;
    case    431:
        soundPlayNote(2790, audiolevel - 3);
        break;
    case    441:
        soundStopNote();
 8002af0:	f7ff feca 	bl	8002888 <soundStopNote>
        break;
 8002af4:	e07e      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002af6:	2b14      	cmp	r3, #20
 8002af8:	d07d      	beq.n	8002bf6 <hialarmControlHandler+0x15a>
 8002afa:	d80b      	bhi.n	8002b14 <hialarmControlHandler+0x78>
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d072      	beq.n	8002be6 <hialarmControlHandler+0x14a>
 8002b00:	2b0a      	cmp	r3, #10
 8002b02:	d177      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002b04:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b06:	7819      	ldrb	r1, [r3, #0]
 8002b08:	3903      	subs	r1, #3
 8002b0a:	f240 601e 	movw	r0, #1566	; 0x61e
 8002b0e:	f7ff fe83 	bl	8002818 <soundPlayNote>
        break;
 8002b12:	e06f      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b14:	2bb5      	cmp	r3, #181	; 0xb5
 8002b16:	d076      	beq.n	8002c06 <hialarmControlHandler+0x16a>
 8002b18:	2bbf      	cmp	r3, #191	; 0xbf
 8002b1a:	d16b      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002b1c:	f7ff feb4 	bl	8002888 <soundStopNote>
        break;
 8002b20:	e068      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b22:	f240 1205 	movw	r2, #261	; 0x105
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d07d      	beq.n	8002c26 <hialarmControlHandler+0x18a>
 8002b2a:	f240 120f 	movw	r2, #271	; 0x10f
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d160      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 1);
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b34:	7819      	ldrb	r1, [r3, #0]
 8002b36:	3901      	subs	r1, #1
 8002b38:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002b3c:	f7ff fe6c 	bl	8002818 <soundPlayNote>
        break;
 8002b40:	e058      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b42:	f240 429d 	movw	r2, #1181	; 0x49d
 8002b46:	4293      	cmp	r3, r2
 8002b48:	f000 80ad 	beq.w	8002ca6 <hialarmControlHandler+0x20a>
 8002b4c:	d91b      	bls.n	8002b86 <hialarmControlHandler+0xea>
 8002b4e:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002b52:	4293      	cmp	r3, r2
 8002b54:	f000 80b2 	beq.w	8002cbc <hialarmControlHandler+0x220>
 8002b58:	d935      	bls.n	8002bc6 <hialarmControlHandler+0x12a>
 8002b5a:	f240 5297 	movw	r2, #1431	; 0x597
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	f000 80b4 	beq.w	8002ccc <hialarmControlHandler+0x230>
 8002b64:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	f000 80b7 	beq.w	8002cdc <hialarmControlHandler+0x240>
 8002b6e:	f240 42f6 	movw	r2, #1270	; 0x4f6
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d13e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        break;
    case    1260:
        soundPlayNote(2790, audiolevel - 3);
        break;
    case    1270:
        soundPlayNote(2790, audiolevel - 1);
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002b78:	7819      	ldrb	r1, [r3, #0]
 8002b7a:	3901      	subs	r1, #1
 8002b7c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002b80:	f7ff fe4a 	bl	8002818 <soundPlayNote>
        break;
 8002b84:	e036      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002b86:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d07b      	beq.n	8002c86 <hialarmControlHandler+0x1ea>
 8002b8e:	d80a      	bhi.n	8002ba6 <hialarmControlHandler+0x10a>
 8002b90:	f240 22a9 	movw	r2, #681	; 0x2a9
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d06e      	beq.n	8002c76 <hialarmControlHandler+0x1da>
 8002b98:	f240 22b3 	movw	r2, #691	; 0x2b3
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d129      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002ba0:	f7ff fe72 	bl	8002888 <soundStopNote>
        break;
 8002ba4:	e026      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002ba6:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d073      	beq.n	8002c96 <hialarmControlHandler+0x1fa>
 8002bae:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 1);
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bb8:	7819      	ldrb	r1, [r3, #0]
 8002bba:	3901      	subs	r1, #1
 8002bbc:	f240 601e 	movw	r0, #1566	; 0x61e
 8002bc0:	f7ff fe2a 	bl	8002818 <soundPlayNote>
        break;
 8002bc4:	e016      	b.n	8002bf4 <hialarmControlHandler+0x158>
    switch (toneburst_local) {
 8002bc6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d073      	beq.n	8002cb6 <hialarmControlHandler+0x21a>
 8002bce:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d10e      	bne.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 4);
 8002bd6:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bd8:	7819      	ldrb	r1, [r3, #0]
 8002bda:	3904      	subs	r1, #4
 8002bdc:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002be0:	f7ff fe1a 	bl	8002818 <soundPlayNote>
        break;
 8002be4:	e006      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 4);
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002be8:	7819      	ldrb	r1, [r3, #0]
 8002bea:	3904      	subs	r1, #4
 8002bec:	f240 601e 	movw	r0, #1566	; 0x61e
 8002bf0:	f7ff fe12 	bl	8002818 <soundPlayNote>
        break;
    case    1441:
        soundStopNote();
        break;
    }
}
 8002bf4:	bd08      	pop	{r3, pc}
        soundPlayNote(1566, audiolevel - 1);
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002bf8:	7819      	ldrb	r1, [r3, #0]
 8002bfa:	3901      	subs	r1, #1
 8002bfc:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c00:	f7ff fe0a 	bl	8002818 <soundPlayNote>
        break;
 8002c04:	e7f6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c08:	7819      	ldrb	r1, [r3, #0]
 8002c0a:	3903      	subs	r1, #3
 8002c0c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c10:	f7ff fe02 	bl	8002818 <soundPlayNote>
        break;
 8002c14:	e7ee      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 4);
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	3904      	subs	r1, #4
 8002c1c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c20:	f7ff fdfa 	bl	8002818 <soundPlayNote>
        break;
 8002c24:	e7e6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c28:	7819      	ldrb	r1, [r3, #0]
 8002c2a:	3903      	subs	r1, #3
 8002c2c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c30:	f7ff fdf2 	bl	8002818 <soundPlayNote>
        break;
 8002c34:	e7de      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c38:	7819      	ldrb	r1, [r3, #0]
 8002c3a:	3903      	subs	r1, #3
 8002c3c:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002c40:	f7ff fdea 	bl	8002818 <soundPlayNote>
        break;
 8002c44:	e7d6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 4);
 8002c46:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c48:	7819      	ldrb	r1, [r3, #0]
 8002c4a:	3904      	subs	r1, #4
 8002c4c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c50:	f7ff fde2 	bl	8002818 <soundPlayNote>
        break;
 8002c54:	e7ce      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 3);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c58:	7819      	ldrb	r1, [r3, #0]
 8002c5a:	3903      	subs	r1, #3
 8002c5c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c60:	f7ff fdda 	bl	8002818 <soundPlayNote>
        break;
 8002c64:	e7c6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 1);
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c68:	7819      	ldrb	r1, [r3, #0]
 8002c6a:	3901      	subs	r1, #1
 8002c6c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c70:	f7ff fdd2 	bl	8002818 <soundPlayNote>
        break;
 8002c74:	e7be      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2214, audiolevel - 3);
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c78:	7819      	ldrb	r1, [r3, #0]
 8002c7a:	3903      	subs	r1, #3
 8002c7c:	f640 00a6 	movw	r0, #2214	; 0x8a6
 8002c80:	f7ff fdca 	bl	8002818 <soundPlayNote>
        break;
 8002c84:	e7b6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 4);
 8002c86:	4b18      	ldr	r3, [pc, #96]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c88:	7819      	ldrb	r1, [r3, #0]
 8002c8a:	3904      	subs	r1, #4
 8002c8c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002c90:	f7ff fdc2 	bl	8002818 <soundPlayNote>
        break;
 8002c94:	e7ae      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	3903      	subs	r1, #3
 8002c9c:	f240 601e 	movw	r0, #1566	; 0x61e
 8002ca0:	f7ff fdba 	bl	8002818 <soundPlayNote>
        break;
 8002ca4:	e7a6      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(1566, audiolevel - 3);
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002ca8:	7819      	ldrb	r1, [r3, #0]
 8002caa:	3903      	subs	r1, #3
 8002cac:	f240 601e 	movw	r0, #1566	; 0x61e
 8002cb0:	f7ff fdb2 	bl	8002818 <soundPlayNote>
        break;
 8002cb4:	e79e      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002cb6:	f7ff fde7 	bl	8002888 <soundStopNote>
        break;
 8002cba:	e79b      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002cbe:	7819      	ldrb	r1, [r3, #0]
 8002cc0:	3903      	subs	r1, #3
 8002cc2:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002cc6:	f7ff fda7 	bl	8002818 <soundPlayNote>
        break;
 8002cca:	e793      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundPlayNote(2790, audiolevel - 3);
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <hialarmControlHandler+0x24c>)
 8002cce:	7819      	ldrb	r1, [r3, #0]
 8002cd0:	3903      	subs	r1, #3
 8002cd2:	f640 20e6 	movw	r0, #2790	; 0xae6
 8002cd6:	f7ff fd9f 	bl	8002818 <soundPlayNote>
        break;
 8002cda:	e78b      	b.n	8002bf4 <hialarmControlHandler+0x158>
        soundStopNote();
 8002cdc:	f7ff fdd4 	bl	8002888 <soundStopNote>
}
 8002ce0:	e788      	b.n	8002bf4 <hialarmControlHandler+0x158>
 8002ce2:	bf00      	nop
 8002ce4:	20000268 	.word	0x20000268
 8002ce8:	20000264 	.word	0x20000264

08002cec <soundControlHandler>:

//Sound playback control
//Called by TIM6 interrupt handler
void soundControlHandler() {
 8002cec:	b508      	push	{r3, lr}
    switch (currentState) {
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <soundControlHandler+0x44>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d015      	beq.n	8002d22 <soundControlHandler+0x36>
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d016      	beq.n	8002d28 <soundControlHandler+0x3c>
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d002      	beq.n	8002d04 <soundControlHandler+0x18>
        break;
    case sound_hialarm:
        hialarmControlHandler();
        break;
    default:
        soundStop();
 8002cfe:	f7ff fd6f 	bl	80027e0 <soundStop>
 8002d02:	e001      	b.n	8002d08 <soundControlHandler+0x1c>
        beepControlHandler();
 8002d04:	f7ff fdcc 	bl	80028a0 <beepControlHandler>
    }

    toneburst++;
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <soundControlHandler+0x48>)
 8002d0a:	8813      	ldrh	r3, [r2, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	8013      	strh	r3, [r2, #0]

    if (toneburst > 10000) {
 8002d12:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d902      	bls.n	8002d20 <soundControlHandler+0x34>
        toneburst = 0;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <soundControlHandler+0x48>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	801a      	strh	r2, [r3, #0]
    }
}
 8002d20:	bd08      	pop	{r3, pc}
        keybeepControlHandler();
 8002d22:	f7ff fe8b 	bl	8002a3c <keybeepControlHandler>
        break;
 8002d26:	e7ef      	b.n	8002d08 <soundControlHandler+0x1c>
        hialarmControlHandler();
 8002d28:	f7ff feb8 	bl	8002a9c <hialarmControlHandler>
        break;
 8002d2c:	e7ec      	b.n	8002d08 <soundControlHandler+0x1c>
 8002d2e:	bf00      	nop
 8002d30:	20000266 	.word	0x20000266
 8002d34:	20000268 	.word	0x20000268

08002d38 <soundWaveformHandler>:

//Waveform control
//Called by TIM3 interrupt handler
void soundWaveformHandler() {
 8002d38:	b508      	push	{r3, lr}
    uint32_t nextDutyCycle = 0;

    if (audiophase > 0) {
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b12b      	cbz	r3, 8002d4c <soundWaveformHandler+0x14>
        audiophase--;
 8002d40:	3b01      	subs	r3, #1
 8002d42:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d44:	7013      	strb	r3, [r2, #0]
    } else {
        audiophase = 12;
    }

    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d46:	2300      	movs	r3, #0
    uint32_t nextDutyCycle = 0;
 8002d48:	4618      	mov	r0, r3
    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d4a:	e004      	b.n	8002d56 <soundWaveformHandler+0x1e>
        audiophase = 12;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d4e:	220c      	movs	r2, #12
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	e7f8      	b.n	8002d46 <soundWaveformHandler+0xe>
    for (int i = 0; i < WAVEFORM_NUM_STEPS; i++) {
 8002d54:	3301      	adds	r3, #1
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	dc0c      	bgt.n	8002d74 <soundWaveformHandler+0x3c>
        if (audiophase == waveformSteps[i].phase) {
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <soundWaveformHandler+0x48>)
 8002d5c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8002d60:	4a06      	ldr	r2, [pc, #24]	; (8002d7c <soundWaveformHandler+0x44>)
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	4291      	cmp	r1, r2
 8002d66:	d1f5      	bne.n	8002d54 <soundWaveformHandler+0x1c>
            nextDutyCycle = *waveformSteps[i].duty;
 8002d68:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <soundWaveformHandler+0x48>)
 8002d6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002d6e:	6852      	ldr	r2, [r2, #4]
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	e7ef      	b.n	8002d54 <soundWaveformHandler+0x1c>
        }
    }
    soundSetTimerDuty(nextDutyCycle);
 8002d74:	f7ff fd08 	bl	8002788 <soundSetTimerDuty>
}
 8002d78:	bd08      	pop	{r3, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000265 	.word	0x20000265
 8002d80:	0800a9bc 	.word	0x0800a9bc

08002d84 <timerInit>:

static timer_t timer_data;

void timerInit(uint32_t resolution, timerHandler_t handler)
{
	timer_data.resolution = 0;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <timerInit+0x38>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
	timer_data.ticks = 0;
 8002d8a:	601a      	str	r2, [r3, #0]
	timer_data.lastAskTime = 0;
 8002d8c:	605a      	str	r2, [r3, #4]
	timer_data.state = tsActive;
 8002d8e:	2201      	movs	r2, #1
 8002d90:	731a      	strb	r2, [r3, #12]
	timer_data.handler = handler;
 8002d92:	6119      	str	r1, [r3, #16]
	SysTick_Config(SystemCoreClock/resolution);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <timerInit+0x3c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fbb3 f0f0 	udiv	r0, r3, r0
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	3801      	subs	r0, #1
 8002d9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002da2:	d209      	bcs.n	8002db8 <timerInit+0x34>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <timerInit+0x40>)
 8002da6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <timerInit+0x44>)
 8002daa:	21f0      	movs	r1, #240	; 0xf0
 8002dac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db4:	2207      	movs	r2, #7
 8002db6:	601a      	str	r2, [r3, #0]
}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	2000026c 	.word	0x2000026c
 8002dc0:	2000002c 	.word	0x2000002c
 8002dc4:	e000e010 	.word	0xe000e010
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <timerElapseSinceLastTime>:
/**
 * Функция требует использования только при внешнем отключении прерываний!
*/
TIME_T timerElapseSinceLastTime(void)
{
	TIME_T result = timer_data.ticks - timer_data.lastAskTime;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <timerElapseSinceLastTime+0xc>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6858      	ldr	r0, [r3, #4]
	timer_data.lastAskTime = timer_data.ticks;
 8002dd2:	605a      	str	r2, [r3, #4]
	return result;
}
 8002dd4:	1a10      	subs	r0, r2, r0
 8002dd6:	4770      	bx	lr
 8002dd8:	2000026c 	.word	0x2000026c

08002ddc <SysTick_Handler>:


void SysTick_Handler(void)
{
 8002ddc:	b508      	push	{r3, lr}
	// Check operation. Is it atomic?
	timer_data.ticks++;
 8002dde:	4b03      	ldr	r3, [pc, #12]	; (8002dec <SysTick_Handler+0x10>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	3201      	adds	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
	timer_data.handler();
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	4798      	blx	r3
}
 8002dea:	bd08      	pop	{r3, pc}
 8002dec:	2000026c 	.word	0x2000026c

08002df0 <tickHook>:
static bool haveTaskToDo; //TODO search usage of this variable

// TODO Need to implement or do it weak
void tickHook(void)
{
}
 8002df0:	4770      	bx	lr
	...

08002df4 <nearestTaskTime>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i


static TIME_T nearestTaskTime(void){
  ENTER_CRITICAL_SECTION();
  TIME_T time = INVALID_TIME;
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002df6:	2300      	movs	r3, #0
  TIME_T time = INVALID_TIME;
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002dfc:	e005      	b.n	8002e0a <nearestTaskTime+0x16>
    if(tasks[i].state == tskWait){
      time > tasks[i].time?
 8002dfe:	011a      	lsls	r2, r3, #4
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <nearestTaskTime+0x34>)
 8002e02:	588a      	ldr	r2, [r1, r2]
        time = tasks[i].time: 0;
 8002e04:	4282      	cmp	r2, r0
 8002e06:	d30d      	bcc.n	8002e24 <nearestTaskTime+0x30>
  for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002e08:	3301      	adds	r3, #1
 8002e0a:	2b13      	cmp	r3, #19
 8002e0c:	d808      	bhi.n	8002e20 <nearestTaskTime+0x2c>
    if(tasks[i].state == tskWait){
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <nearestTaskTime+0x34>)
 8002e10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002e14:	7b12      	ldrb	r2, [r2, #12]
 8002e16:	2a02      	cmp	r2, #2
 8002e18:	d0f1      	beq.n	8002dfe <nearestTaskTime+0xa>
    }
    else if(tasks[i].state == tskReady){
 8002e1a:	2a01      	cmp	r2, #1
 8002e1c:	d1f4      	bne.n	8002e08 <nearestTaskTime+0x14>
      time = 0;
 8002e1e:	2000      	movs	r0, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002e20:	b662      	cpsie	i
    }
  }
  haveTaskToDo = time == 0;
  EXIT_CRITICAL_SECTION();
  return time;
}
 8002e22:	4770      	bx	lr
        time = tasks[i].time: 0;
 8002e24:	4610      	mov	r0, r2
 8002e26:	e7ef      	b.n	8002e08 <nearestTaskTime+0x14>
 8002e28:	20000280 	.word	0x20000280

08002e2c <recountTasksTime>:


static void recountTasksTime(void){
 8002e2c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2e:	b672      	cpsid	i
  ENTER_CRITICAL_SECTION();
  TIME_T value = timerElapseSinceLastTimeFunction();
 8002e30:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <recountTasksTime+0x60>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4798      	blx	r3
  if(value){
 8002e36:	b338      	cbz	r0, 8002e88 <recountTasksTime+0x5c>
 8002e38:	4604      	mov	r4, r0
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e010      	b.n	8002e60 <recountTasksTime+0x34>
      {
        if(tasks[i].time > 0){
          if(tasks[i].time > value)
            tasks[i].time -= value;
          else
            tasks[i].time = 0;
 8002e3e:	011a      	lsls	r2, r3, #4
 8002e40:	4913      	ldr	r1, [pc, #76]	; (8002e90 <recountTasksTime+0x64>)
 8002e42:	2000      	movs	r0, #0
 8002e44:	5088      	str	r0, [r1, r2]
        }

        if(tasks[i].time == 0 && tasks[i].task){
 8002e46:	011a      	lsls	r2, r3, #4
 8002e48:	4911      	ldr	r1, [pc, #68]	; (8002e90 <recountTasksTime+0x64>)
 8002e4a:	588a      	ldr	r2, [r1, r2]
 8002e4c:	b93a      	cbnz	r2, 8002e5e <recountTasksTime+0x32>
 8002e4e:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 8002e52:	6852      	ldr	r2, [r2, #4]
 8002e54:	b11a      	cbz	r2, 8002e5e <recountTasksTime+0x32>
          haveTaskToDo = true;
          tasks[i].state = tskReady;
 8002e56:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	7311      	strb	r1, [r2, #12]
    for(taskId_t i = 0; i < MAX_TASKS; ++i)
 8002e5e:	3301      	adds	r3, #1
 8002e60:	2b13      	cmp	r3, #19
 8002e62:	d811      	bhi.n	8002e88 <recountTasksTime+0x5c>
      if(tasks[i].state == tskWait)
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <recountTasksTime+0x64>)
 8002e66:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002e6a:	7b12      	ldrb	r2, [r2, #12]
 8002e6c:	2a02      	cmp	r2, #2
 8002e6e:	d1f6      	bne.n	8002e5e <recountTasksTime+0x32>
        if(tasks[i].time > 0){
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	4907      	ldr	r1, [pc, #28]	; (8002e90 <recountTasksTime+0x64>)
 8002e74:	588a      	ldr	r2, [r1, r2]
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	d0e5      	beq.n	8002e46 <recountTasksTime+0x1a>
          if(tasks[i].time > value)
 8002e7a:	42a2      	cmp	r2, r4
 8002e7c:	d9df      	bls.n	8002e3e <recountTasksTime+0x12>
            tasks[i].time -= value;
 8002e7e:	0119      	lsls	r1, r3, #4
 8002e80:	1b12      	subs	r2, r2, r4
 8002e82:	4803      	ldr	r0, [pc, #12]	; (8002e90 <recountTasksTime+0x64>)
 8002e84:	5042      	str	r2, [r0, r1]
 8002e86:	e7de      	b.n	8002e46 <recountTasksTime+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e88:	b662      	cpsie	i
        }
      }
    }
  }
  EXIT_CRITICAL_SECTION();
}
 8002e8a:	bd10      	pop	{r4, pc}
 8002e8c:	200003c0 	.word	0x200003c0
 8002e90:	20000280 	.word	0x20000280

08002e94 <osInit>:
{
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	460d      	mov	r5, r1
 8002e98:	4614      	mov	r4, r2
	  for(i = 0; i < MAX_TASKS; ++i)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e005      	b.n	8002eaa <osInit+0x16>
	    tasks[i].state = tskFree;
 8002e9e:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <osInit+0x24>)
 8002ea0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	7311      	strb	r1, [r2, #12]
	  for(i = 0; i < MAX_TASKS; ++i)
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	2b13      	cmp	r3, #19
 8002eac:	d9f7      	bls.n	8002e9e <osInit+0xa>
	timerInitialization(resolution, tickHook);
 8002eae:	4903      	ldr	r1, [pc, #12]	; (8002ebc <osInit+0x28>)
 8002eb0:	47a8      	blx	r5
	timerElapseSinceLastTimeFunction = timerElapsedTime;
 8002eb2:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <osInit+0x2c>)
 8002eb4:	601c      	str	r4, [r3, #0]
}
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000280 	.word	0x20000280
 8002ebc:	08002df1 	.word	0x08002df1
 8002ec0:	200003c0 	.word	0x200003c0

08002ec4 <osRun>:
void osRun(void){
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	e016      	b.n	8002ef6 <osRun+0x32>
 8002ec8:	b662      	cpsie	i
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002eca:	3401      	adds	r4, #1
 8002ecc:	2c13      	cmp	r4, #19
 8002ece:	d810      	bhi.n	8002ef2 <osRun+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed0:	b672      	cpsid	i
        if(tasks[i].state == tskReady){
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <osRun+0x3c>)
 8002ed4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ed8:	7b1b      	ldrb	r3, [r3, #12]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d1f4      	bne.n	8002ec8 <osRun+0x4>
          task_t task = tasks[i].task;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <osRun+0x3c>)
 8002ee0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002ee4:	685a      	ldr	r2, [r3, #4]
          uint32_t param = tasks[i].param;
 8002ee6:	6898      	ldr	r0, [r3, #8]
          tasks[i].state = tskFree;
 8002ee8:	2100      	movs	r1, #0
 8002eea:	7319      	strb	r1, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eec:	b662      	cpsie	i
          task(param);
 8002eee:	4790      	blx	r2
 8002ef0:	e7eb      	b.n	8002eca <osRun+0x6>
      nextTaskTime = nearestTaskTime();
 8002ef2:	f7ff ff7f 	bl	8002df4 <nearestTaskTime>
      recountTasksTime();
 8002ef6:	f7ff ff99 	bl	8002e2c <recountTasksTime>
      for(taskId_t i = 0; i < MAX_TASKS; ++i){
 8002efa:	2400      	movs	r4, #0
 8002efc:	e7e6      	b.n	8002ecc <osRun+0x8>
 8002efe:	bf00      	nop
 8002f00:	20000280 	.word	0x20000280

08002f04 <osTaskAdd>:
taskId_t osTaskAdd(task_t task, uint32_t param, TIME_T time){
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002f06:	b672      	cpsid	i
  for(slot = 0; slot < MAX_TASKS; ++slot){
 8002f08:	2400      	movs	r4, #0
 8002f0a:	2c13      	cmp	r4, #19
 8002f0c:	d806      	bhi.n	8002f1c <osTaskAdd+0x18>
    if(tasks[slot].state == tskFree){
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <osTaskAdd+0x4c>)
 8002f10:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	b10b      	cbz	r3, 8002f1c <osTaskAdd+0x18>
  for(slot = 0; slot < MAX_TASKS; ++slot){
 8002f18:	3401      	adds	r4, #1
 8002f1a:	e7f6      	b.n	8002f0a <osTaskAdd+0x6>
  if(idx < MAX_TASKS){
 8002f1c:	2c13      	cmp	r4, #19
 8002f1e:	d902      	bls.n	8002f26 <osTaskAdd+0x22>
  __ASM volatile ("cpsie i" : : : "memory");
 8002f20:	b662      	cpsie	i
}
 8002f22:	4620      	mov	r0, r4
 8002f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f26:	4617      	mov	r7, r2
 8002f28:	460d      	mov	r5, r1
 8002f2a:	4606      	mov	r6, r0
    recountTasksTime();
 8002f2c:	f7ff ff7e 	bl	8002e2c <recountTasksTime>
    tasks[idx].task = task;
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <osTaskAdd+0x4c>)
 8002f32:	0123      	lsls	r3, r4, #4
 8002f34:	18d1      	adds	r1, r2, r3
 8002f36:	604e      	str	r6, [r1, #4]
    tasks[idx].param = param;
 8002f38:	608d      	str	r5, [r1, #8]
    tasks[idx].time = time;
 8002f3a:	50d7      	str	r7, [r2, r3]
                            : tskReady, haveTaskToDo = true;
 8002f3c:	b12f      	cbz	r7, 8002f4a <osTaskAdd+0x46>
 8002f3e:	2202      	movs	r2, #2
    tasks[idx].state = time ? tskWait
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <osTaskAdd+0x4c>)
 8002f42:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8002f46:	731a      	strb	r2, [r3, #12]
 8002f48:	e7ea      	b.n	8002f20 <osTaskAdd+0x1c>
                            : tskReady, haveTaskToDo = true;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	e7f8      	b.n	8002f40 <osTaskAdd+0x3c>
 8002f4e:	bf00      	nop
 8002f50:	20000280 	.word	0x20000280

08002f54 <osTaskDelId>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
  if(id < MAX_TASKS && tasks[id].task == handler){
 8002f56:	2813      	cmp	r0, #19
 8002f58:	d813      	bhi.n	8002f82 <osTaskDelId+0x2e>
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <osTaskDelId+0x34>)
 8002f5c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d001      	beq.n	8002f6a <osTaskDelId+0x16>
  uint32_t result = 0;
 8002f66:	2000      	movs	r0, #0
 8002f68:	e00c      	b.n	8002f84 <osTaskDelId+0x30>
    tasks[id].time = 0;
 8002f6a:	4907      	ldr	r1, [pc, #28]	; (8002f88 <osTaskDelId+0x34>)
 8002f6c:	0100      	lsls	r0, r0, #4
 8002f6e:	180b      	adds	r3, r1, r0
 8002f70:	2200      	movs	r2, #0
 8002f72:	500a      	str	r2, [r1, r0]
    tasks[id].task = 0;
 8002f74:	605a      	str	r2, [r3, #4]
    tasks[id].state = tskFree;
 8002f76:	731a      	strb	r2, [r3, #12]
    tasks[id].param= 0xDE1D;
 8002f78:	f64d 621d 	movw	r2, #56861	; 0xde1d
 8002f7c:	609a      	str	r2, [r3, #8]
    result = 1;
 8002f7e:	2001      	movs	r0, #1
 8002f80:	e000      	b.n	8002f84 <osTaskDelId+0x30>
  uint32_t result = 0;
 8002f82:	2000      	movs	r0, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8002f84:	b662      	cpsie	i
}
 8002f86:	4770      	bx	lr
 8002f88:	20000280 	.word	0x20000280

08002f8c <osTaskDelHandler>:
uint32_t osTaskDelHandler(task_t task){
 8002f8c:	b470      	push	{r4, r5, r6}
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8e:	b672      	cpsid	i
  for (int i = 0; i < MAX_TASKS; ++i){
 8002f90:	2300      	movs	r3, #0
  uint32_t result = 0;
 8002f92:	461e      	mov	r6, r3
  for (int i = 0; i < MAX_TASKS; ++i){
 8002f94:	e000      	b.n	8002f98 <osTaskDelHandler+0xc>
 8002f96:	3301      	adds	r3, #1
 8002f98:	2b13      	cmp	r3, #19
 8002f9a:	dc17      	bgt.n	8002fcc <osTaskDelHandler+0x40>
    if(tasks[i].state != tskFree && tasks[i].task == task){
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002f9e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002fa2:	7b12      	ldrb	r2, [r2, #12]
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d0f6      	beq.n	8002f96 <osTaskDelHandler+0xa>
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002faa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	4282      	cmp	r2, r0
 8002fb2:	d1f0      	bne.n	8002f96 <osTaskDelHandler+0xa>
      tasks[i].state = tskFree;
 8002fb4:	4d07      	ldr	r5, [pc, #28]	; (8002fd4 <osTaskDelHandler+0x48>)
 8002fb6:	011c      	lsls	r4, r3, #4
 8002fb8:	192a      	adds	r2, r5, r4
 8002fba:	2100      	movs	r1, #0
 8002fbc:	7311      	strb	r1, [r2, #12]
      tasks[i].task = 0;
 8002fbe:	6051      	str	r1, [r2, #4]
      tasks[i].time = 0;
 8002fc0:	5129      	str	r1, [r5, r4]
      tasks[i].param= 0x0DE1;
 8002fc2:	f640 51e1 	movw	r1, #3553	; 0xde1
 8002fc6:	6091      	str	r1, [r2, #8]
      result++;
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7e4      	b.n	8002f96 <osTaskDelHandler+0xa>
  __ASM volatile ("cpsie i" : : : "memory");
 8002fcc:	b662      	cpsie	i
}
 8002fce:	4630      	mov	r0, r6
 8002fd0:	bc70      	pop	{r4, r5, r6}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000280 	.word	0x20000280

08002fd8 <button6Init>:
    return (buttonsGetState() & (1 << buttonId))? BUTTON_PRESSED: BUTTON_NOT_PRESSED;
}

static void button6Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_6);
}
 8002fd8:	4770      	bx	lr

08002fda <button7Init>:

static void button7Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_7);
}
 8002fda:	4770      	bx	lr

08002fdc <button8Init>:

static void button8Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_8);
}
 8002fdc:	4770      	bx	lr

08002fde <button9Init>:

static void button9Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_9);
}
 8002fde:	4770      	bx	lr

08002fe0 <button0Init>:

static void button0Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_0);
}
 8002fe0:	4770      	bx	lr

08002fe2 <buttonInfoInit>:

static void buttonInfoInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Info);
}
 8002fe2:	4770      	bx	lr

08002fe4 <buttonPrimeInit>:

static void buttonPrimeInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Prime);
}
 8002fe4:	4770      	bx	lr

08002fe6 <buttonLockInit>:

static void buttonLockInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Lock);
}
 8002fe6:	4770      	bx	lr

08002fe8 <button1Init>:

static void button1Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_1);
}
 8002fe8:	4770      	bx	lr

08002fea <button2Init>:

static void button2Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_2);
}
 8002fea:	4770      	bx	lr

08002fec <button3Init>:

static void button3Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_3);
}
 8002fec:	4770      	bx	lr

08002fee <button4Init>:

static void button4Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_4);
}
 8002fee:	4770      	bx	lr

08002ff0 <button5Init>:

static void button5Init(buttonInitState_t state) {
    buttonInitCommon(state, Button_5);
}
 8002ff0:	4770      	bx	lr

08002ff2 <buttonPointInit>:

static void buttonPointInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Point);
}
 8002ff2:	4770      	bx	lr

08002ff4 <buttonOkInit>:

static void buttonOkInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Ok);
}
 8002ff4:	4770      	bx	lr

08002ff6 <buttonNoInit>:

static void buttonNoInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_No);
}
 8002ff6:	4770      	bx	lr

08002ff8 <buttonPowerInit>:

static void buttonPowerInit(buttonInitState_t state) {
    buttonInitCommon(state, Button_Power);
}
 8002ff8:	4770      	bx	lr
	...

08002ffc <buttonPowerHandler>:

static void buttonNoHandler(uint32_t pressType) {
    osTaskDelHandler(buttonNoHandler);
}

static void buttonPowerHandler(uint32_t pressType) {
 8002ffc:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPowerHandler);
 8002ffe:	4802      	ldr	r0, [pc, #8]	; (8003008 <buttonPowerHandler+0xc>)
 8003000:	f7ff ffc4 	bl	8002f8c <osTaskDelHandler>
}
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	08002ffd 	.word	0x08002ffd

0800300c <buttonNoHandler>:
static void buttonNoHandler(uint32_t pressType) {
 800300c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonNoHandler);
 800300e:	4802      	ldr	r0, [pc, #8]	; (8003018 <buttonNoHandler+0xc>)
 8003010:	f7ff ffbc 	bl	8002f8c <osTaskDelHandler>
}
 8003014:	bd08      	pop	{r3, pc}
 8003016:	bf00      	nop
 8003018:	0800300d 	.word	0x0800300d

0800301c <buttonOkHandler>:
static void buttonOkHandler(uint32_t pressType) {
 800301c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonOkHandler);
 800301e:	4802      	ldr	r0, [pc, #8]	; (8003028 <buttonOkHandler+0xc>)
 8003020:	f7ff ffb4 	bl	8002f8c <osTaskDelHandler>
}
 8003024:	bd08      	pop	{r3, pc}
 8003026:	bf00      	nop
 8003028:	0800301d 	.word	0x0800301d

0800302c <buttonPointHandler>:
static void buttonPointHandler(uint32_t pressType) {
 800302c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPointHandler);
 800302e:	4802      	ldr	r0, [pc, #8]	; (8003038 <buttonPointHandler+0xc>)
 8003030:	f7ff ffac 	bl	8002f8c <osTaskDelHandler>
}
 8003034:	bd08      	pop	{r3, pc}
 8003036:	bf00      	nop
 8003038:	0800302d 	.word	0x0800302d

0800303c <button5Handler>:
static void button5Handler(uint32_t pressType) {
 800303c:	b508      	push	{r3, lr}
    osTaskDelHandler(button5Handler);
 800303e:	4802      	ldr	r0, [pc, #8]	; (8003048 <button5Handler+0xc>)
 8003040:	f7ff ffa4 	bl	8002f8c <osTaskDelHandler>
}
 8003044:	bd08      	pop	{r3, pc}
 8003046:	bf00      	nop
 8003048:	0800303d 	.word	0x0800303d

0800304c <button4Handler>:
static void button4Handler(uint32_t pressType) {
 800304c:	b508      	push	{r3, lr}
    osTaskDelHandler(button4Handler);
 800304e:	4802      	ldr	r0, [pc, #8]	; (8003058 <button4Handler+0xc>)
 8003050:	f7ff ff9c 	bl	8002f8c <osTaskDelHandler>
}
 8003054:	bd08      	pop	{r3, pc}
 8003056:	bf00      	nop
 8003058:	0800304d 	.word	0x0800304d

0800305c <button3Handler>:
static void button3Handler(uint32_t pressType) {
 800305c:	b508      	push	{r3, lr}
    osTaskDelHandler(button3Handler);
 800305e:	4802      	ldr	r0, [pc, #8]	; (8003068 <button3Handler+0xc>)
 8003060:	f7ff ff94 	bl	8002f8c <osTaskDelHandler>
}
 8003064:	bd08      	pop	{r3, pc}
 8003066:	bf00      	nop
 8003068:	0800305d 	.word	0x0800305d

0800306c <button2Handler>:
static void button2Handler(uint32_t pressType) {
 800306c:	b508      	push	{r3, lr}
    osTaskDelHandler(button2Handler);
 800306e:	4802      	ldr	r0, [pc, #8]	; (8003078 <button2Handler+0xc>)
 8003070:	f7ff ff8c 	bl	8002f8c <osTaskDelHandler>
}
 8003074:	bd08      	pop	{r3, pc}
 8003076:	bf00      	nop
 8003078:	0800306d 	.word	0x0800306d

0800307c <button1Handler>:
static void button1Handler(uint32_t pressType) {
 800307c:	b508      	push	{r3, lr}
    osTaskDelHandler(button1Handler);
 800307e:	4802      	ldr	r0, [pc, #8]	; (8003088 <button1Handler+0xc>)
 8003080:	f7ff ff84 	bl	8002f8c <osTaskDelHandler>
}
 8003084:	bd08      	pop	{r3, pc}
 8003086:	bf00      	nop
 8003088:	0800307d 	.word	0x0800307d

0800308c <buttonLockHandler>:
static void buttonLockHandler(uint32_t pressType) {
 800308c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonLockHandler);
 800308e:	4802      	ldr	r0, [pc, #8]	; (8003098 <buttonLockHandler+0xc>)
 8003090:	f7ff ff7c 	bl	8002f8c <osTaskDelHandler>
}
 8003094:	bd08      	pop	{r3, pc}
 8003096:	bf00      	nop
 8003098:	0800308d 	.word	0x0800308d

0800309c <buttonPrimeHandler>:
static void buttonPrimeHandler(uint32_t pressType) {
 800309c:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonPrimeHandler);
 800309e:	4802      	ldr	r0, [pc, #8]	; (80030a8 <buttonPrimeHandler+0xc>)
 80030a0:	f7ff ff74 	bl	8002f8c <osTaskDelHandler>
}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	0800309d 	.word	0x0800309d

080030ac <buttonInfoHandler>:
static void buttonInfoHandler(uint32_t pressType) {
 80030ac:	b508      	push	{r3, lr}
    osTaskDelHandler(buttonInfoHandler);
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <buttonInfoHandler+0xc>)
 80030b0:	f7ff ff6c 	bl	8002f8c <osTaskDelHandler>
}
 80030b4:	bd08      	pop	{r3, pc}
 80030b6:	bf00      	nop
 80030b8:	080030ad 	.word	0x080030ad

080030bc <button0Handler>:
static void button0Handler(uint32_t pressType) {
 80030bc:	b508      	push	{r3, lr}
    osTaskDelHandler(button0Handler);
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <button0Handler+0xc>)
 80030c0:	f7ff ff64 	bl	8002f8c <osTaskDelHandler>
}
 80030c4:	bd08      	pop	{r3, pc}
 80030c6:	bf00      	nop
 80030c8:	080030bd 	.word	0x080030bd

080030cc <button9Handler>:
static void button9Handler(uint32_t pressType) {
 80030cc:	b508      	push	{r3, lr}
    osTaskDelHandler(button9Handler);
 80030ce:	4802      	ldr	r0, [pc, #8]	; (80030d8 <button9Handler+0xc>)
 80030d0:	f7ff ff5c 	bl	8002f8c <osTaskDelHandler>
}
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	080030cd 	.word	0x080030cd

080030dc <button8Handler>:
static void button8Handler(uint32_t pressType) {
 80030dc:	b508      	push	{r3, lr}
    osTaskDelHandler(button8Handler);
 80030de:	4802      	ldr	r0, [pc, #8]	; (80030e8 <button8Handler+0xc>)
 80030e0:	f7ff ff54 	bl	8002f8c <osTaskDelHandler>
}
 80030e4:	bd08      	pop	{r3, pc}
 80030e6:	bf00      	nop
 80030e8:	080030dd 	.word	0x080030dd

080030ec <button7Handler>:
static void button7Handler(uint32_t pressType) {
 80030ec:	b508      	push	{r3, lr}
    osTaskDelHandler(button7Handler);
 80030ee:	4802      	ldr	r0, [pc, #8]	; (80030f8 <button7Handler+0xc>)
 80030f0:	f7ff ff4c 	bl	8002f8c <osTaskDelHandler>
}
 80030f4:	bd08      	pop	{r3, pc}
 80030f6:	bf00      	nop
 80030f8:	080030ed 	.word	0x080030ed

080030fc <button6Handler>:
static void button6Handler(uint32_t pressType) {
 80030fc:	b508      	push	{r3, lr}
    osTaskDelHandler(button6Handler);
 80030fe:	4802      	ldr	r0, [pc, #8]	; (8003108 <button6Handler+0xc>)
 8003100:	f7ff ff44 	bl	8002f8c <osTaskDelHandler>
}
 8003104:	bd08      	pop	{r3, pc}
 8003106:	bf00      	nop
 8003108:	080030fd 	.word	0x080030fd

0800310c <buttonGetState>:
static buttonState_t buttonGetState(buttonName_t buttonId) {
 800310c:	b510      	push	{r4, lr}
 800310e:	4604      	mov	r4, r0
    return (buttonsGetState() & (1 << buttonId))? BUTTON_PRESSED: BUTTON_NOT_PRESSED;
 8003110:	f000 f860 	bl	80031d4 <buttonsGetState>
 8003114:	2301      	movs	r3, #1
 8003116:	40a3      	lsls	r3, r4
 8003118:	4218      	tst	r0, r3
}
 800311a:	bf14      	ite	ne
 800311c:	2001      	movne	r0, #1
 800311e:	2000      	moveq	r0, #0
 8003120:	bd10      	pop	{r4, pc}

08003122 <buttonPowerGetState>:
static buttonState_t buttonPowerGetState(void) {
 8003122:	b508      	push	{r3, lr}
    return buttonGetState(Button_Power);
 8003124:	2010      	movs	r0, #16
 8003126:	f7ff fff1 	bl	800310c <buttonGetState>
}
 800312a:	bd08      	pop	{r3, pc}

0800312c <buttonNoGetState>:
static buttonState_t buttonNoGetState(void) {
 800312c:	b508      	push	{r3, lr}
    return buttonGetState(Button_No);
 800312e:	200f      	movs	r0, #15
 8003130:	f7ff ffec 	bl	800310c <buttonGetState>
}
 8003134:	bd08      	pop	{r3, pc}

08003136 <buttonOkGetState>:
static buttonState_t buttonOkGetState(void) {
 8003136:	b508      	push	{r3, lr}
    return buttonGetState(Button_Ok);
 8003138:	200e      	movs	r0, #14
 800313a:	f7ff ffe7 	bl	800310c <buttonGetState>
}
 800313e:	bd08      	pop	{r3, pc}

08003140 <buttonPointGetState>:
static buttonState_t buttonPointGetState(void) {
 8003140:	b508      	push	{r3, lr}
    return buttonGetState(Button_Point);
 8003142:	200d      	movs	r0, #13
 8003144:	f7ff ffe2 	bl	800310c <buttonGetState>
}
 8003148:	bd08      	pop	{r3, pc}

0800314a <button5GetState>:
static buttonState_t button5GetState(void) {
 800314a:	b508      	push	{r3, lr}
    return buttonGetState(Button_5);
 800314c:	200c      	movs	r0, #12
 800314e:	f7ff ffdd 	bl	800310c <buttonGetState>
}
 8003152:	bd08      	pop	{r3, pc}

08003154 <button4GetState>:
static buttonState_t button4GetState(void) {
 8003154:	b508      	push	{r3, lr}
    return buttonGetState(Button_4);
 8003156:	200b      	movs	r0, #11
 8003158:	f7ff ffd8 	bl	800310c <buttonGetState>
}
 800315c:	bd08      	pop	{r3, pc}

0800315e <button3GetState>:
static buttonState_t button3GetState(void) {
 800315e:	b508      	push	{r3, lr}
    return buttonGetState(Button_3);
 8003160:	200a      	movs	r0, #10
 8003162:	f7ff ffd3 	bl	800310c <buttonGetState>
}
 8003166:	bd08      	pop	{r3, pc}

08003168 <button2GetState>:
static buttonState_t button2GetState(void) {
 8003168:	b508      	push	{r3, lr}
    return buttonGetState(Button_2);
 800316a:	2009      	movs	r0, #9
 800316c:	f7ff ffce 	bl	800310c <buttonGetState>
}
 8003170:	bd08      	pop	{r3, pc}

08003172 <button1GetState>:
static buttonState_t button1GetState(void) {
 8003172:	b508      	push	{r3, lr}
    return buttonGetState(Button_1);
 8003174:	2008      	movs	r0, #8
 8003176:	f7ff ffc9 	bl	800310c <buttonGetState>
}
 800317a:	bd08      	pop	{r3, pc}

0800317c <buttonLockGetState>:
static buttonState_t buttonLockGetState(void) {
 800317c:	b508      	push	{r3, lr}
    return buttonGetState(Button_Lock);
 800317e:	2007      	movs	r0, #7
 8003180:	f7ff ffc4 	bl	800310c <buttonGetState>
}
 8003184:	bd08      	pop	{r3, pc}

08003186 <buttonPrimeGetState>:
static buttonState_t buttonPrimeGetState(void) {
 8003186:	b508      	push	{r3, lr}
    return buttonGetState(Button_Prime);
 8003188:	2006      	movs	r0, #6
 800318a:	f7ff ffbf 	bl	800310c <buttonGetState>
}
 800318e:	bd08      	pop	{r3, pc}

08003190 <buttonInfoGetState>:
static buttonState_t buttonInfoGetState(void) {
 8003190:	b508      	push	{r3, lr}
    return buttonGetState(Button_Info);
 8003192:	2005      	movs	r0, #5
 8003194:	f7ff ffba 	bl	800310c <buttonGetState>
}
 8003198:	bd08      	pop	{r3, pc}

0800319a <button0GetState>:
static buttonState_t button0GetState(void) {
 800319a:	b508      	push	{r3, lr}
    return buttonGetState(Button_0);
 800319c:	2004      	movs	r0, #4
 800319e:	f7ff ffb5 	bl	800310c <buttonGetState>
}
 80031a2:	bd08      	pop	{r3, pc}

080031a4 <button9GetState>:
static buttonState_t button9GetState(void) {
 80031a4:	b508      	push	{r3, lr}
    return buttonGetState(Button_9);
 80031a6:	2003      	movs	r0, #3
 80031a8:	f7ff ffb0 	bl	800310c <buttonGetState>
}
 80031ac:	bd08      	pop	{r3, pc}

080031ae <button8GetState>:
static buttonState_t button8GetState(void) {
 80031ae:	b508      	push	{r3, lr}
    return buttonGetState(Button_8);
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7ff ffab 	bl	800310c <buttonGetState>
}
 80031b6:	bd08      	pop	{r3, pc}

080031b8 <button7GetState>:
static buttonState_t button7GetState(void) {
 80031b8:	b508      	push	{r3, lr}
    return buttonGetState(Button_7);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff ffa6 	bl	800310c <buttonGetState>
}
 80031c0:	bd08      	pop	{r3, pc}

080031c2 <button6GetState>:
static buttonState_t button6GetState(void) {
 80031c2:	b508      	push	{r3, lr}
    return buttonGetState(Button_6);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7ff ffa1 	bl	800310c <buttonGetState>
}
 80031ca:	bd08      	pop	{r3, pc}

080031cc <getButtonsConfig>:
}
 80031cc:	4800      	ldr	r0, [pc, #0]	; (80031d0 <getButtonsConfig+0x4>)
 80031ce:	4770      	bx	lr
 80031d0:	0800a9ec 	.word	0x0800a9ec

080031d4 <buttonsGetState>:

static uint32_t buttonsState;

uint32_t buttonsGetState(void) {
    return buttonsState;
}
 80031d4:	4b01      	ldr	r3, [pc, #4]	; (80031dc <buttonsGetState+0x8>)
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	200003c8 	.word	0x200003c8

080031e0 <getRawButtonsState>:

uint32_t getRawButtonsState() {
 80031e0:	b082      	sub	sp, #8
    volatile uint32_t tmp = GPIOE->IDR & 0xFF;
 80031e2:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <getRawButtonsState+0x10>)
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	9301      	str	r3, [sp, #4]
    return tmp;
 80031ea:	9801      	ldr	r0, [sp, #4]
}
 80031ec:	b002      	add	sp, #8
 80031ee:	4770      	bx	lr
 80031f0:	48001000 	.word	0x48001000

080031f4 <getPwrButtonState>:

uint32_t getPwrButtonState() {
    if ((GPIOB->IDR & (1 << 5)) != 0) {
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <getPwrButtonState+0x14>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f013 0f20 	tst.w	r3, #32
 80031fc:	d101      	bne.n	8003202 <getPwrButtonState+0xe>
        return 0;
    } else {
        return 1;
 80031fe:	2001      	movs	r0, #1
    }
}
 8003200:	4770      	bx	lr
        return 0;
 8003202:	2000      	movs	r0, #0
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	48000400 	.word	0x48000400

0800320c <activateButtonColumn>:

void activateButtonColumn(uint8_t column) {
    switch (column) {
 800320c:	b110      	cbz	r0, 8003214 <activateButtonColumn+0x8>
 800320e:	2801      	cmp	r0, #1
 8003210:	d004      	beq.n	800321c <activateButtonColumn+0x10>
 8003212:	4770      	bx	lr
    case 0:
        //Activate KEYS2
        GPIOB->BSRR = (1 << (4 + 16)) | (1 << 3); //Set PB3 clear PB4
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <activateButtonColumn+0x18>)
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <activateButtonColumn+0x1c>)
 8003218:	619a      	str	r2, [r3, #24]
        break;
 800321a:	4770      	bx	lr
    case 1:
        //Activate KEYS1
        GPIOB->BSRR = (1 << (3 + 16)) | (1 << 4); //Set PB4 clear PB3;
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <activateButtonColumn+0x18>)
 800321e:	4a03      	ldr	r2, [pc, #12]	; (800322c <activateButtonColumn+0x20>)
 8003220:	619a      	str	r2, [r3, #24]
        break;
    }
}
 8003222:	4770      	bx	lr
 8003224:	48000400 	.word	0x48000400
 8003228:	00100008 	.word	0x00100008
 800322c:	00080010 	.word	0x00080010

08003230 <handleChangedButtons>:

void handleChangedButtons(uint32_t newButtonsState) {
 8003230:	b538      	push	{r3, r4, r5, lr}
    uint32_t changes = buttonsState ^ newButtonsState;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <handleChangedButtons+0x28>)
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	4045      	eors	r5, r0

    buttonsState = newButtonsState;
 8003238:	6018      	str	r0, [r3, #0]
    for (buttonName_t btn = Button_6; btn < Button_Last; btn++) {
 800323a:	2400      	movs	r4, #0
 800323c:	e001      	b.n	8003242 <handleChangedButtons+0x12>
 800323e:	3401      	adds	r4, #1
 8003240:	b2e4      	uxtb	r4, r4
 8003242:	2c10      	cmp	r4, #16
 8003244:	d807      	bhi.n	8003256 <handleChangedButtons+0x26>
        if (changes & (1 << btn)) {
 8003246:	2301      	movs	r3, #1
 8003248:	40a3      	lsls	r3, r4
 800324a:	422b      	tst	r3, r5
 800324c:	d0f7      	beq.n	800323e <handleChangedButtons+0xe>
            buttonInterruptHandler(btn);
 800324e:	4620      	mov	r0, r4
 8003250:	f000 f968 	bl	8003524 <buttonInterruptHandler>
 8003254:	e7f3      	b.n	800323e <handleChangedButtons+0xe>
        }
    }
}
 8003256:	bd38      	pop	{r3, r4, r5, pc}
 8003258:	200003c8 	.word	0x200003c8

0800325c <buttonsPollTask>:

void buttonsPollTask(uint32_t parameter) {
 800325c:	b510      	push	{r4, lr}
    static uint8_t btn_poll_stage = 0;
    static uint32_t rawButtonState;

    switch (btn_poll_stage) {
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <buttonsPollTask+0x88>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d013      	beq.n	800328e <buttonsPollTask+0x32>
 8003266:	b113      	cbz	r3, 800326e <buttonsPollTask+0x12>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d021      	beq.n	80032b0 <buttonsPollTask+0x54>
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
        btn_poll_stage = 0;
        osTaskAdd(buttonsPollTask, 0, 5);
        break;
    }
}
 800326c:	bd10      	pop	{r4, pc}
        rawButtonState = 0;
 800326e:	2400      	movs	r4, #0
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <buttonsPollTask+0x8c>)
 8003272:	601c      	str	r4, [r3, #0]
        activateButtonColumn(0);
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ffc9 	bl	800320c <activateButtonColumn>
        btn_poll_stage++;
 800327a:	4a1a      	ldr	r2, [pc, #104]	; (80032e4 <buttonsPollTask+0x88>)
 800327c:	7813      	ldrb	r3, [r2, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	7013      	strb	r3, [r2, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 8003282:	2205      	movs	r2, #5
 8003284:	4621      	mov	r1, r4
 8003286:	4819      	ldr	r0, [pc, #100]	; (80032ec <buttonsPollTask+0x90>)
 8003288:	f7ff fe3c 	bl	8002f04 <osTaskAdd>
        break;
 800328c:	e7ee      	b.n	800326c <buttonsPollTask+0x10>
        rawButtonState = getRawButtonsState();
 800328e:	f7ff ffa7 	bl	80031e0 <getRawButtonsState>
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <buttonsPollTask+0x8c>)
 8003294:	6018      	str	r0, [r3, #0]
        activateButtonColumn(1);
 8003296:	2001      	movs	r0, #1
 8003298:	f7ff ffb8 	bl	800320c <activateButtonColumn>
        btn_poll_stage++;
 800329c:	4a11      	ldr	r2, [pc, #68]	; (80032e4 <buttonsPollTask+0x88>)
 800329e:	7813      	ldrb	r3, [r2, #0]
 80032a0:	3301      	adds	r3, #1
 80032a2:	7013      	strb	r3, [r2, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 80032a4:	2205      	movs	r2, #5
 80032a6:	2100      	movs	r1, #0
 80032a8:	4810      	ldr	r0, [pc, #64]	; (80032ec <buttonsPollTask+0x90>)
 80032aa:	f7ff fe2b 	bl	8002f04 <osTaskAdd>
        break;
 80032ae:	e7dd      	b.n	800326c <buttonsPollTask+0x10>
        rawButtonState |= getRawButtonsState() << 8;
 80032b0:	f7ff ff96 	bl	80031e0 <getRawButtonsState>
 80032b4:	4c0c      	ldr	r4, [pc, #48]	; (80032e8 <buttonsPollTask+0x8c>)
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80032bc:	6020      	str	r0, [r4, #0]
        rawButtonState |= getPwrButtonState() << 16;
 80032be:	f7ff ff99 	bl	80031f4 <getPwrButtonState>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80032c8:	6020      	str	r0, [r4, #0]
        handleChangedButtons((~rawButtonState) & 0x1FFFF);
 80032ca:	43c0      	mvns	r0, r0
 80032cc:	f3c0 0010 	ubfx	r0, r0, #0, #17
 80032d0:	f7ff ffae 	bl	8003230 <handleChangedButtons>
        btn_poll_stage = 0;
 80032d4:	2100      	movs	r1, #0
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <buttonsPollTask+0x88>)
 80032d8:	7019      	strb	r1, [r3, #0]
        osTaskAdd(buttonsPollTask, 0, 5);
 80032da:	2205      	movs	r2, #5
 80032dc:	4803      	ldr	r0, [pc, #12]	; (80032ec <buttonsPollTask+0x90>)
 80032de:	f7ff fe11 	bl	8002f04 <osTaskAdd>
}
 80032e2:	e7c3      	b.n	800326c <buttonsPollTask+0x10>
 80032e4:	200003c4 	.word	0x200003c4
 80032e8:	200003cc 	.word	0x200003cc
 80032ec:	0800325d 	.word	0x0800325d

080032f0 <powerOff>:
#include "power_hal.h"
#include <stm32l4xx.h>

void powerOff() {
    GPIOC->ODR &= ~(1 << 2);
 80032f0:	4a02      	ldr	r2, [pc, #8]	; (80032fc <powerOff+0xc>)
 80032f2:	6953      	ldr	r3, [r2, #20]
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	6153      	str	r3, [r2, #20]
}
 80032fa:	4770      	bx	lr
 80032fc:	48000800 	.word	0x48000800

08003300 <antiBounce>:
  // С отлюченными прерываниями можно и обработать антидребезг. Сделано для уменьшения сработки прерываний
  osTaskAdd(buttonTaskProcess, buttonId, 0);
}


static antiBounse_t antiBounce(uint8_t buttonId) {
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	4604      	mov	r4, r0
	antiBounse_t result = antiBounceFail;
	buttonState_t state = button[buttonId].getState();
 8003304:	0043      	lsls	r3, r0, #1
 8003306:	4403      	add	r3, r0
 8003308:	00da      	lsls	r2, r3, #3
 800330a:	4d1b      	ldr	r5, [pc, #108]	; (8003378 <antiBounce+0x78>)
 800330c:	4415      	add	r5, r2
 800330e:	692b      	ldr	r3, [r5, #16]
 8003310:	4798      	blx	r3

	if(button[buttonId].tempState == BUTTON_STATE_UNDEFINED)
 8003312:	786b      	ldrb	r3, [r5, #1]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d010      	beq.n	800333a <antiBounce+0x3a>
		button[buttonId].antiBounceSummary = 0;
		button[buttonId].tempState = state;
	}
	//TODO check current state and compare

	if(state == button[buttonId].tempState){
 8003318:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800331c:	00da      	lsls	r2, r3, #3
 800331e:	4b16      	ldr	r3, [pc, #88]	; (8003378 <antiBounce+0x78>)
 8003320:	4413      	add	r3, r2
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	4283      	cmp	r3, r0
 8003326:	d00c      	beq.n	8003342 <antiBounce+0x42>
		if(button[buttonId].antiBounceSummary >= maxAntiBounceAttempt){
			// TODO add assert for mechanical noise
		}
	}
	else{
		button[buttonId].antiBounceAttempts = 0;
 8003328:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800332c:	00e2      	lsls	r2, r4, #3
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <antiBounce+0x78>)
 8003330:	4413      	add	r3, r2
 8003332:	2200      	movs	r2, #0
 8003334:	70da      	strb	r2, [r3, #3]
	antiBounse_t result = antiBounceFail;
 8003336:	2001      	movs	r0, #1
	}
	return result;
}
 8003338:	bd38      	pop	{r3, r4, r5, pc}
		button[buttonId].antiBounceSummary = 0;
 800333a:	2200      	movs	r2, #0
 800333c:	712a      	strb	r2, [r5, #4]
		button[buttonId].tempState = state;
 800333e:	7068      	strb	r0, [r5, #1]
 8003340:	e7ea      	b.n	8003318 <antiBounce+0x18>
		button[buttonId].antiBounceAttempts++;
 8003342:	4611      	mov	r1, r2
 8003344:	4a0c      	ldr	r2, [pc, #48]	; (8003378 <antiBounce+0x78>)
 8003346:	440a      	add	r2, r1
 8003348:	78d3      	ldrb	r3, [r2, #3]
 800334a:	3301      	adds	r3, #1
 800334c:	70d3      	strb	r3, [r2, #3]
		button[buttonId].antiBounceSummary++;
 800334e:	7911      	ldrb	r1, [r2, #4]
 8003350:	3101      	adds	r1, #1
 8003352:	7111      	strb	r1, [r2, #4]
		if(button[buttonId].antiBounceAttempts >= normalAntiBounceAttempts){
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b04      	cmp	r3, #4
 8003358:	d90c      	bls.n	8003374 <antiBounce+0x74>
			button[buttonId].antiBounceAttempts = 0;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <antiBounce+0x78>)
 800335c:	0062      	lsls	r2, r4, #1
 800335e:	1910      	adds	r0, r2, r4
 8003360:	00c1      	lsls	r1, r0, #3
 8003362:	185d      	adds	r5, r3, r1
 8003364:	2000      	movs	r0, #0
 8003366:	70e8      	strb	r0, [r5, #3]
			button[buttonId].state = button[buttonId].tempState;
 8003368:	786d      	ldrb	r5, [r5, #1]
 800336a:	545d      	strb	r5, [r3, r1]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 800336c:	440b      	add	r3, r1
 800336e:	2202      	movs	r2, #2
 8003370:	705a      	strb	r2, [r3, #1]
 8003372:	e7e1      	b.n	8003338 <antiBounce+0x38>
			result = antiBounceNext;
 8003374:	2002      	movs	r0, #2
 8003376:	e7df      	b.n	8003338 <antiBounce+0x38>
 8003378:	200003d0 	.word	0x200003d0

0800337c <buttonPressTask>:

		}
	}
}

static void buttonPressTask(uint32_t parameter){
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	b2c4      	uxtb	r4, r0
	uint8_t buttonId = (uint8_t)parameter;
	if(button[buttonId].pressType == BUTTON_PRESS_SHORT){
 8003380:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003384:	00da      	lsls	r2, r3, #3
 8003386:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <buttonPressTask+0x68>)
 8003388:	4413      	add	r3, r2
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <buttonPressTask+0x1a>
		button[buttonId].pressType = BUTTON_PRESS_LONG;
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
	}
	else if(button[buttonId].pressType == BUTTON_PRESS_LONG){
 8003390:	2b02      	cmp	r3, #2
 8003392:	d012      	beq.n	80033ba <buttonPressTask+0x3e>
		TIME_T taskTime = BUTTON_LONG_PRESS_TIME - BUTTON_PRESS_TIME;
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);

		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
	}
}
 8003394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		button[buttonId].pressType = BUTTON_PRESS_LONG;
 8003396:	4e13      	ldr	r6, [pc, #76]	; (80033e4 <buttonPressTask+0x68>)
 8003398:	0065      	lsls	r5, r4, #1
 800339a:	192a      	adds	r2, r5, r4
 800339c:	00d3      	lsls	r3, r2, #3
 800339e:	4433      	add	r3, r6
 80033a0:	2202      	movs	r2, #2
 80033a2:	709a      	strb	r2, [r3, #2]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 80033a4:	f240 424c 	movw	r2, #1100	; 0x44c
 80033a8:	4621      	mov	r1, r4
 80033aa:	480f      	ldr	r0, [pc, #60]	; (80033e8 <buttonPressTask+0x6c>)
 80033ac:	f7ff fdaa 	bl	8002f04 <osTaskAdd>
 80033b0:	442c      	add	r4, r5
 80033b2:	00e3      	lsls	r3, r4, #3
 80033b4:	441e      	add	r6, r3
 80033b6:	6170      	str	r0, [r6, #20]
 80033b8:	e7ec      	b.n	8003394 <buttonPressTask+0x18>
		button[buttonId].pressType = BUTTON_PRESS_STICK;
 80033ba:	4f0a      	ldr	r7, [pc, #40]	; (80033e4 <buttonPressTask+0x68>)
 80033bc:	0066      	lsls	r6, r4, #1
 80033be:	1933      	adds	r3, r6, r4
 80033c0:	00dd      	lsls	r5, r3, #3
 80033c2:	443d      	add	r5, r7
 80033c4:	2303      	movs	r3, #3
 80033c6:	70ab      	strb	r3, [r5, #2]
		button[buttonId].taskId = osTaskAdd(buttonPressTask, buttonId, taskTime);
 80033c8:	f240 424c 	movw	r2, #1100	; 0x44c
 80033cc:	4621      	mov	r1, r4
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <buttonPressTask+0x6c>)
 80033d0:	f7ff fd98 	bl	8002f04 <osTaskAdd>
 80033d4:	6168      	str	r0, [r5, #20]
		osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	78a9      	ldrb	r1, [r5, #2]
 80033da:	68a8      	ldr	r0, [r5, #8]
 80033dc:	f7ff fd92 	bl	8002f04 <osTaskAdd>
}
 80033e0:	e7d8      	b.n	8003394 <buttonPressTask+0x18>
 80033e2:	bf00      	nop
 80033e4:	200003d0 	.word	0x200003d0
 80033e8:	0800337d 	.word	0x0800337d

080033ec <buttonTaskProcess>:
static void buttonTaskProcess(uint32_t parameter){
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4604      	mov	r4, r0
	antiBounse_t antiBounceState = antiBounce(buttonId);
 80033f0:	b2c0      	uxtb	r0, r0
 80033f2:	f7ff ff85 	bl	8003300 <antiBounce>
	if(antiBounceState == antiBounceNext){
 80033f6:	2802      	cmp	r0, #2
 80033f8:	d023      	beq.n	8003442 <buttonTaskProcess+0x56>
	else if(antiBounceState == antiBounceOk){
 80033fa:	bb08      	cbnz	r0, 8003440 <buttonTaskProcess+0x54>
 80033fc:	b2e4      	uxtb	r4, r4
		button[buttonId].init(btON);
 80033fe:	4e1f      	ldr	r6, [pc, #124]	; (800347c <buttonTaskProcess+0x90>)
 8003400:	0063      	lsls	r3, r4, #1
 8003402:	4423      	add	r3, r4
 8003404:	00dd      	lsls	r5, r3, #3
 8003406:	1973      	adds	r3, r6, r5
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2001      	movs	r0, #1
 800340c:	4798      	blx	r3
		if(button[buttonId].state == BUTTON_PRESSED){
 800340e:	5d73      	ldrb	r3, [r6, r5]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d01c      	beq.n	800344e <buttonTaskProcess+0x62>
			if(button[buttonId].pressType != BUTTON_PRESS_NONE){
 8003414:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003418:	00da      	lsls	r2, r3, #3
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <buttonTaskProcess+0x90>)
 800341c:	4413      	add	r3, r2
 800341e:	789b      	ldrb	r3, [r3, #2]
 8003420:	bb2b      	cbnz	r3, 800346e <buttonTaskProcess+0x82>
			osTaskAdd(button[buttonId].callBack, (uint32_t)button[buttonId].pressType, 0);
 8003422:	4e16      	ldr	r6, [pc, #88]	; (800347c <buttonTaskProcess+0x90>)
 8003424:	0065      	lsls	r5, r4, #1
 8003426:	192a      	adds	r2, r5, r4
 8003428:	00d3      	lsls	r3, r2, #3
 800342a:	4433      	add	r3, r6
 800342c:	2200      	movs	r2, #0
 800342e:	7899      	ldrb	r1, [r3, #2]
 8003430:	6898      	ldr	r0, [r3, #8]
 8003432:	f7ff fd67 	bl	8002f04 <osTaskAdd>
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 8003436:	442c      	add	r4, r5
 8003438:	00e3      	lsls	r3, r4, #3
 800343a:	441e      	add	r6, r3
 800343c:	2300      	movs	r3, #0
 800343e:	70b3      	strb	r3, [r6, #2]
}
 8003440:	bd70      	pop	{r4, r5, r6, pc}
		osTaskAdd(buttonTaskProcess, buttonId, timeBetweenChecks);
 8003442:	2205      	movs	r2, #5
 8003444:	b2e1      	uxtb	r1, r4
 8003446:	480e      	ldr	r0, [pc, #56]	; (8003480 <buttonTaskProcess+0x94>)
 8003448:	f7ff fd5c 	bl	8002f04 <osTaskAdd>
 800344c:	e7f8      	b.n	8003440 <buttonTaskProcess+0x54>
			button[buttonId].pressType = BUTTON_PRESS_SHORT;
 800344e:	4632      	mov	r2, r6
 8003450:	4629      	mov	r1, r5
 8003452:	4431      	add	r1, r6
 8003454:	2001      	movs	r0, #1
 8003456:	7088      	strb	r0, [r1, #2]
			TIME_T taskTime = BUTTON_PRESS_TIME - (button[buttonId].antiBounceSummary * timeBetweenChecks); // TODO check validity
 8003458:	442a      	add	r2, r5
 800345a:	7912      	ldrb	r2, [r2, #4]
 800345c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
			osTaskAdd(buttonPressTask, buttonId, taskTime);
 8003460:	f5c2 72c8 	rsb	r2, r2, #400	; 0x190
 8003464:	4621      	mov	r1, r4
 8003466:	4807      	ldr	r0, [pc, #28]	; (8003484 <buttonTaskProcess+0x98>)
 8003468:	f7ff fd4c 	bl	8002f04 <osTaskAdd>
 800346c:	e7e8      	b.n	8003440 <buttonTaskProcess+0x54>
				osTaskDelId(button[buttonId].taskId, buttonPressTask);
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <buttonTaskProcess+0x90>)
 8003470:	4413      	add	r3, r2
 8003472:	4904      	ldr	r1, [pc, #16]	; (8003484 <buttonTaskProcess+0x98>)
 8003474:	6958      	ldr	r0, [r3, #20]
 8003476:	f7ff fd6d 	bl	8002f54 <osTaskDelId>
 800347a:	e7d2      	b.n	8003422 <buttonTaskProcess+0x36>
 800347c:	200003d0 	.word	0x200003d0
 8003480:	080033ed 	.word	0x080033ed
 8003484:	0800337d 	.word	0x0800337d

08003488 <buttonInit>:
void buttonInit(const buttonInitStruct_t *buttonInitData, uint8_t buttonNumber){
 8003488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800348c:	4680      	mov	r8, r0
 800348e:	4689      	mov	r9, r1
	memset(button, 0, sizeof(button));
 8003490:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8003494:	2100      	movs	r1, #0
 8003496:	481b      	ldr	r0, [pc, #108]	; (8003504 <buttonInit+0x7c>)
 8003498:	f000 f88e 	bl	80035b8 <memset>
	for(uint8_t i = 0; i < buttonNumber; ++i)
 800349c:	2500      	movs	r5, #0
 800349e:	e001      	b.n	80034a4 <buttonInit+0x1c>
 80034a0:	3501      	adds	r5, #1
 80034a2:	b2ed      	uxtb	r5, r5
 80034a4:	454d      	cmp	r5, r9
 80034a6:	d22a      	bcs.n	80034fe <buttonInit+0x76>
		uint8_t buttonId = buttonInitData[i].name;
 80034a8:	0128      	lsls	r0, r5, #4
 80034aa:	eb08 0200 	add.w	r2, r8, r0
 80034ae:	7b16      	ldrb	r6, [r2, #12]
		if(button[buttonId].callBack == 0)
 80034b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80034b4:	00d9      	lsls	r1, r3, #3
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <buttonInit+0x7c>)
 80034b8:	440b      	add	r3, r1
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ef      	bne.n	80034a0 <buttonInit+0x18>
			button[buttonId].state = BUTTON_STATE_UNDEFINED;
 80034c0:	f8df a040 	ldr.w	sl, [pc, #64]	; 8003504 <buttonInit+0x7c>
 80034c4:	0077      	lsls	r7, r6, #1
 80034c6:	19b9      	adds	r1, r7, r6
 80034c8:	00cb      	lsls	r3, r1, #3
 80034ca:	eb0a 0403 	add.w	r4, sl, r3
 80034ce:	2102      	movs	r1, #2
 80034d0:	f80a 1003 	strb.w	r1, [sl, r3]
			button[buttonId].tempState = BUTTON_STATE_UNDEFINED;
 80034d4:	7061      	strb	r1, [r4, #1]
			button[buttonId].pressType = BUTTON_PRESS_NONE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	70a3      	strb	r3, [r4, #2]
			button[buttonId].antiBounceAttempts = 0;
 80034da:	70e3      	strb	r3, [r4, #3]
			button[buttonId].antiBounceSummary = 0;
 80034dc:	7123      	strb	r3, [r4, #4]
			button[buttonId].callBack = buttonInitData[i].callBack;
 80034de:	6893      	ldr	r3, [r2, #8]
 80034e0:	60a3      	str	r3, [r4, #8]
			button[buttonId].init = buttonInitData[i].init;
 80034e2:	f858 3000 	ldr.w	r3, [r8, r0]
 80034e6:	60e3      	str	r3, [r4, #12]
			button[buttonId].getState = buttonInitData[i].getState;
 80034e8:	6852      	ldr	r2, [r2, #4]
 80034ea:	6122      	str	r2, [r4, #16]
			button[buttonId].init(btON);
 80034ec:	2001      	movs	r0, #1
 80034ee:	4798      	blx	r3
			button[buttonId].state = button[buttonId].getState();
 80034f0:	6923      	ldr	r3, [r4, #16]
 80034f2:	4798      	blx	r3
 80034f4:	443e      	add	r6, r7
 80034f6:	00f3      	lsls	r3, r6, #3
 80034f8:	f80a 0003 	strb.w	r0, [sl, r3]
 80034fc:	e7d0      	b.n	80034a0 <buttonInit+0x18>
}
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003502:	bf00      	nop
 8003504:	200003d0 	.word	0x200003d0

08003508 <setButtonHandler>:
    if (callBack) {
 8003508:	b141      	cbz	r1, 800351c <setButtonHandler+0x14>
void setButtonHandler(uint8_t buttonId, task_t callBack) {
 800350a:	b410      	push	{r4}
        button[buttonId].callBack = callBack;
 800350c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003510:	00c2      	lsls	r2, r0, #3
 8003512:	4b03      	ldr	r3, [pc, #12]	; (8003520 <setButtonHandler+0x18>)
 8003514:	4413      	add	r3, r2
 8003516:	6099      	str	r1, [r3, #8]
}
 8003518:	bc10      	pop	{r4}
 800351a:	4770      	bx	lr
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200003d0 	.word	0x200003d0

08003524 <buttonInterruptHandler>:
void buttonInterruptHandler(uint8_t buttonId){
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
  button[buttonId].init(btOFF);
 8003528:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800352c:	00da      	lsls	r2, r3, #3
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <buttonInterruptHandler+0x20>)
 8003530:	4413      	add	r3, r2
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2000      	movs	r0, #0
 8003536:	4798      	blx	r3
  osTaskAdd(buttonTaskProcess, buttonId, 0);
 8003538:	2200      	movs	r2, #0
 800353a:	4621      	mov	r1, r4
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <buttonInterruptHandler+0x24>)
 800353e:	f7ff fce1 	bl	8002f04 <osTaskAdd>
}
 8003542:	bd10      	pop	{r4, pc}
 8003544:	200003d0 	.word	0x200003d0
 8003548:	080033ed 	.word	0x080033ed

0800354c <__errno>:
 800354c:	e59f3004 	ldr	r3, [pc, #4]	; 8003558 <__errno+0xc>
 8003550:	e5930000 	ldr	r0, [r3]
 8003554:	e12fff1e 	bx	lr
 8003558:	20000074 	.word	0x20000074

0800355c <__itoa>:
 800355c:	e2423002 	sub	r3, r2, #2
 8003560:	e3530022 	cmp	r3, #34	; 0x22
 8003564:	83a03000 	movhi	r3, #0
 8003568:	e92d4010 	push	{r4, lr}
 800356c:	e1a04001 	mov	r4, r1
 8003570:	85c13000 	strbhi	r3, [r1]
 8003574:	81a04003 	movhi	r4, r3
 8003578:	8a00000a 	bhi	80035a8 <__itoa+0x4c>
 800357c:	e1a01fa0 	lsr	r1, r0, #31
 8003580:	e352000a 	cmp	r2, #10
 8003584:	13a01000 	movne	r1, #0
 8003588:	02011001 	andeq	r1, r1, #1
 800358c:	e3510000 	cmp	r1, #0
 8003590:	13a0302d 	movne	r3, #45	; 0x2d
 8003594:	13a01001 	movne	r1, #1
 8003598:	15c43000 	strbne	r3, [r4]
 800359c:	12600000 	rsbne	r0, r0, #0
 80035a0:	e0841001 	add	r1, r4, r1
 80035a4:	eb000056 	bl	8003704 <__utoa>
 80035a8:	e1a00004 	mov	r0, r4
 80035ac:	e8bd4010 	pop	{r4, lr}
 80035b0:	e12fff1e 	bx	lr

080035b4 <itoa>:
 80035b4:	eaffffe8 	b	800355c <__itoa>

080035b8 <memset>:
 80035b8:	e1a03000 	mov	r3, r0
 80035bc:	e0802002 	add	r2, r0, r2
 80035c0:	e1530002 	cmp	r3, r2
 80035c4:	012fff1e 	bxeq	lr
 80035c8:	e4c31001 	strb	r1, [r3], #1
 80035cc:	eafffffb 	b	80035c0 <memset+0x8>

080035d0 <srand>:
 80035d0:	e59f3070 	ldr	r3, [pc, #112]	; 8003648 <srand+0x78>
 80035d4:	e92d4070 	push	{r4, r5, r6, lr}
 80035d8:	e5934000 	ldr	r4, [r3]
 80035dc:	e5943038 	ldr	r3, [r4, #56]	; 0x38
 80035e0:	e3530000 	cmp	r3, #0
 80035e4:	e1a05000 	mov	r5, r0
 80035e8:	1a000010 	bne	8003630 <srand+0x60>
 80035ec:	e3a00018 	mov	r0, #24
 80035f0:	eb00009b 	bl	8003864 <malloc>
 80035f4:	e59f3050 	ldr	r3, [pc, #80]	; 800364c <srand+0x7c>
 80035f8:	e5840038 	str	r0, [r4, #56]	; 0x38
 80035fc:	e5803000 	str	r3, [r0]
 8003600:	e2433d83 	sub	r3, r3, #8384	; 0x20c0
 8003604:	e243316b 	sub	r3, r3, #-1073741798	; 0xc000001a
 8003608:	e2433656 	sub	r3, r3, #90177536	; 0x5600000
 800360c:	e5803004 	str	r3, [r0, #4]
 8003610:	e59f3038 	ldr	r3, [pc, #56]	; 8003650 <srand+0x80>
 8003614:	e5803008 	str	r3, [r0, #8]
 8003618:	e3a0300b 	mov	r3, #11
 800361c:	e3a02001 	mov	r2, #1
 8003620:	e1c030bc 	strh	r3, [r0, #12]
 8003624:	e3a03000 	mov	r3, #0
 8003628:	e5802010 	str	r2, [r0, #16]
 800362c:	e5803014 	str	r3, [r0, #20]
 8003630:	e3a02000 	mov	r2, #0
 8003634:	e5943038 	ldr	r3, [r4, #56]	; 0x38
 8003638:	e5835010 	str	r5, [r3, #16]
 800363c:	e5832014 	str	r2, [r3, #20]
 8003640:	e8bd4070 	pop	{r4, r5, r6, lr}
 8003644:	e12fff1e 	bx	lr
 8003648:	20000074 	.word	0x20000074
 800364c:	abcd330e 	.word	0xabcd330e
 8003650:	0005deec 	.word	0x0005deec

08003654 <rand>:
 8003654:	e59f3094 	ldr	r3, [pc, #148]	; 80036f0 <rand+0x9c>
 8003658:	e92d4070 	push	{r4, r5, r6, lr}
 800365c:	e5934000 	ldr	r4, [r3]
 8003660:	e5943038 	ldr	r3, [r4, #56]	; 0x38
 8003664:	e3530000 	cmp	r3, #0
 8003668:	1a000010 	bne	80036b0 <rand+0x5c>
 800366c:	e3a00018 	mov	r0, #24
 8003670:	eb00007b 	bl	8003864 <malloc>
 8003674:	e59f3078 	ldr	r3, [pc, #120]	; 80036f4 <rand+0xa0>
 8003678:	e5840038 	str	r0, [r4, #56]	; 0x38
 800367c:	e5803000 	str	r3, [r0]
 8003680:	e2433d83 	sub	r3, r3, #8384	; 0x20c0
 8003684:	e243316b 	sub	r3, r3, #-1073741798	; 0xc000001a
 8003688:	e2433656 	sub	r3, r3, #90177536	; 0x5600000
 800368c:	e5803004 	str	r3, [r0, #4]
 8003690:	e59f3060 	ldr	r3, [pc, #96]	; 80036f8 <rand+0xa4>
 8003694:	e5803008 	str	r3, [r0, #8]
 8003698:	e3a0300b 	mov	r3, #11
 800369c:	e3a02001 	mov	r2, #1
 80036a0:	e1c030bc 	strh	r3, [r0, #12]
 80036a4:	e3a03000 	mov	r3, #0
 80036a8:	e5802010 	str	r2, [r0, #16]
 80036ac:	e5803014 	str	r3, [r0, #20]
 80036b0:	e5941038 	ldr	r1, [r4, #56]	; 0x38
 80036b4:	e59f3040 	ldr	r3, [pc, #64]	; 80036fc <rand+0xa8>
 80036b8:	e591e010 	ldr	lr, [r1, #16]
 80036bc:	e004039e 	mul	r4, lr, r3
 80036c0:	e5912014 	ldr	r2, [r1, #20]
 80036c4:	e59fc034 	ldr	ip, [pc, #52]	; 8003700 <rand+0xac>
 80036c8:	e020429c 	mla	r0, ip, r2, r4
 80036cc:	e0832c9e 	umull	r2, r3, lr, ip
 80036d0:	e2924001 	adds	r4, r2, #1
 80036d4:	e0803003 	add	r3, r0, r3
 80036d8:	e2a35000 	adc	r5, r3, #0
 80036dc:	e3c50102 	bic	r0, r5, #-2147483648	; 0x80000000
 80036e0:	e5814010 	str	r4, [r1, #16]
 80036e4:	e5815014 	str	r5, [r1, #20]
 80036e8:	e8bd4070 	pop	{r4, r5, r6, lr}
 80036ec:	e12fff1e 	bx	lr
 80036f0:	20000074 	.word	0x20000074
 80036f4:	abcd330e 	.word	0xabcd330e
 80036f8:	0005deec 	.word	0x0005deec
 80036fc:	5851f42d 	.word	0x5851f42d
 8003700:	4c957f2d 	.word	0x4c957f2d

08003704 <__utoa>:
 8003704:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8003708:	e1a08002 	mov	r8, r2
 800370c:	e24dd028 	sub	sp, sp, #40	; 0x28
 8003710:	e1a05001 	mov	r5, r1
 8003714:	e1a06000 	mov	r6, r0
 8003718:	e3a02025 	mov	r2, #37	; 0x25
 800371c:	e59f108c 	ldr	r1, [pc, #140]	; 80037b0 <__utoa+0xac>
 8003720:	e1a0000d 	mov	r0, sp
 8003724:	eb000056 	bl	8003884 <memcpy>
 8003728:	e2483002 	sub	r3, r8, #2
 800372c:	e3530022 	cmp	r3, #34	; 0x22
 8003730:	e3a03000 	mov	r3, #0
 8003734:	85c53000 	strbhi	r3, [r5]
 8003738:	81a05003 	movhi	r5, r3
 800373c:	8a000012 	bhi	800378c <__utoa+0x88>
 8003740:	e2457001 	sub	r7, r5, #1
 8003744:	e1a00006 	mov	r0, r6
 8003748:	e1a01008 	mov	r1, r8
 800374c:	e1a04003 	mov	r4, r3
 8003750:	eb0003d1 	bl	800469c <__aeabi_uidivmod>
 8003754:	e28d2028 	add	r2, sp, #40	; 0x28
 8003758:	e0821001 	add	r1, r2, r1
 800375c:	e5512028 	ldrb	r2, [r1, #-40]	; 0xffffffd8
 8003760:	e2506000 	subs	r6, r0, #0
 8003764:	e2843001 	add	r3, r4, #1
 8003768:	e5e72001 	strb	r2, [r7, #1]!
 800376c:	1afffff4 	bne	8003744 <__utoa+0x40>
 8003770:	e1a02005 	mov	r2, r5
 8003774:	e7c56003 	strb	r6, [r5, r3]
 8003778:	e0853004 	add	r3, r5, r4
 800377c:	e0431005 	sub	r1, r3, r5
 8003780:	e0420005 	sub	r0, r2, r5
 8003784:	e1510000 	cmp	r1, r0
 8003788:	ca000003 	bgt	800379c <__utoa+0x98>
 800378c:	e1a00005 	mov	r0, r5
 8003790:	e28dd028 	add	sp, sp, #40	; 0x28
 8003794:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8003798:	e12fff1e 	bx	lr
 800379c:	e5d21000 	ldrb	r1, [r2]
 80037a0:	e5d30000 	ldrb	r0, [r3]
 80037a4:	e4c20001 	strb	r0, [r2], #1
 80037a8:	e4431001 	strb	r1, [r3], #-1
 80037ac:	eafffff2 	b	800377c <__utoa+0x78>
 80037b0:	0800aafc 	.word	0x0800aafc

080037b4 <_vsniprintf_r>:
 80037b4:	e92d4030 	push	{r4, r5, lr}
 80037b8:	e2525000 	subs	r5, r2, #0
 80037bc:	b3a0308b 	movlt	r3, #139	; 0x8b
 80037c0:	e24dd06c 	sub	sp, sp, #108	; 0x6c
 80037c4:	b5803000 	strlt	r3, [r0]
 80037c8:	b3e00000 	mvnlt	r0, #0
 80037cc:	ba000015 	blt	8003828 <_vsniprintf_r+0x74>
 80037d0:	e58d1000 	str	r1, [sp]
 80037d4:	e58d1010 	str	r1, [sp, #16]
 80037d8:	e1a02003 	mov	r2, r3
 80037dc:	01a01005 	moveq	r1, r5
 80037e0:	e3e03000 	mvn	r3, #0
 80037e4:	e3a0cf82 	mov	ip, #520	; 0x208
 80037e8:	12451001 	subne	r1, r5, #1
 80037ec:	e58d1008 	str	r1, [sp, #8]
 80037f0:	e58d1014 	str	r1, [sp, #20]
 80037f4:	e1cd30be 	strh	r3, [sp, #14]
 80037f8:	e1a0100d 	mov	r1, sp
 80037fc:	e59d3078 	ldr	r3, [sp, #120]	; 0x78
 8003800:	e1a04000 	mov	r4, r0
 8003804:	e1cdc0bc 	strh	ip, [sp, #12]
 8003808:	eb000100 	bl	8003c10 <_svfiprintf_r>
 800380c:	e3700001 	cmn	r0, #1
 8003810:	b3a0308b 	movlt	r3, #139	; 0x8b
 8003814:	b5843000 	strlt	r3, [r4]
 8003818:	e3550000 	cmp	r5, #0
 800381c:	13a02000 	movne	r2, #0
 8003820:	159d3000 	ldrne	r3, [sp]
 8003824:	15c32000 	strbne	r2, [r3]
 8003828:	e28dd06c 	add	sp, sp, #108	; 0x6c
 800382c:	e8bd4030 	pop	{r4, r5, lr}
 8003830:	e12fff1e 	bx	lr

08003834 <vsniprintf>:
 8003834:	e92d4007 	push	{r0, r1, r2, lr}
 8003838:	e58d3000 	str	r3, [sp]
 800383c:	e1a03002 	mov	r3, r2
 8003840:	e1a02001 	mov	r2, r1
 8003844:	e1a01000 	mov	r1, r0
 8003848:	e59f0010 	ldr	r0, [pc, #16]	; 8003860 <vsniprintf+0x2c>
 800384c:	e5900000 	ldr	r0, [r0]
 8003850:	ebffffd7 	bl	80037b4 <_vsniprintf_r>
 8003854:	e28dd00c 	add	sp, sp, #12
 8003858:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
 800385c:	e12fff1e 	bx	lr
 8003860:	20000074 	.word	0x20000074

08003864 <malloc>:
 8003864:	e92d4010 	push	{r4, lr}
 8003868:	e59f3010 	ldr	r3, [pc, #16]	; 8003880 <malloc+0x1c>
 800386c:	e1a01000 	mov	r1, r0
 8003870:	e5930000 	ldr	r0, [r3]
 8003874:	eb00004e 	bl	80039b4 <_malloc_r>
 8003878:	e8bd4010 	pop	{r4, lr}
 800387c:	e12fff1e 	bx	lr
 8003880:	20000074 	.word	0x20000074

08003884 <memcpy>:
 8003884:	e2403001 	sub	r3, r0, #1
 8003888:	e0812002 	add	r2, r1, r2
 800388c:	e1510002 	cmp	r1, r2
 8003890:	012fff1e 	bxeq	lr
 8003894:	e4d1c001 	ldrb	ip, [r1], #1
 8003898:	e5e3c001 	strb	ip, [r3, #1]!
 800389c:	eafffffa 	b	800388c <memcpy+0x8>

080038a0 <_free_r>:
 80038a0:	e3510000 	cmp	r1, #0
 80038a4:	012fff1e 	bxeq	lr
 80038a8:	e5113004 	ldr	r3, [r1, #-4]
 80038ac:	e92d4070 	push	{r4, r5, r6, lr}
 80038b0:	e3530000 	cmp	r3, #0
 80038b4:	e2414004 	sub	r4, r1, #4
 80038b8:	b0844003 	addlt	r4, r4, r3
 80038bc:	e1a05000 	mov	r5, r0
 80038c0:	eb000310 	bl	8004508 <__malloc_lock>
 80038c4:	e59f20e4 	ldr	r2, [pc, #228]	; 80039b0 <_free_r+0x110>
 80038c8:	e5923000 	ldr	r3, [r2]
 80038cc:	e3530000 	cmp	r3, #0
 80038d0:	e1a00002 	mov	r0, r2
 80038d4:	05843004 	streq	r3, [r4, #4]
 80038d8:	05824000 	streq	r4, [r2]
 80038dc:	0a00000a 	beq	800390c <_free_r+0x6c>
 80038e0:	e1530004 	cmp	r3, r4
 80038e4:	9a00000d 	bls	8003920 <_free_r+0x80>
 80038e8:	e5941000 	ldr	r1, [r4]
 80038ec:	e0842001 	add	r2, r4, r1
 80038f0:	e1530002 	cmp	r3, r2
 80038f4:	05932000 	ldreq	r2, [r3]
 80038f8:	05933004 	ldreq	r3, [r3, #4]
 80038fc:	00822001 	addeq	r2, r2, r1
 8003900:	05842000 	streq	r2, [r4]
 8003904:	e5843004 	str	r3, [r4, #4]
 8003908:	e5804000 	str	r4, [r0]
 800390c:	e1a00005 	mov	r0, r5
 8003910:	eb0002fd 	bl	800450c <__malloc_unlock>
 8003914:	e8bd4070 	pop	{r4, r5, r6, lr}
 8003918:	e12fff1e 	bx	lr
 800391c:	e1a03002 	mov	r3, r2
 8003920:	e5932004 	ldr	r2, [r3, #4]
 8003924:	e1520004 	cmp	r2, r4
 8003928:	83a01000 	movhi	r1, #0
 800392c:	93a01001 	movls	r1, #1
 8003930:	e3520000 	cmp	r2, #0
 8003934:	03a01000 	moveq	r1, #0
 8003938:	e3510000 	cmp	r1, #0
 800393c:	1afffff6 	bne	800391c <_free_r+0x7c>
 8003940:	e5931000 	ldr	r1, [r3]
 8003944:	e0830001 	add	r0, r3, r1
 8003948:	e1500004 	cmp	r0, r4
 800394c:	1a00000a 	bne	800397c <_free_r+0xdc>
 8003950:	e5940000 	ldr	r0, [r4]
 8003954:	e0811000 	add	r1, r1, r0
 8003958:	e1a00003 	mov	r0, r3
 800395c:	e6801001 	str	r1, [r0], r1
 8003960:	e1520000 	cmp	r2, r0
 8003964:	05920000 	ldreq	r0, [r2]
 8003968:	05922004 	ldreq	r2, [r2, #4]
 800396c:	00801001 	addeq	r1, r0, r1
 8003970:	05831000 	streq	r1, [r3]
 8003974:	05832004 	streq	r2, [r3, #4]
 8003978:	eaffffe3 	b	800390c <_free_r+0x6c>
 800397c:	83a0300c 	movhi	r3, #12
 8003980:	85853000 	strhi	r3, [r5]
 8003984:	8affffe0 	bhi	800390c <_free_r+0x6c>
 8003988:	e5940000 	ldr	r0, [r4]
 800398c:	e0841000 	add	r1, r4, r0
 8003990:	e1520001 	cmp	r2, r1
 8003994:	05921000 	ldreq	r1, [r2]
 8003998:	05922004 	ldreq	r2, [r2, #4]
 800399c:	00811000 	addeq	r1, r1, r0
 80039a0:	05841000 	streq	r1, [r4]
 80039a4:	e5842004 	str	r2, [r4, #4]
 80039a8:	e5834004 	str	r4, [r3, #4]
 80039ac:	eaffffd6 	b	800390c <_free_r+0x6c>
 80039b0:	20000568 	.word	0x20000568

080039b4 <_malloc_r>:
 80039b4:	e92d4070 	push	{r4, r5, r6, lr}
 80039b8:	e2815003 	add	r5, r1, #3
 80039bc:	e3c55003 	bic	r5, r5, #3
 80039c0:	e2855008 	add	r5, r5, #8
 80039c4:	e355000c 	cmp	r5, #12
 80039c8:	33a0500c 	movcc	r5, #12
 80039cc:	e1510005 	cmp	r1, r5
 80039d0:	93a01000 	movls	r1, #0
 80039d4:	83a01001 	movhi	r1, #1
 80039d8:	e1913fa5 	orrs	r3, r1, r5, lsr #31
 80039dc:	13a0300c 	movne	r3, #12
 80039e0:	e1a06000 	mov	r6, r0
 80039e4:	15803000 	strne	r3, [r0]
 80039e8:	1a000016 	bne	8003a48 <_malloc_r+0x94>
 80039ec:	eb0002c5 	bl	8004508 <__malloc_lock>
 80039f0:	e59f30ec 	ldr	r3, [pc, #236]	; 8003ae4 <_malloc_r+0x130>
 80039f4:	e5934000 	ldr	r4, [r3]
 80039f8:	e1a02003 	mov	r2, r3
 80039fc:	e1a01004 	mov	r1, r4
 8003a00:	e3510000 	cmp	r1, #0
 8003a04:	1a000012 	bne	8003a54 <_malloc_r+0xa0>
 8003a08:	e59f40d8 	ldr	r4, [pc, #216]	; 8003ae8 <_malloc_r+0x134>
 8003a0c:	e5943000 	ldr	r3, [r4]
 8003a10:	e3530000 	cmp	r3, #0
 8003a14:	1a000002 	bne	8003a24 <_malloc_r+0x70>
 8003a18:	e1a00006 	mov	r0, r6
 8003a1c:	eb00028c 	bl	8004454 <_sbrk_r>
 8003a20:	e5840000 	str	r0, [r4]
 8003a24:	e1a01005 	mov	r1, r5
 8003a28:	e1a00006 	mov	r0, r6
 8003a2c:	eb000288 	bl	8004454 <_sbrk_r>
 8003a30:	e3700001 	cmn	r0, #1
 8003a34:	1a00001f 	bne	8003ab8 <_malloc_r+0x104>
 8003a38:	e3a0300c 	mov	r3, #12
 8003a3c:	e1a00006 	mov	r0, r6
 8003a40:	e5863000 	str	r3, [r6]
 8003a44:	eb0002b0 	bl	800450c <__malloc_unlock>
 8003a48:	e3a00000 	mov	r0, #0
 8003a4c:	e8bd4070 	pop	{r4, r5, r6, lr}
 8003a50:	e12fff1e 	bx	lr
 8003a54:	e5913000 	ldr	r3, [r1]
 8003a58:	e0533005 	subs	r3, r3, r5
 8003a5c:	4a000012 	bmi	8003aac <_malloc_r+0xf8>
 8003a60:	e353000b 	cmp	r3, #11
 8003a64:	81a04001 	movhi	r4, r1
 8003a68:	86843003 	strhi	r3, [r4], r3
 8003a6c:	87815003 	strhi	r5, [r1, r3]
 8003a70:	8a000004 	bhi	8003a88 <_malloc_r+0xd4>
 8003a74:	e5913004 	ldr	r3, [r1, #4]
 8003a78:	e1540001 	cmp	r4, r1
 8003a7c:	15843004 	strne	r3, [r4, #4]
 8003a80:	11a04001 	movne	r4, r1
 8003a84:	05823000 	streq	r3, [r2]
 8003a88:	e1a00006 	mov	r0, r6
 8003a8c:	eb00029e 	bl	800450c <__malloc_unlock>
 8003a90:	e284000b 	add	r0, r4, #11
 8003a94:	e2843004 	add	r3, r4, #4
 8003a98:	e3c00007 	bic	r0, r0, #7
 8003a9c:	e0503003 	subs	r3, r0, r3
 8003aa0:	12632000 	rsbne	r2, r3, #0
 8003aa4:	17842003 	strne	r2, [r4, r3]
 8003aa8:	eaffffe7 	b	8003a4c <_malloc_r+0x98>
 8003aac:	e1a04001 	mov	r4, r1
 8003ab0:	e5911004 	ldr	r1, [r1, #4]
 8003ab4:	eaffffd1 	b	8003a00 <_malloc_r+0x4c>
 8003ab8:	e2804003 	add	r4, r0, #3
 8003abc:	e3c44003 	bic	r4, r4, #3
 8003ac0:	e1500004 	cmp	r0, r4
 8003ac4:	0a000004 	beq	8003adc <_malloc_r+0x128>
 8003ac8:	e0441000 	sub	r1, r4, r0
 8003acc:	e1a00006 	mov	r0, r6
 8003ad0:	eb00025f 	bl	8004454 <_sbrk_r>
 8003ad4:	e3700001 	cmn	r0, #1
 8003ad8:	0affffd6 	beq	8003a38 <_malloc_r+0x84>
 8003adc:	e5845000 	str	r5, [r4]
 8003ae0:	eaffffe8 	b	8003a88 <_malloc_r+0xd4>
 8003ae4:	20000568 	.word	0x20000568
 8003ae8:	2000056c 	.word	0x2000056c

08003aec <__ssputs_r>:
 8003aec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	e5916008 	ldr	r6, [r1, #8]
 8003af4:	e1560003 	cmp	r6, r3
 8003af8:	e1a04001 	mov	r4, r1
 8003afc:	e1a09002 	mov	r9, r2
 8003b00:	e1a08003 	mov	r8, r3
 8003b04:	8a00002c 	bhi	8003bbc <__ssputs_r+0xd0>
 8003b08:	e1d1c0bc 	ldrh	ip, [r1, #12]
 8003b0c:	e31c0d12 	tst	ip, #1152	; 0x480
 8003b10:	0a000027 	beq	8003bb4 <__ssputs_r+0xc8>
 8003b14:	e5942014 	ldr	r2, [r4, #20]
 8003b18:	e5945000 	ldr	r5, [r4]
 8003b1c:	e5911010 	ldr	r1, [r1, #16]
 8003b20:	e0822082 	add	r2, r2, r2, lsl #1
 8003b24:	e0457001 	sub	r7, r5, r1
 8003b28:	e0822fa2 	add	r2, r2, r2, lsr #31
 8003b2c:	e2833001 	add	r3, r3, #1
 8003b30:	e1a050c2 	asr	r5, r2, #1
 8003b34:	e0833007 	add	r3, r3, r7
 8003b38:	e1550003 	cmp	r5, r3
 8003b3c:	31a05003 	movcc	r5, r3
 8003b40:	e31c0b01 	tst	ip, #1024	; 0x400
 8003b44:	e1a0a000 	mov	sl, r0
 8003b48:	0a000028 	beq	8003bf0 <__ssputs_r+0x104>
 8003b4c:	e1a01005 	mov	r1, r5
 8003b50:	ebffff97 	bl	80039b4 <_malloc_r>
 8003b54:	e2506000 	subs	r6, r0, #0
 8003b58:	1a000007 	bne	8003b7c <__ssputs_r+0x90>
 8003b5c:	e3a0300c 	mov	r3, #12
 8003b60:	e3e00000 	mvn	r0, #0
 8003b64:	e58a3000 	str	r3, [sl]
 8003b68:	e1d430bc 	ldrh	r3, [r4, #12]
 8003b6c:	e3833040 	orr	r3, r3, #64	; 0x40
 8003b70:	e1c430bc 	strh	r3, [r4, #12]
 8003b74:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 8003b78:	e12fff1e 	bx	lr
 8003b7c:	e1a02007 	mov	r2, r7
 8003b80:	e5941010 	ldr	r1, [r4, #16]
 8003b84:	ebffff3e 	bl	8003884 <memcpy>
 8003b88:	e1d430bc 	ldrh	r3, [r4, #12]
 8003b8c:	e3c33d12 	bic	r3, r3, #1152	; 0x480
 8003b90:	e3833080 	orr	r3, r3, #128	; 0x80
 8003b94:	e1c430bc 	strh	r3, [r4, #12]
 8003b98:	e5846010 	str	r6, [r4, #16]
 8003b9c:	e0866007 	add	r6, r6, r7
 8003ba0:	e5846000 	str	r6, [r4]
 8003ba4:	e1a06008 	mov	r6, r8
 8003ba8:	e5845014 	str	r5, [r4, #20]
 8003bac:	e0455007 	sub	r5, r5, r7
 8003bb0:	e5845008 	str	r5, [r4, #8]
 8003bb4:	e1560008 	cmp	r6, r8
 8003bb8:	9a000000 	bls	8003bc0 <__ssputs_r+0xd4>
 8003bbc:	e1a06008 	mov	r6, r8
 8003bc0:	e1a02006 	mov	r2, r6
 8003bc4:	e1a01009 	mov	r1, r9
 8003bc8:	e5940000 	ldr	r0, [r4]
 8003bcc:	eb00023b 	bl	80044c0 <memmove>
 8003bd0:	e5943008 	ldr	r3, [r4, #8]
 8003bd4:	e0433006 	sub	r3, r3, r6
 8003bd8:	e5843008 	str	r3, [r4, #8]
 8003bdc:	e5943000 	ldr	r3, [r4]
 8003be0:	e0836006 	add	r6, r3, r6
 8003be4:	e5846000 	str	r6, [r4]
 8003be8:	e3a00000 	mov	r0, #0
 8003bec:	eaffffe0 	b	8003b74 <__ssputs_r+0x88>
 8003bf0:	e1a02005 	mov	r2, r5
 8003bf4:	eb000245 	bl	8004510 <_realloc_r>
 8003bf8:	e2506000 	subs	r6, r0, #0
 8003bfc:	1affffe5 	bne	8003b98 <__ssputs_r+0xac>
 8003c00:	e5941010 	ldr	r1, [r4, #16]
 8003c04:	e1a0000a 	mov	r0, sl
 8003c08:	ebffff24 	bl	80038a0 <_free_r>
 8003c0c:	eaffffd2 	b	8003b5c <__ssputs_r+0x70>

08003c10 <_svfiprintf_r>:
 8003c10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	e24dd074 	sub	sp, sp, #116	; 0x74
 8003c18:	e58d300c 	str	r3, [sp, #12]
 8003c1c:	e1d130bc 	ldrh	r3, [r1, #12]
 8003c20:	e3130080 	tst	r3, #128	; 0x80
 8003c24:	e1a09000 	mov	r9, r0
 8003c28:	e1a04001 	mov	r4, r1
 8003c2c:	e1a06002 	mov	r6, r2
 8003c30:	0a00000c 	beq	8003c68 <_svfiprintf_r+0x58>
 8003c34:	e5913010 	ldr	r3, [r1, #16]
 8003c38:	e3530000 	cmp	r3, #0
 8003c3c:	1a000009 	bne	8003c68 <_svfiprintf_r+0x58>
 8003c40:	e3a01040 	mov	r1, #64	; 0x40
 8003c44:	ebffff5a 	bl	80039b4 <_malloc_r>
 8003c48:	e3500000 	cmp	r0, #0
 8003c4c:	03a0300c 	moveq	r3, #12
 8003c50:	e5840000 	str	r0, [r4]
 8003c54:	e5840010 	str	r0, [r4, #16]
 8003c58:	05893000 	streq	r3, [r9]
 8003c5c:	0a0000a9 	beq	8003f08 <_svfiprintf_r+0x2f8>
 8003c60:	e3a03040 	mov	r3, #64	; 0x40
 8003c64:	e5843014 	str	r3, [r4, #20]
 8003c68:	e3a03000 	mov	r3, #0
 8003c6c:	e58d3024 	str	r3, [sp, #36]	; 0x24
 8003c70:	e3a03020 	mov	r3, #32
 8003c74:	e5cd3029 	strb	r3, [sp, #41]	; 0x29
 8003c78:	e3a03030 	mov	r3, #48	; 0x30
 8003c7c:	e5cd302a 	strb	r3, [sp, #42]	; 0x2a
 8003c80:	e1a08006 	mov	r8, r6
 8003c84:	e1a05008 	mov	r5, r8
 8003c88:	e4d53001 	ldrb	r3, [r5], #1
 8003c8c:	e2537025 	subs	r7, r3, #37	; 0x25
 8003c90:	13a07001 	movne	r7, #1
 8003c94:	e3530000 	cmp	r3, #0
 8003c98:	03a07000 	moveq	r7, #0
 8003c9c:	e3570000 	cmp	r7, #0
 8003ca0:	1a000033 	bne	8003d74 <_svfiprintf_r+0x164>
 8003ca4:	e058b006 	subs	fp, r8, r6
 8003ca8:	0a000009 	beq	8003cd4 <_svfiprintf_r+0xc4>
 8003cac:	e1a0300b 	mov	r3, fp
 8003cb0:	e1a02006 	mov	r2, r6
 8003cb4:	e1a01004 	mov	r1, r4
 8003cb8:	e1a00009 	mov	r0, r9
 8003cbc:	ebffff8a 	bl	8003aec <__ssputs_r>
 8003cc0:	e3700001 	cmn	r0, #1
 8003cc4:	0a00008b 	beq	8003ef8 <_svfiprintf_r+0x2e8>
 8003cc8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 8003ccc:	e083b00b 	add	fp, r3, fp
 8003cd0:	e58db024 	str	fp, [sp, #36]	; 0x24
 8003cd4:	e5d83000 	ldrb	r3, [r8]
 8003cd8:	e3530000 	cmp	r3, #0
 8003cdc:	0a000085 	beq	8003ef8 <_svfiprintf_r+0x2e8>
 8003ce0:	e3a03000 	mov	r3, #0
 8003ce4:	e3e02000 	mvn	r2, #0
 8003ce8:	e58d3010 	str	r3, [sp, #16]
 8003cec:	e58d301c 	str	r3, [sp, #28]
 8003cf0:	e58d2014 	str	r2, [sp, #20]
 8003cf4:	e58d3018 	str	r3, [sp, #24]
 8003cf8:	e5cd3053 	strb	r3, [sp, #83]	; 0x53
 8003cfc:	e58d3068 	str	r3, [sp, #104]	; 0x68
 8003d00:	e1a08005 	mov	r8, r5
 8003d04:	e3a02005 	mov	r2, #5
 8003d08:	e4d81001 	ldrb	r1, [r8], #1
 8003d0c:	e59f0224 	ldr	r0, [pc, #548]	; 8003f38 <_svfiprintf_r+0x328>
 8003d10:	eb0001de 	bl	8004490 <memchr>
 8003d14:	e3500000 	cmp	r0, #0
 8003d18:	e59d3010 	ldr	r3, [sp, #16]
 8003d1c:	1a000016 	bne	8003d7c <_svfiprintf_r+0x16c>
 8003d20:	e3130010 	tst	r3, #16
 8003d24:	13a02020 	movne	r2, #32
 8003d28:	15cd2053 	strbne	r2, [sp, #83]	; 0x53
 8003d2c:	e3130008 	tst	r3, #8
 8003d30:	13a0202b 	movne	r2, #43	; 0x2b
 8003d34:	15cd2053 	strbne	r2, [sp, #83]	; 0x53
 8003d38:	e5d52000 	ldrb	r2, [r5]
 8003d3c:	e352002a 	cmp	r2, #42	; 0x2a
 8003d40:	0a000014 	beq	8003d98 <_svfiprintf_r+0x188>
 8003d44:	e3a00000 	mov	r0, #0
 8003d48:	e1a08005 	mov	r8, r5
 8003d4c:	e3a0c00a 	mov	ip, #10
 8003d50:	e59d201c 	ldr	r2, [sp, #28]
 8003d54:	e1a01008 	mov	r1, r8
 8003d58:	e4d13001 	ldrb	r3, [r1], #1
 8003d5c:	e2433030 	sub	r3, r3, #48	; 0x30
 8003d60:	e3530009 	cmp	r3, #9
 8003d64:	9a000026 	bls	8003e04 <_svfiprintf_r+0x1f4>
 8003d68:	e3500000 	cmp	r0, #0
 8003d6c:	0a000015 	beq	8003dc8 <_svfiprintf_r+0x1b8>
 8003d70:	ea00000e 	b	8003db0 <_svfiprintf_r+0x1a0>
 8003d74:	e1a08005 	mov	r8, r5
 8003d78:	eaffffc1 	b	8003c84 <_svfiprintf_r+0x74>
 8003d7c:	e59f21b4 	ldr	r2, [pc, #436]	; 8003f38 <_svfiprintf_r+0x328>
 8003d80:	e0400002 	sub	r0, r0, r2
 8003d84:	e3a02001 	mov	r2, #1
 8003d88:	e1833012 	orr	r3, r3, r2, lsl r0
 8003d8c:	e58d3010 	str	r3, [sp, #16]
 8003d90:	e1a05008 	mov	r5, r8
 8003d94:	eaffffd9 	b	8003d00 <_svfiprintf_r+0xf0>
 8003d98:	e59d200c 	ldr	r2, [sp, #12]
 8003d9c:	e2821004 	add	r1, r2, #4
 8003da0:	e5922000 	ldr	r2, [r2]
 8003da4:	e3520000 	cmp	r2, #0
 8003da8:	e58d100c 	str	r1, [sp, #12]
 8003dac:	ba000001 	blt	8003db8 <_svfiprintf_r+0x1a8>
 8003db0:	e58d201c 	str	r2, [sp, #28]
 8003db4:	ea000003 	b	8003dc8 <_svfiprintf_r+0x1b8>
 8003db8:	e2622000 	rsb	r2, r2, #0
 8003dbc:	e3833002 	orr	r3, r3, #2
 8003dc0:	e58d201c 	str	r2, [sp, #28]
 8003dc4:	e58d3010 	str	r3, [sp, #16]
 8003dc8:	e5d83000 	ldrb	r3, [r8]
 8003dcc:	e353002e 	cmp	r3, #46	; 0x2e
 8003dd0:	1a00001a 	bne	8003e40 <_svfiprintf_r+0x230>
 8003dd4:	e5d83001 	ldrb	r3, [r8, #1]
 8003dd8:	e353002a 	cmp	r3, #42	; 0x2a
 8003ddc:	1a00000c 	bne	8003e14 <_svfiprintf_r+0x204>
 8003de0:	e59d300c 	ldr	r3, [sp, #12]
 8003de4:	e2832004 	add	r2, r3, #4
 8003de8:	e5933000 	ldr	r3, [r3]
 8003dec:	e3530000 	cmp	r3, #0
 8003df0:	b3e03000 	mvnlt	r3, #0
 8003df4:	e58d200c 	str	r2, [sp, #12]
 8003df8:	e2888002 	add	r8, r8, #2
 8003dfc:	e58d3014 	str	r3, [sp, #20]
 8003e00:	ea00000e 	b	8003e40 <_svfiprintf_r+0x230>
 8003e04:	e022329c 	mla	r2, ip, r2, r3
 8003e08:	e3a00001 	mov	r0, #1
 8003e0c:	e1a08001 	mov	r8, r1
 8003e10:	eaffffcf 	b	8003d54 <_svfiprintf_r+0x144>
 8003e14:	e3a03000 	mov	r3, #0
 8003e18:	e3a0000a 	mov	r0, #10
 8003e1c:	e58d3014 	str	r3, [sp, #20]
 8003e20:	e2888001 	add	r8, r8, #1
 8003e24:	e1a01008 	mov	r1, r8
 8003e28:	e4d12001 	ldrb	r2, [r1], #1
 8003e2c:	e2422030 	sub	r2, r2, #48	; 0x30
 8003e30:	e3520009 	cmp	r2, #9
 8003e34:	9a000021 	bls	8003ec0 <_svfiprintf_r+0x2b0>
 8003e38:	e3570000 	cmp	r7, #0
 8003e3c:	1affffee 	bne	8003dfc <_svfiprintf_r+0x1ec>
 8003e40:	e59f50f4 	ldr	r5, [pc, #244]	; 8003f3c <_svfiprintf_r+0x32c>
 8003e44:	e3a02003 	mov	r2, #3
 8003e48:	e5d81000 	ldrb	r1, [r8]
 8003e4c:	e1a00005 	mov	r0, r5
 8003e50:	eb00018e 	bl	8004490 <memchr>
 8003e54:	e3500000 	cmp	r0, #0
 8003e58:	13a02040 	movne	r2, #64	; 0x40
 8003e5c:	10403005 	subne	r3, r0, r5
 8003e60:	159d0010 	ldrne	r0, [sp, #16]
 8003e64:	12888001 	addne	r8, r8, #1
 8003e68:	11800312 	orrne	r0, r0, r2, lsl r3
 8003e6c:	e5d81000 	ldrb	r1, [r8]
 8003e70:	158d0010 	strne	r0, [sp, #16]
 8003e74:	e3a02006 	mov	r2, #6
 8003e78:	e59f00c0 	ldr	r0, [pc, #192]	; 8003f40 <_svfiprintf_r+0x330>
 8003e7c:	e5cd1028 	strb	r1, [sp, #40]	; 0x28
 8003e80:	eb000182 	bl	8004490 <memchr>
 8003e84:	e3500000 	cmp	r0, #0
 8003e88:	e2886001 	add	r6, r8, #1
 8003e8c:	0a000021 	beq	8003f18 <_svfiprintf_r+0x308>
 8003e90:	e59f30ac 	ldr	r3, [pc, #172]	; 8003f44 <_svfiprintf_r+0x334>
 8003e94:	e3530000 	cmp	r3, #0
 8003e98:	1a00000c 	bne	8003ed0 <_svfiprintf_r+0x2c0>
 8003e9c:	e59d300c 	ldr	r3, [sp, #12]
 8003ea0:	e2833007 	add	r3, r3, #7
 8003ea4:	e3c33007 	bic	r3, r3, #7
 8003ea8:	e2833008 	add	r3, r3, #8
 8003eac:	e58d300c 	str	r3, [sp, #12]
 8003eb0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 8003eb4:	e083300a 	add	r3, r3, sl
 8003eb8:	e58d3024 	str	r3, [sp, #36]	; 0x24
 8003ebc:	eaffff6f 	b	8003c80 <_svfiprintf_r+0x70>
 8003ec0:	e0232390 	mla	r3, r0, r3, r2
 8003ec4:	e3a07001 	mov	r7, #1
 8003ec8:	e1a08001 	mov	r8, r1
 8003ecc:	eaffffd4 	b	8003e24 <_svfiprintf_r+0x214>
 8003ed0:	e28d300c 	add	r3, sp, #12
 8003ed4:	e58d3000 	str	r3, [sp]
 8003ed8:	e1a02004 	mov	r2, r4
 8003edc:	e59f3064 	ldr	r3, [pc, #100]	; 8003f48 <_svfiprintf_r+0x338>
 8003ee0:	e28d1010 	add	r1, sp, #16
 8003ee4:	e1a00009 	mov	r0, r9
 8003ee8:	e1a00000 	nop			; (mov r0, r0)
 8003eec:	e3700001 	cmn	r0, #1
 8003ef0:	e1a0a000 	mov	sl, r0
 8003ef4:	1affffed 	bne	8003eb0 <_svfiprintf_r+0x2a0>
 8003ef8:	e1d430bc 	ldrh	r3, [r4, #12]
 8003efc:	e3130040 	tst	r3, #64	; 0x40
 8003f00:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
 8003f04:	0a000000 	beq	8003f0c <_svfiprintf_r+0x2fc>
 8003f08:	e3e00000 	mvn	r0, #0
 8003f0c:	e28dd074 	add	sp, sp, #116	; 0x74
 8003f10:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	e12fff1e 	bx	lr
 8003f18:	e28d300c 	add	r3, sp, #12
 8003f1c:	e58d3000 	str	r3, [sp]
 8003f20:	e1a02004 	mov	r2, r4
 8003f24:	e59f301c 	ldr	r3, [pc, #28]	; 8003f48 <_svfiprintf_r+0x338>
 8003f28:	e28d1010 	add	r1, sp, #16
 8003f2c:	e1a00009 	mov	r0, r9
 8003f30:	eb000062 	bl	80040c0 <_printf_i>
 8003f34:	eaffffec 	b	8003eec <_svfiprintf_r+0x2dc>
 8003f38:	0800ab21 	.word	0x0800ab21
 8003f3c:	0800ab27 	.word	0x0800ab27
 8003f40:	0800ab2b 	.word	0x0800ab2b
 8003f44:	00000000 	.word	0x00000000
 8003f48:	08003aec 	.word	0x08003aec

08003f4c <_printf_common>:
 8003f4c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	e1a09002 	mov	r9, r2
 8003f54:	e1a07003 	mov	r7, r3
 8003f58:	e5912008 	ldr	r2, [r1, #8]
 8003f5c:	e5913010 	ldr	r3, [r1, #16]
 8003f60:	e1530002 	cmp	r3, r2
 8003f64:	b1a03002 	movlt	r3, r2
 8003f68:	e5893000 	str	r3, [r9]
 8003f6c:	e5d12043 	ldrb	r2, [r1, #67]	; 0x43
 8003f70:	e3520000 	cmp	r2, #0
 8003f74:	12833001 	addne	r3, r3, #1
 8003f78:	15893000 	strne	r3, [r9]
 8003f7c:	e5913000 	ldr	r3, [r1]
 8003f80:	e3130020 	tst	r3, #32
 8003f84:	15993000 	ldrne	r3, [r9]
 8003f88:	12833002 	addne	r3, r3, #2
 8003f8c:	15893000 	strne	r3, [r9]
 8003f90:	e5915000 	ldr	r5, [r1]
 8003f94:	e2155006 	ands	r5, r5, #6
 8003f98:	e1a06000 	mov	r6, r0
 8003f9c:	e1a04001 	mov	r4, r1
 8003fa0:	e59d8020 	ldr	r8, [sp, #32]
 8003fa4:	0281a019 	addeq	sl, r1, #25
 8003fa8:	0a000021 	beq	8004034 <_printf_common+0xe8>
 8003fac:	e5d43043 	ldrb	r3, [r4, #67]	; 0x43
 8003fb0:	e5942000 	ldr	r2, [r4]
 8003fb4:	e2933000 	adds	r3, r3, #0
 8003fb8:	13a03001 	movne	r3, #1
 8003fbc:	e3120020 	tst	r2, #32
 8003fc0:	1a00002b 	bne	8004074 <_printf_common+0x128>
 8003fc4:	e2842043 	add	r2, r4, #67	; 0x43
 8003fc8:	e1a01007 	mov	r1, r7
 8003fcc:	e1a00006 	mov	r0, r6
 8003fd0:	e1a0e00f 	mov	lr, pc
 8003fd4:	e12fff18 	bx	r8
 8003fd8:	e3700001 	cmn	r0, #1
 8003fdc:	0a000021 	beq	8004068 <_printf_common+0x11c>
 8003fe0:	e5993000 	ldr	r3, [r9]
 8003fe4:	e594500c 	ldr	r5, [r4, #12]
 8003fe8:	e0455003 	sub	r5, r5, r3
 8003fec:	e5943000 	ldr	r3, [r4]
 8003ff0:	e2033006 	and	r3, r3, #6
 8003ff4:	e2533004 	subs	r3, r3, #4
 8003ff8:	13a03001 	movne	r3, #1
 8003ffc:	e1933fa5 	orrs	r3, r3, r5, lsr #31
 8004000:	13a05000 	movne	r5, #0
 8004004:	e3a09000 	mov	r9, #0
 8004008:	e5943008 	ldr	r3, [r4, #8]
 800400c:	e5942010 	ldr	r2, [r4, #16]
 8004010:	e1530002 	cmp	r3, r2
 8004014:	c0433002 	subgt	r3, r3, r2
 8004018:	c0855003 	addgt	r5, r5, r3
 800401c:	e284401a 	add	r4, r4, #26
 8004020:	e1550009 	cmp	r5, r9
 8004024:	1a00001b 	bne	8004098 <_printf_common+0x14c>
 8004028:	e3a00000 	mov	r0, #0
 800402c:	ea00000e 	b	800406c <_printf_common+0x120>
 8004030:	e2855001 	add	r5, r5, #1
 8004034:	e594300c 	ldr	r3, [r4, #12]
 8004038:	e5992000 	ldr	r2, [r9]
 800403c:	e0433002 	sub	r3, r3, r2
 8004040:	e1530005 	cmp	r3, r5
 8004044:	daffffd8 	ble	8003fac <_printf_common+0x60>
 8004048:	e3a03001 	mov	r3, #1
 800404c:	e1a0200a 	mov	r2, sl
 8004050:	e1a01007 	mov	r1, r7
 8004054:	e1a00006 	mov	r0, r6
 8004058:	e1a0e00f 	mov	lr, pc
 800405c:	e12fff18 	bx	r8
 8004060:	e3700001 	cmn	r0, #1
 8004064:	1afffff1 	bne	8004030 <_printf_common+0xe4>
 8004068:	e3e00000 	mvn	r0, #0
 800406c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	e12fff1e 	bx	lr
 8004074:	e3a00030 	mov	r0, #48	; 0x30
 8004078:	e0841003 	add	r1, r4, r3
 800407c:	e5c10043 	strb	r0, [r1, #67]	; 0x43
 8004080:	e2832001 	add	r2, r3, #1
 8004084:	e5d41045 	ldrb	r1, [r4, #69]	; 0x45
 8004088:	e0842002 	add	r2, r4, r2
 800408c:	e2833002 	add	r3, r3, #2
 8004090:	e5c21043 	strb	r1, [r2, #67]	; 0x43
 8004094:	eaffffca 	b	8003fc4 <_printf_common+0x78>
 8004098:	e3a03001 	mov	r3, #1
 800409c:	e1a02004 	mov	r2, r4
 80040a0:	e1a01007 	mov	r1, r7
 80040a4:	e1a00006 	mov	r0, r6
 80040a8:	e1a0e00f 	mov	lr, pc
 80040ac:	e12fff18 	bx	r8
 80040b0:	e3700001 	cmn	r0, #1
 80040b4:	0affffeb 	beq	8004068 <_printf_common+0x11c>
 80040b8:	e2899001 	add	r9, r9, #1
 80040bc:	eaffffd7 	b	8004020 <_printf_common+0xd4>

080040c0 <_printf_i>:
 80040c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	e1a07002 	mov	r7, r2
 80040c8:	e5d12018 	ldrb	r2, [r1, #24]
 80040cc:	e24dd014 	sub	sp, sp, #20
 80040d0:	e352006e 	cmp	r2, #110	; 0x6e
 80040d4:	e1a08003 	mov	r8, r3
 80040d8:	e1a06000 	mov	r6, r0
 80040dc:	e1a04001 	mov	r4, r1
 80040e0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
 80040e4:	e281a043 	add	sl, r1, #67	; 0x43
 80040e8:	0a000072 	beq	80042b8 <_printf_i+0x1f8>
 80040ec:	8a000031 	bhi	80041b8 <_printf_i+0xf8>
 80040f0:	e3520063 	cmp	r2, #99	; 0x63
 80040f4:	0a000051 	beq	8004240 <_printf_i+0x180>
 80040f8:	8a000008 	bhi	8004120 <_printf_i+0x60>
 80040fc:	e3520000 	cmp	r2, #0
 8004100:	0a000079 	beq	80042ec <_printf_i+0x22c>
 8004104:	e3520058 	cmp	r2, #88	; 0x58
 8004108:	05c12045 	strbeq	r2, [r1, #69]	; 0x45
 800410c:	059f9338 	ldreq	r9, [pc, #824]	; 800444c <_printf_i+0x38c>
 8004110:	0a000035 	beq	80041ec <_printf_i+0x12c>
 8004114:	e2845042 	add	r5, r4, #66	; 0x42
 8004118:	e5c42042 	strb	r2, [r4, #66]	; 0x42
 800411c:	ea00004d 	b	8004258 <_printf_i+0x198>
 8004120:	e3520064 	cmp	r2, #100	; 0x64
 8004124:	0a000001 	beq	8004130 <_printf_i+0x70>
 8004128:	e3520069 	cmp	r2, #105	; 0x69
 800412c:	1afffff8 	bne	8004114 <_printf_i+0x54>
 8004130:	e5940000 	ldr	r0, [r4]
 8004134:	e5931000 	ldr	r1, [r3]
 8004138:	e3100080 	tst	r0, #128	; 0x80
 800413c:	e2812004 	add	r2, r1, #4
 8004140:	15832000 	strne	r2, [r3]
 8004144:	15910000 	ldrne	r0, [r1]
 8004148:	1a000004 	bne	8004160 <_printf_i+0xa0>
 800414c:	e3100040 	tst	r0, #64	; 0x40
 8004150:	e5910000 	ldr	r0, [r1]
 8004154:	e5832000 	str	r2, [r3]
 8004158:	11a00800 	lslne	r0, r0, #16
 800415c:	11a00840 	asrne	r0, r0, #16
 8004160:	e3500000 	cmp	r0, #0
 8004164:	b3a0302d 	movlt	r3, #45	; 0x2d
 8004168:	e3a0b00a 	mov	fp, #10
 800416c:	b5c43043 	strblt	r3, [r4, #67]	; 0x43
 8004170:	e59f92d4 	ldr	r9, [pc, #724]	; 800444c <_printf_i+0x38c>
 8004174:	b2600000 	rsblt	r0, r0, #0
 8004178:	e5943004 	ldr	r3, [r4, #4]
 800417c:	e3530000 	cmp	r3, #0
 8004180:	e5843008 	str	r3, [r4, #8]
 8004184:	ba00008e 	blt	80043c4 <_printf_i+0x304>
 8004188:	e5942000 	ldr	r2, [r4]
 800418c:	e3500000 	cmp	r0, #0
 8004190:	e3c22004 	bic	r2, r2, #4
 8004194:	e5842000 	str	r2, [r4]
 8004198:	1a00008b 	bne	80043cc <_printf_i+0x30c>
 800419c:	e3530000 	cmp	r3, #0
 80041a0:	01a0500a 	moveq	r5, sl
 80041a4:	0a00008f 	beq	80043e8 <_printf_i+0x328>
 80041a8:	e5d93000 	ldrb	r3, [r9]
 80041ac:	e2845042 	add	r5, r4, #66	; 0x42
 80041b0:	e5c43042 	strb	r3, [r4, #66]	; 0x42
 80041b4:	ea00008b 	b	80043e8 <_printf_i+0x328>
 80041b8:	e3520073 	cmp	r2, #115	; 0x73
 80041bc:	0a00004e 	beq	80042fc <_printf_i+0x23c>
 80041c0:	8a000019 	bhi	800422c <_printf_i+0x16c>
 80041c4:	e352006f 	cmp	r2, #111	; 0x6f
 80041c8:	0a000024 	beq	8004260 <_printf_i+0x1a0>
 80041cc:	e3520070 	cmp	r2, #112	; 0x70
 80041d0:	05912000 	ldreq	r2, [r1]
 80041d4:	03822020 	orreq	r2, r2, #32
 80041d8:	05812000 	streq	r2, [r1]
 80041dc:	1affffcc 	bne	8004114 <_printf_i+0x54>
 80041e0:	e3a02078 	mov	r2, #120	; 0x78
 80041e4:	e59f9264 	ldr	r9, [pc, #612]	; 8004450 <_printf_i+0x390>
 80041e8:	e5c42045 	strb	r2, [r4, #69]	; 0x45
 80041ec:	e5930000 	ldr	r0, [r3]
 80041f0:	e5942000 	ldr	r2, [r4]
 80041f4:	e2801004 	add	r1, r0, #4
 80041f8:	e3120080 	tst	r2, #128	; 0x80
 80041fc:	e5900000 	ldr	r0, [r0]
 8004200:	e5831000 	str	r1, [r3]
 8004204:	0a000027 	beq	80042a8 <_printf_i+0x1e8>
 8004208:	e3120001 	tst	r2, #1
 800420c:	13822020 	orrne	r2, r2, #32
 8004210:	15842000 	strne	r2, [r4]
 8004214:	e3500000 	cmp	r0, #0
 8004218:	05943000 	ldreq	r3, [r4]
 800421c:	03c33020 	biceq	r3, r3, #32
 8004220:	05843000 	streq	r3, [r4]
 8004224:	e3a0b010 	mov	fp, #16
 8004228:	ea00001b 	b	800429c <_printf_i+0x1dc>
 800422c:	e3520075 	cmp	r2, #117	; 0x75
 8004230:	0a00000a 	beq	8004260 <_printf_i+0x1a0>
 8004234:	e3520078 	cmp	r2, #120	; 0x78
 8004238:	0affffe8 	beq	80041e0 <_printf_i+0x120>
 800423c:	eaffffb4 	b	8004114 <_printf_i+0x54>
 8004240:	e5932000 	ldr	r2, [r3]
 8004244:	e2821004 	add	r1, r2, #4
 8004248:	e5831000 	str	r1, [r3]
 800424c:	e5923000 	ldr	r3, [r2]
 8004250:	e5c43042 	strb	r3, [r4, #66]	; 0x42
 8004254:	e2845042 	add	r5, r4, #66	; 0x42
 8004258:	e3a03001 	mov	r3, #1
 800425c:	ea000032 	b	800432c <_printf_i+0x26c>
 8004260:	e594c000 	ldr	ip, [r4]
 8004264:	e5931000 	ldr	r1, [r3]
 8004268:	e31c0080 	tst	ip, #128	; 0x80
 800426c:	e2810004 	add	r0, r1, #4
 8004270:	e5830000 	str	r0, [r3]
 8004274:	0a000001 	beq	8004280 <_printf_i+0x1c0>
 8004278:	e5910000 	ldr	r0, [r1]
 800427c:	ea000002 	b	800428c <_printf_i+0x1cc>
 8004280:	e31c0040 	tst	ip, #64	; 0x40
 8004284:	11d100b0 	ldrhne	r0, [r1]
 8004288:	0afffffa 	beq	8004278 <_printf_i+0x1b8>
 800428c:	e352006f 	cmp	r2, #111	; 0x6f
 8004290:	13a0b00a 	movne	fp, #10
 8004294:	03a0b008 	moveq	fp, #8
 8004298:	e59f91ac 	ldr	r9, [pc, #428]	; 800444c <_printf_i+0x38c>
 800429c:	e3a03000 	mov	r3, #0
 80042a0:	e5c43043 	strb	r3, [r4, #67]	; 0x43
 80042a4:	eaffffb3 	b	8004178 <_printf_i+0xb8>
 80042a8:	e3120040 	tst	r2, #64	; 0x40
 80042ac:	11a00800 	lslne	r0, r0, #16
 80042b0:	11a00820 	lsrne	r0, r0, #16
 80042b4:	eaffffd3 	b	8004208 <_printf_i+0x148>
 80042b8:	e5932000 	ldr	r2, [r3]
 80042bc:	e591c000 	ldr	ip, [r1]
 80042c0:	e2820004 	add	r0, r2, #4
 80042c4:	e5911014 	ldr	r1, [r1, #20]
 80042c8:	e5830000 	str	r0, [r3]
 80042cc:	e31c0080 	tst	ip, #128	; 0x80
 80042d0:	e5923000 	ldr	r3, [r2]
 80042d4:	0a000001 	beq	80042e0 <_printf_i+0x220>
 80042d8:	e5831000 	str	r1, [r3]
 80042dc:	ea000002 	b	80042ec <_printf_i+0x22c>
 80042e0:	e31c0040 	tst	ip, #64	; 0x40
 80042e4:	11c310b0 	strhne	r1, [r3]
 80042e8:	0afffffa 	beq	80042d8 <_printf_i+0x218>
 80042ec:	e3a03000 	mov	r3, #0
 80042f0:	e1a0500a 	mov	r5, sl
 80042f4:	e5843010 	str	r3, [r4, #16]
 80042f8:	ea000047 	b	800441c <_printf_i+0x35c>
 80042fc:	e5932000 	ldr	r2, [r3]
 8004300:	e2821004 	add	r1, r2, #4
 8004304:	e5831000 	str	r1, [r3]
 8004308:	e5925000 	ldr	r5, [r2]
 800430c:	e3a01000 	mov	r1, #0
 8004310:	e5942004 	ldr	r2, [r4, #4]
 8004314:	e1a00005 	mov	r0, r5
 8004318:	eb00005c 	bl	8004490 <memchr>
 800431c:	e3500000 	cmp	r0, #0
 8004320:	10400005 	subne	r0, r0, r5
 8004324:	15840004 	strne	r0, [r4, #4]
 8004328:	e5943004 	ldr	r3, [r4, #4]
 800432c:	e5843010 	str	r3, [r4, #16]
 8004330:	e3a03000 	mov	r3, #0
 8004334:	e5c43043 	strb	r3, [r4, #67]	; 0x43
 8004338:	ea000037 	b	800441c <_printf_i+0x35c>
 800433c:	e5943010 	ldr	r3, [r4, #16]
 8004340:	e1a02005 	mov	r2, r5
 8004344:	e1a01007 	mov	r1, r7
 8004348:	e1a00006 	mov	r0, r6
 800434c:	e1a0e00f 	mov	lr, pc
 8004350:	e12fff18 	bx	r8
 8004354:	e3700001 	cmn	r0, #1
 8004358:	0a000037 	beq	800443c <_printf_i+0x37c>
 800435c:	e5943000 	ldr	r3, [r4]
 8004360:	e3130002 	tst	r3, #2
 8004364:	1a000013 	bne	80043b8 <_printf_i+0x2f8>
 8004368:	e594000c 	ldr	r0, [r4, #12]
 800436c:	e59d300c 	ldr	r3, [sp, #12]
 8004370:	e1500003 	cmp	r0, r3
 8004374:	b1a00003 	movlt	r0, r3
 8004378:	ea000030 	b	8004440 <_printf_i+0x380>
 800437c:	e3a03001 	mov	r3, #1
 8004380:	e1a02009 	mov	r2, r9
 8004384:	e1a01007 	mov	r1, r7
 8004388:	e1a00006 	mov	r0, r6
 800438c:	e1a0e00f 	mov	lr, pc
 8004390:	e12fff18 	bx	r8
 8004394:	e3700001 	cmn	r0, #1
 8004398:	0a000027 	beq	800443c <_printf_i+0x37c>
 800439c:	e2855001 	add	r5, r5, #1
 80043a0:	e594300c 	ldr	r3, [r4, #12]
 80043a4:	e59d200c 	ldr	r2, [sp, #12]
 80043a8:	e0433002 	sub	r3, r3, r2
 80043ac:	e1530005 	cmp	r3, r5
 80043b0:	cafffff1 	bgt	800437c <_printf_i+0x2bc>
 80043b4:	eaffffeb 	b	8004368 <_printf_i+0x2a8>
 80043b8:	e3a05000 	mov	r5, #0
 80043bc:	e2849019 	add	r9, r4, #25
 80043c0:	eafffff6 	b	80043a0 <_printf_i+0x2e0>
 80043c4:	e3500000 	cmp	r0, #0
 80043c8:	0affff76 	beq	80041a8 <_printf_i+0xe8>
 80043cc:	e1a0500a 	mov	r5, sl
 80043d0:	e1a0100b 	mov	r1, fp
 80043d4:	eb0000b0 	bl	800469c <__aeabi_uidivmod>
 80043d8:	e7d93001 	ldrb	r3, [r9, r1]
 80043dc:	e3500000 	cmp	r0, #0
 80043e0:	e5653001 	strb	r3, [r5, #-1]!
 80043e4:	1afffff9 	bne	80043d0 <_printf_i+0x310>
 80043e8:	e35b0008 	cmp	fp, #8
 80043ec:	1a000008 	bne	8004414 <_printf_i+0x354>
 80043f0:	e5943000 	ldr	r3, [r4]
 80043f4:	e3130001 	tst	r3, #1
 80043f8:	0a000005 	beq	8004414 <_printf_i+0x354>
 80043fc:	e5943010 	ldr	r3, [r4, #16]
 8004400:	e5942004 	ldr	r2, [r4, #4]
 8004404:	e1520003 	cmp	r2, r3
 8004408:	d3a03030 	movle	r3, #48	; 0x30
 800440c:	d5453001 	strble	r3, [r5, #-1]
 8004410:	d2455001 	suble	r5, r5, #1
 8004414:	e04aa005 	sub	sl, sl, r5
 8004418:	e584a010 	str	sl, [r4, #16]
 800441c:	e58d8000 	str	r8, [sp]
 8004420:	e1a03007 	mov	r3, r7
 8004424:	e28d200c 	add	r2, sp, #12
 8004428:	e1a01004 	mov	r1, r4
 800442c:	e1a00006 	mov	r0, r6
 8004430:	ebfffec5 	bl	8003f4c <_printf_common>
 8004434:	e3700001 	cmn	r0, #1
 8004438:	1affffbf 	bne	800433c <_printf_i+0x27c>
 800443c:	e3e00000 	mvn	r0, #0
 8004440:	e28dd014 	add	sp, sp, #20
 8004444:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004448:	e12fff1e 	bx	lr
 800444c:	0800ab32 	.word	0x0800ab32
 8004450:	0800ab43 	.word	0x0800ab43

08004454 <_sbrk_r>:
 8004454:	e3a03000 	mov	r3, #0
 8004458:	e92d4070 	push	{r4, r5, r6, lr}
 800445c:	e59f4028 	ldr	r4, [pc, #40]	; 800448c <_sbrk_r+0x38>
 8004460:	e1a05000 	mov	r5, r0
 8004464:	e1a00001 	mov	r0, r1
 8004468:	e5843000 	str	r3, [r4]
 800446c:	fafff3cb 	blx	80013a0 <_sbrk>
 8004470:	e3700001 	cmn	r0, #1
 8004474:	1a000002 	bne	8004484 <_sbrk_r+0x30>
 8004478:	e5943000 	ldr	r3, [r4]
 800447c:	e3530000 	cmp	r3, #0
 8004480:	15853000 	strne	r3, [r5]
 8004484:	e8bd4070 	pop	{r4, r5, r6, lr}
 8004488:	e12fff1e 	bx	lr
 800448c:	2000057c 	.word	0x2000057c

08004490 <memchr>:
 8004490:	e20110ff 	and	r1, r1, #255	; 0xff
 8004494:	e0802002 	add	r2, r0, r2
 8004498:	e1500002 	cmp	r0, r2
 800449c:	e1a03000 	mov	r3, r0
 80044a0:	03a03000 	moveq	r3, #0
 80044a4:	0a000003 	beq	80044b8 <memchr+0x28>
 80044a8:	e5d3c000 	ldrb	ip, [r3]
 80044ac:	e15c0001 	cmp	ip, r1
 80044b0:	e2800001 	add	r0, r0, #1
 80044b4:	1afffff7 	bne	8004498 <memchr+0x8>
 80044b8:	e1a00003 	mov	r0, r3
 80044bc:	e12fff1e 	bx	lr

080044c0 <memmove>:
 80044c0:	e1500001 	cmp	r0, r1
 80044c4:	e0813002 	add	r3, r1, r2
 80044c8:	8a000005 	bhi	80044e4 <memmove+0x24>
 80044cc:	e2402001 	sub	r2, r0, #1
 80044d0:	e1510003 	cmp	r1, r3
 80044d4:	012fff1e 	bxeq	lr
 80044d8:	e4d1c001 	ldrb	ip, [r1], #1
 80044dc:	e5e2c001 	strb	ip, [r2, #1]!
 80044e0:	eafffffa 	b	80044d0 <memmove+0x10>
 80044e4:	e1530000 	cmp	r3, r0
 80044e8:	80801002 	addhi	r1, r0, r2
 80044ec:	80422003 	subhi	r2, r2, r3
 80044f0:	9afffff5 	bls	80044cc <memmove+0xc>
 80044f4:	e1730002 	cmn	r3, r2
 80044f8:	012fff1e 	bxeq	lr
 80044fc:	e573c001 	ldrb	ip, [r3, #-1]!
 8004500:	e561c001 	strb	ip, [r1, #-1]!
 8004504:	eafffffa 	b	80044f4 <memmove+0x34>

08004508 <__malloc_lock>:
 8004508:	e12fff1e 	bx	lr

0800450c <__malloc_unlock>:
 800450c:	e12fff1e 	bx	lr

08004510 <_realloc_r>:
 8004510:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8004514:	e2516000 	subs	r6, r1, #0
 8004518:	e1a04002 	mov	r4, r2
 800451c:	1a000005 	bne	8004538 <_realloc_r+0x28>
 8004520:	e1a01002 	mov	r1, r2
 8004524:	ebfffd22 	bl	80039b4 <_malloc_r>
 8004528:	e1a05000 	mov	r5, r0
 800452c:	e1a00005 	mov	r0, r5
 8004530:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8004534:	e12fff1e 	bx	lr
 8004538:	e3520000 	cmp	r2, #0
 800453c:	1a000002 	bne	800454c <_realloc_r+0x3c>
 8004540:	ebfffcd6 	bl	80038a0 <_free_r>
 8004544:	e1a05004 	mov	r5, r4
 8004548:	eafffff7 	b	800452c <_realloc_r+0x1c>
 800454c:	e1a07000 	mov	r7, r0
 8004550:	eb00000e 	bl	8004590 <_malloc_usable_size_r>
 8004554:	e1500004 	cmp	r0, r4
 8004558:	21a05006 	movcs	r5, r6
 800455c:	2afffff2 	bcs	800452c <_realloc_r+0x1c>
 8004560:	e1a01004 	mov	r1, r4
 8004564:	e1a00007 	mov	r0, r7
 8004568:	ebfffd11 	bl	80039b4 <_malloc_r>
 800456c:	e2505000 	subs	r5, r0, #0
 8004570:	0affffed 	beq	800452c <_realloc_r+0x1c>
 8004574:	e1a01006 	mov	r1, r6
 8004578:	e1a02004 	mov	r2, r4
 800457c:	ebfffcc0 	bl	8003884 <memcpy>
 8004580:	e1a01006 	mov	r1, r6
 8004584:	e1a00007 	mov	r0, r7
 8004588:	ebfffcc4 	bl	80038a0 <_free_r>
 800458c:	eaffffe6 	b	800452c <_realloc_r+0x1c>

08004590 <_malloc_usable_size_r>:
 8004590:	e5113004 	ldr	r3, [r1, #-4]
 8004594:	e2430004 	sub	r0, r3, #4
 8004598:	e3530000 	cmp	r3, #0
 800459c:	b7913000 	ldrlt	r3, [r1, r0]
 80045a0:	b0800003 	addlt	r0, r0, r3
 80045a4:	e12fff1e 	bx	lr

080045a8 <__udivsi3>:
 80045a8:	e2512001 	subs	r2, r1, #1
 80045ac:	012fff1e 	bxeq	lr
 80045b0:	3a000036 	bcc	8004690 <__udivsi3+0xe8>
 80045b4:	e1500001 	cmp	r0, r1
 80045b8:	9a000022 	bls	8004648 <__udivsi3+0xa0>
 80045bc:	e1110002 	tst	r1, r2
 80045c0:	0a000023 	beq	8004654 <__udivsi3+0xac>
 80045c4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 80045c8:	01a01181 	lsleq	r1, r1, #3
 80045cc:	03a03008 	moveq	r3, #8
 80045d0:	13a03001 	movne	r3, #1
 80045d4:	e3510201 	cmp	r1, #268435456	; 0x10000000
 80045d8:	31510000 	cmpcc	r1, r0
 80045dc:	31a01201 	lslcc	r1, r1, #4
 80045e0:	31a03203 	lslcc	r3, r3, #4
 80045e4:	3afffffa 	bcc	80045d4 <__udivsi3+0x2c>
 80045e8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 80045ec:	31510000 	cmpcc	r1, r0
 80045f0:	31a01081 	lslcc	r1, r1, #1
 80045f4:	31a03083 	lslcc	r3, r3, #1
 80045f8:	3afffffa 	bcc	80045e8 <__udivsi3+0x40>
 80045fc:	e3a02000 	mov	r2, #0
 8004600:	e1500001 	cmp	r0, r1
 8004604:	20400001 	subcs	r0, r0, r1
 8004608:	21822003 	orrcs	r2, r2, r3
 800460c:	e15000a1 	cmp	r0, r1, lsr #1
 8004610:	204000a1 	subcs	r0, r0, r1, lsr #1
 8004614:	218220a3 	orrcs	r2, r2, r3, lsr #1
 8004618:	e1500121 	cmp	r0, r1, lsr #2
 800461c:	20400121 	subcs	r0, r0, r1, lsr #2
 8004620:	21822123 	orrcs	r2, r2, r3, lsr #2
 8004624:	e15001a1 	cmp	r0, r1, lsr #3
 8004628:	204001a1 	subcs	r0, r0, r1, lsr #3
 800462c:	218221a3 	orrcs	r2, r2, r3, lsr #3
 8004630:	e3500000 	cmp	r0, #0
 8004634:	11b03223 	lsrsne	r3, r3, #4
 8004638:	11a01221 	lsrne	r1, r1, #4
 800463c:	1affffef 	bne	8004600 <__udivsi3+0x58>
 8004640:	e1a00002 	mov	r0, r2
 8004644:	e12fff1e 	bx	lr
 8004648:	03a00001 	moveq	r0, #1
 800464c:	13a00000 	movne	r0, #0
 8004650:	e12fff1e 	bx	lr
 8004654:	e3510801 	cmp	r1, #65536	; 0x10000
 8004658:	21a01821 	lsrcs	r1, r1, #16
 800465c:	23a02010 	movcs	r2, #16
 8004660:	33a02000 	movcc	r2, #0
 8004664:	e3510c01 	cmp	r1, #256	; 0x100
 8004668:	21a01421 	lsrcs	r1, r1, #8
 800466c:	22822008 	addcs	r2, r2, #8
 8004670:	e3510010 	cmp	r1, #16
 8004674:	21a01221 	lsrcs	r1, r1, #4
 8004678:	22822004 	addcs	r2, r2, #4
 800467c:	e3510004 	cmp	r1, #4
 8004680:	82822003 	addhi	r2, r2, #3
 8004684:	908220a1 	addls	r2, r2, r1, lsr #1
 8004688:	e1a00230 	lsr	r0, r0, r2
 800468c:	e12fff1e 	bx	lr
 8004690:	e3500000 	cmp	r0, #0
 8004694:	13e00000 	mvnne	r0, #0
 8004698:	ea000007 	b	80046bc <__aeabi_idiv0>

0800469c <__aeabi_uidivmod>:
 800469c:	e3510000 	cmp	r1, #0
 80046a0:	0afffffa 	beq	8004690 <__udivsi3+0xe8>
 80046a4:	e92d4003 	push	{r0, r1, lr}
 80046a8:	ebffffbe 	bl	80045a8 <__udivsi3>
 80046ac:	e8bd4006 	pop	{r1, r2, lr}
 80046b0:	e0030092 	mul	r3, r2, r0
 80046b4:	e0411003 	sub	r1, r1, r3
 80046b8:	e12fff1e 	bx	lr

080046bc <__aeabi_idiv0>:
 80046bc:	e12fff1e 	bx	lr

080046c0 <handlers>:
 80046c0:	080005e1 080005e1 080005e1 080005e1     ................
 80046d0:	080005e1 080005e1 080005e1 080005e1     ................
 80046e0:	080005e1 080005e1 080005e1 080005e1     ................
 80046f0:	080005e1 080005e1 080005e1 080005e9     ................
 8004700:	080005e1                                ....

08004704 <buttonsTestOrder>:
 8004704:	01090008 030b020a 070d040c 060e0f05     ................
 8004714:	00001110                                ....

08004718 <handlers>:
 8004718:	08000641 0800065d 0800067d 0800069d     A...]...}.......
 8004728:	080006bd 080006dd 080006fd 0800071d     ................
 8004738:	0800073d 0800075d 0800077d 0800079d     =...]...}.......
 8004748:	080007bd 080007dd 0800086d 080007fd     ........m.......
 8004758:	0800081d                                ....

0800475c <handlers>:
 800475c:	08000931 08000931 08000931 08000931     1...1...1...1...
 800476c:	08000931 08000931 08000931 08000931     1...1...1...1...
 800477c:	08000931 08000931 08000931 08000931     1...1...1...1...
 800478c:	08000931 08000931 08000931 08000939     1...1...1...9...
 800479c:	08000931                                1...

080047a0 <handlers>:
 80047a0:	080009a1 080009a1 080009a1 080009a1     ................
 80047b0:	080009a1 080009a1 080009a1 080009a1     ................
 80047c0:	080009a1 080009a1 080009a1 080009a1     ................
 80047d0:	080009a1 080009a1 080009a9 080009a1     ................
 80047e0:	080009a1 00000105                       ........

080047e8 <tetrominos>:
 80047e8:	01010001 03010201 02010200 02030202     ................
 80047f8:	01030003 03030203 01010100 01030102     ................
 8004808:	00010000 02010101 02000100 01020101     ................
 8004818:	01010001 02020201 01010100 01020002     ................
 8004828:	00010200 02010101 01010100 02020102     ................
 8004838:	01010001 00020201 01000000 01020101     ................
 8004848:	02000100 02010101 02000100 02010101     ................
 8004858:	02000100 02010101 02000100 02010101     ................
 8004868:	02000100 01010001 01010100 02020201     ................
 8004878:	02010101 01020002 00010000 01020101     ................
 8004888:	00010100 02010101 01010100 01020201     ................
 8004898:	01010001 01020201 00010100 01020101     ................
 80048a8:	01000000 02010101 01010200 01020201     ................
 80048b8:	01010001 02020102 00010100 00020101     ................

080048c8 <handlers>:
 80048c8:	0800114d 0800114d 0800114d 0800114d     M...M...M...M...
 80048d8:	08001129 0800114d 0800114d 0800114d     )...M...M...M...
 80048e8:	0800114d 0800114d 0800114d 0800114d     M...M...M...M...
 80048f8:	08001109 0800114d 08001155 0800114d     ....M...U...M...
 8004908:	080010f9                                ....

0800490c <manualTestsHandlers>:
 800490c:	080009c1 080008a1 08001369 08000951     ........i...Q...
 800491c:	08001219 080012d1 08000609 726f6f44     ............Door
 800492c:	73657420 00000074 6279654b 6472616f      test...Keyboard
 800493c:	73657420 00000074 69727541 54206167      test...Auriga T
 800494c:	69727465 00000073 70736944 2079616c     etris...Display 
 800495c:	74736574 00000000 6f746f4d 65742072     test....Motor te
 800496c:	00007473 6e756f53 65742064 00007473     st..Sound test..
 800497c:	72616c41 6574206d 00007473              Alarm test..

08004988 <handlers>:
 8004988:	080011d9 080011d9 080011d9 080011d9     ................
 8004998:	0800120b 080011d9 080011d9 080011d9     ................
 80049a8:	080011d9 080011d9 080011d9 080011d9     ................
 80049b8:	080011fd 080011d9 080011d9 080011e1     ................
 80049c8:	080011d9                                ....

080049cc <handlers>:
 80049cc:	080012ad 080012ad 080012ad 080012ad     ................
 80049dc:	080012ad 080012ad 080012ad 080012ad     ................
 80049ec:	080012ad 080012ad 080012ad 080012ad     ................
 80049fc:	080012ad 080012ad 080012ad 080012b5     ................
 8004a0c:	080012ad                                ....

08004a10 <handlers>:
 8004a10:	08001309 08001309 08001309 08001309     ................
 8004a20:	08001309 08001309 08001361 08001309     ........a.......
 8004a30:	08001309 08001309 08001309 08001359     ............Y...
 8004a40:	08001351 08001349 08001325 08001331     Q...I...%...1...
 8004a50:	08001309 63617453 7266206b 3a656d61     ....Stack frame:
 8004a60:	0000000a 20305220 2520203d 0a583830     .... R0 =  %08X.
 8004a70:	00000000 20315220 2520203d 0a583830     .... R1 =  %08X.
 8004a80:	00000000 20325220 2520203d 0a583830     .... R2 =  %08X.
 8004a90:	00000000 20335220 2520203d 0a583830     .... R3 =  %08X.
 8004aa0:	00000000 32315220 25203d20 0a583830     .... R12 = %08X.
 8004ab0:	00000000 20524c20 2520203d 0a583830     .... LR =  %08X.
 8004ac0:	00000000 20435020 2520203d 0a583830     .... PC =  %08X.
 8004ad0:	00000000 52535020 25203d20 0a583830     .... PSR = %08X.
 8004ae0:	00000000 2f525346 3a524146 0000000a     ....FSR/FAR:....
 8004af0:	53464320 203d2052 38302520 00000a58      CFSR =  %08X...
 8004b00:	53464820 203d2052 38302520 00000a58      HFSR =  %08X...
 8004b10:	53464420 203d2052 38302520 00000a58      DFSR =  %08X...
 8004b20:	53464120 203d2052 38302520 00000a58      AFSR =  %08X...
 8004b30:	464d4d20 3d205241 38302520 00000a58      MMFAR = %08X...
 8004b40:	41464220 203d2052 38302520 00000a58      BFAR =  %08X...
 8004b50:	6373694d 0000000a 2f524c20 5f435845     Misc.... LR/EXC_
 8004b60:	55544552 203d4e52 58383025 0000000a     RETURN= %08X....
 8004b70:	7261485b 75614664 0a5d746c 00000000     [HardFault].....
 8004b80:	7375425b 6c756146 000a5d74 6173555b     [BusFault]..[Usa
 8004b90:	61466567 5d746c75 0000000a              geFault]....

08004b9c <AHBPrescTable>:
	...
 8004ba4:	04030201 09080706                       ........

08004bac <MSIRangeTable>:
 8004bac:	000186a0 00030d40 00061a80 000c3500     ....@........5..
 8004bbc:	000f4240 001e8480 003d0900 007a1200     @B........=...z.
 8004bcc:	00f42400 016e3600 01e84800 02dc6c00     .$...6n..H...l..

08004bdc <DisplayInitSequence>:
 8004bdc:	3a001100 36000501 b2000001 00010001     ...:...6........
 8004bec:	33010001 b7003301 b8003501 2b012f01     ...3.3...5.../.+
 8004bfc:	bb002f01 c0002401 c3002c01 c4000b01     ./...$...,......
 8004c0c:	c6002001 d0001101 a101a401 0301e800     . ..............
 8004c1c:	0d01e900 00011201 d001e000 00010001     ................
 8004c2c:	11010801 2b011a01 42013301 12012601     .......+.3.B.&..
 8004c3c:	2f012101 e1001101 0201d001 0d010901     .!./............
 8004c4c:	27010d01 33012b01 17014201 11011201     ...'.+.3.B......
 8004c5c:	31012f01 2a002100 00010001 ef010001     ./.1.!.*........
 8004c6c:	00012b00 01010001 29003f01 79646f42     .+.......?.)Body
 8004c7c:	72617547 00000064 00004d54 4d524120     Guard...TM.. ARM
 8004c8c:	726f4320 2d786574 6920344d 6469736e      Cortex-M4 insid
 8004c9c:	00000065 74666f53 65726177 72655620     e...Software Ver
 8004cac:	6e6f6973 0000203a 7478654e 206e6547     sion: ..NextGen 
 8004cbc:	6f6d6544 72657620 6e6f6973 00000000     Demo version....
 8004ccc:	7262694c 00797261 2d2d2d2d 2d2d2d2d     Library.--------
 8004cdc:	002d2d2d 69726553 4e206c61 65626d75     ---.Serial Numbe
 8004cec:	00203a72 20202054 20312020 00202020     r: .T     1    .
 8004cfc:	646f7250 69746375 44206e6f 3a657461     Production Date:
 8004d0c:	00000020 4e2d3231 322d766f 00393130      ...12-Nov-2019.
 8004d1c:	68636554 6963696e 6f206e61 6f697470     Technician optio
 8004d2c:	203a736e 00000000 656c6553 00207463     ns: ....Select .
 8004d3c:	0000202c 646e6120 65727020 00207373     , .. and press .
 8004d4c:	7079654b 54206461 20747365 00000000     Keypad Test ....
 8004d5c:	79654b20 00000000 74736554 214b4f20      Key....Test OK!
 8004d6c:	65725020 00207373 206f7420 746e6f63      Press . to cont
 8004d7c:	65756e69 0000002e 6e756f53 6c612064     inue....Sound al
 8004d8c:	206d7261 74736574 00000000 72727543     arm test....Curr
 8004d9c:	20746e65 6e756f73 656c2064 3a6c6576     ent sound level:
 8004dac:	00000020 726f6f44 6e655320 20726f73      ...Door Sensor 
 8004dbc:	74736554 00000020 6e65704f 00000000     Test ...Open....
 8004dcc:	736f6c43 00000065 73657250 00002073     Close...Press ..
 8004ddc:	79654b20 206f7420 746e6f43 65756e69      Key to Continue
 8004dec:	00000000 6f746f4d 6f722072 69746174     ....Motor rotati
 8004dfc:	74206e6f 00747365 61656c50 63206573     on test.Please c
 8004e0c:	6b636568 746f6d20 7220726f 7461746f     heck motor rotat
 8004e1c:	006e6f69 206f7420 72636e69 65736165     ion. to increase
 8004e2c:	646e6120 00000020 64206f74 65726365      and ...to decre
 8004e3c:	20657361 20656874 6f746f6d 70732072     ase the motor sp
 8004e4c:	00646565 206f7420 74697865 00000000     eed. to exit....
 8004e5c:	68676948 69727020 7469726f 6c612079     High priority al
 8004e6c:	006d7261 4c202d20 00746665 52202d20     arm. - Left. - R
 8004e7c:	74686769 00000000 52202d20 7461746f     ight.... - Rotat
 8004e8c:	00000065 44202d20 006e776f 4e202d20     e... - Down. - N
 8004e9c:	00007765 726f6353 00007365 656d6147     ew..Scores..Game
 8004eac:	00000000 7265764f 00000000 7478654e     ....Over....Next
 8004ebc:	0000003a                                :...

08004ec0 <FontKey_0>:
	...
 8004ec8:	1c000000 007e0000 0700e601 0c1f0086     ......~.........
 8004ed8:	000c3c00 c0030cf0 18000f18 78183e3c     .<..........<>.x
 8004ee8:	49603041 30417830 0f183e3c c0031800     A0`I0xA0<>......
 8004ef8:	0cf00018 000c3c00 07000c1f e6010086     .....<..........
 8004f08:	007e0000 00001c00 00000000 00000000     ..~.............

08004f18 <FontKey_1>:
	...
 8004f40:	7f000042 00400000 00000000 00000000     B.....@.........
	...

08004f70 <FontKey_2>:
	...
 8004f94:	00004200 51000061 00490000 00004600     .B..a..Q..I..F..
	...

08004fc8 <FontKey_3>:
	...
 8004fec:	00002100 45000041 004b0000 00003100     .!..A..E..K..1..
	...

08005020 <FontKey_4>:
	...
 8005028:	001c0000 00003e00 77000036 00630000     .....>..6..w..c.
 8005038:	0080c100 800180c1 c08001c0 07601803     ..............`.
 8005048:	12067014 387f0e30 1c18100c 00181c00     .p..0..8........
 8005058:	0600300c 60061c30 e36783ff 7f007ff3     .0..0..`..g.....
 8005068:	000e0038 00000000 00000000 00000000     8...............

08005078 <FontKey_5>:
	...
 8005080:	00003800 6700007e e0610080 00f83000     .8..~..g..a..0..
 8005090:	30003c30 0318000f f00018c0 0c3c2718     0<.0.........'<.
 80050a0:	450c1e45 1e450c06 183c3918 0318f000     E..E..E..9<.....
 80050b0:	000f30c0 30003c30 e06100f8 00806700     .0..0<.0..a..g..
 80050c0:	3800007e 00000000 00000000 00000000     ~..8............

080050d0 <FontKey_6>:
	...
 80050f4:	00003c00 4900004a 00490000 00003000     .<..J..I..I..0..
	...

08005128 <FontKey_7>:
	...
 800514c:	00000100 09000071 00050000 00000300     ....q...........
	...

08005180 <FontKey_8>:
	...
 80051a4:	00003600 49000049 00490000 00003600     .6..I..I..I..6..
	...

080051d8 <FontKey_9>:
	...
 80051fc:	00000600 49000049 00290000 00001e00     ....I..I..).....
	...

08005230 <FontKey_EndCap>:
 8005230:	1ffeff7f 0000f8ff                       ........

08005238 <FontKey_I>:
 8005238:	00000000 ff030000 e0ff07c0 0c70000e     ..............p.
 8005248:	00183000 18001818 330c0030 fe33ccfe     .0......0..3..3.
 8005258:	0c0030cc 300c0030 18300c18 0c18300c     .0..0..0..0..0..
 8005268:	310c1830 ff318cff 0c18308c 180c1830     0..1..1..0..0...
 8005278:	18181818 30000c18 0770000e ff03e0ff     .......0..p.....
 8005288:	000000c0 00000000                       ........

08005290 <FontKey_Lock>:
	...
 80052a4:	00f80f00 0f00f80f ff0f00fe c0f90f80     ................
 80052b4:	0f60f80f f80f60f8 60f80f60 0fc0f90f     ..`..`..`..`....
 80052c4:	fe0f80ff 00f80f00 0000f80f 00000000     ................
	...

080052e8 <FontKey_No>:
	...
 80052fc:	c0ff0300 07e0ff07 ff07e0ff e0ff07e0     ................
 800530c:	07e0ff07 ff07e0ff e0ff07e0 07e0ff07     ................
 800531c:	ff07e0ff e0ff07e0 03e0ff07 0000c0ff     ................
	...

08005340 <FontKey_Ok>:
	...
 8005354:	e0ff0f00 07c0ff07 ff03c0ff 80ff0380     ................
 8005364:	0100ff01 fe0000ff 00fe0000 00007c00     .............|..
 8005374:	3800007c 00380000 00001000 00000000     |..8..8.........
	...

08005398 <FontKey_On>:
	...
 80053a4:	01007e00 810380ff 600006c0 1830000c     .~.........`..0.
 80053b4:	00180000 00003000 30000030 0330fe03     .....0..0..0..0.
 80053c4:	000030fe 18000030 00180000 30000c00     .0..0..........0
 80053d4:	03600006 ff01c081 007e0080 00000000     ..`.......~.....
	...

080053f0 <FontKey_Point>:
	...
 80053f8:	0e003800 677f007f ff60f3e3 061c3083     .8.....g..`..0..
 8005408:	18060030 001c0c00 18600c1c 06306006     0.........`..`0.
 8005418:	00033000 60000360 01600003 8001c080     .0..`..`..`.....
 8005428:	80c100c0 0080c100 77000063 00360000     ........c..w..6.
 8005438:	00003e00 0000001c 00000000 00000000     .>..............

08005448 <FontKey_Prime>:
 8005448:	0f000000 ff07e0ff 80ff03c0 0000ff01     ................
 8005458:	7c0000fe 00380000 00001000 ff0f0000     ...|..8.........
 8005468:	c0ff07e0 0180ff03 fe0000ff 007c0000     ..............|.
 8005478:	00003800 00000010 e0ff0f00 03c0ff07     .8..............
 8005488:	ff0180ff 00fe0000 00007c00 10000038     .........|..8...
	...

080054a0 <FontKey_StartCap>:
 80054a0:	7ff8ff1f 0000feff                       ........

080054a8 <font16>:
 80054a8:	00001010 08006470 08006488 080064a0     ....pd...d...d..
 80054b8:	080064b8 080064d0 080064e8 08006500     .d...d...d...e..
 80054c8:	08006518 08006530 08006548 08006560     .e..0e..He..`e..
 80054d8:	08006578 08006590 080065a8 080065c0     xe...e...e...e..
 80054e8:	080065d8 080065f0 08006608 08006620     .e...e...f.. f..
 80054f8:	08006638 08006650 08006668 08006680     8f..Pf..hf...f..
 8005508:	08006698 080066b0 080066c8 080066e0     .f...f...f...f..
 8005518:	080066f8 08006710 08006728 08006740     .f...g..(g..@g..
 8005528:	08006758 08006770 08006788 080067a0     Xg..pg...g...g..
 8005538:	080067b8 080067d0 080067e8 08006800     .g...g...g...h..
 8005548:	08006818 08006830 08006848 08006860     .h..0h..Hh..`h..
 8005558:	08006878 08006890 080068a8 080068c0     xh...h...h...h..
 8005568:	080068d8 080068f0 08006908 08006920     .h...h...i.. i..
 8005578:	08006938 08006950 08006968 08006980     8i..Pi..hi...i..
 8005588:	08006998 080069b0 080069c8 080069e0     .i...i...i...i..
 8005598:	080069f8 08006a10 08006a28 08006a40     .i...j..(j..@j..
 80055a8:	08006a58 08006a70 08006a88 08006aa0     Xj..pj...j...j..
 80055b8:	08006ab8 08006ad0 08006ae8 08006b00     .j...j...j...k..
 80055c8:	08006b18 08006b30 08006b48 08006b60     .k..0k..Hk..`k..
 80055d8:	08006b78 08006b90 08006ba8 08006bc0     xk...k...k...k..
 80055e8:	08006bd8 08006bf0 08006c08 08006c20     .k...k...l.. l..
 80055f8:	08006c38 08006c50 08006c68 08006c80     8l..Pl..hl...l..
 8005608:	08006c98 08006cb0 08006cc8 08006ce0     .l...l...l...l..
 8005618:	08006cf8 08006d10 08006d28 08006d40     .l...m..(m..@m..
 8005628:	08006d40 08006d40 08006d40 08006d40     @m..@m..@m..@m..
 8005638:	08006d40 08006d40 08006d40 08006d40     @m..@m..@m..@m..
 8005648:	08006d40 08006d40 08006d40 08006d40     @m..@m..@m..@m..
 8005658:	08006d40 08006d40 08006d40 08006d40     @m..@m..@m..@m..
 8005668:	08006d40 08006d40 08006d40 08006d40     @m..@m..@m..@m..
 8005678:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 8005688:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 8005698:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 80056a8:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 80056b8:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 80056c8:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 80056d8:	08006d58 08006d58 08006d58 08006d58     Xm..Xm..Xm..Xm..
 80056e8:	08006d58 08006d70 08006d70 08006d70     Xm..pm..pm..pm..
 80056f8:	08006d70 08006d70 08006d70 08006d70     pm..pm..pm..pm..
 8005708:	08006d70 08006d70 08006d70 08006d70     pm..pm..pm..pm..
 8005718:	08006d70 08006d70 08006d70 08006d70     pm..pm..pm..pm..
 8005728:	08006d88 08006d88 08006da0 08006da0     .m...m...m...m..
 8005738:	08006da0 08006db8 08006dd0 08006dd0     .m...m...m...m..
 8005748:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 8005758:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 8005768:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 8005778:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 8005788:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 8005798:	08006dd0 08006dd0 08006dd0 08006dd0     .m...m...m...m..
 80057a8:	08006dd0 08006de8 08006e00 08006e00     .m...m...n...n..
 80057b8:	08006e00 08006e18 08006e18 08006e18     .n...n...n...n..
 80057c8:	08006e18 08006e18 08006e30 08006e30     .n...n..0n..0n..
 80057d8:	08006e30 08006e30 08006e48 08006e48     0n..0n..Hn..Hn..
 80057e8:	08006e48 08006e48 08006e48 08006e60     Hn..Hn..Hn..`n..
 80057f8:	08006e60 08006e78 08006e78 08006e78     `n..xn..xn..xn..
 8005808:	08006e90 08006e90 08006e90 08006ea8     .n...n...n...n..
 8005818:	08006ec0 08006ec0 08006ed8 08006ed8     .n...n...n...n..
 8005828:	08006ed8                                .n..

0800582c <font24>:
 800582c:	00000818 08006ef4 08006f10 08006f30     .....n...o..0o..
 800583c:	08006f5c 08006f88 08006fcc 08007004     \o...o...o...p..
 800584c:	08007018 08007038 08007058 0800707c     .p..8p..Xp..|p..
 800585c:	080070a8 080070c4 080070e4 08007100     .p...p...p...q..
 800586c:	0800711c 08007148 08007174 080071a0     .q..Hq..tq...q..
 800587c:	080071cc 080071f8 08007224 08007250     .q...q..$r..Pr..
 800588c:	0800727c 080072a8 080072d4 080072f0     |r...r...r...r..
 800589c:	0800730c 0800733c 0800736c 0800739c     .s..<s..ls...s..
 80058ac:	080073c8 08007414 08007448 0800747c     .s...t..Ht..|t..
 80058bc:	080074b4 080074ec 08007524 08007558     .t...t..$u..Xu..
 80058cc:	08007594 080075c8 080075e4 0800760c     .u...u...u...v..
 80058dc:	08007644 08007670 080076b0 080076e8     Dv..pv...v...v..
 80058ec:	08007724 08007758 08007794 080077cc     $w..Xw...w...w..
 80058fc:	08007800 08007834 08007868 080078a0     .x..4x..hx...x..
 800590c:	080078ec 08007920 08007954 08007984     .x.. y..Ty...y..
 800591c:	080079a0 080079bc 08007a54 08007aec     .y...y..Tz...z..
 800592c:	08007b18 08007b34 08007b60 08007b8c     .{..4{..`{...{..
 800593c:	08007bb8 08007be4 08007c10 08007c30     .{...{...|..0|..
 800594c:	08007c5c 08007c88 08007ca0 08007cb8     \|...|...|...|..
 800595c:	08007ce0 08007cf4 08007d34 08007d60     .|...|..4}..`}..
 800596c:	08007d8c 08007db8 08007de4 08007e04     .}...}...}...~..
 800597c:	08007e30 08007e50 08007e7c 08007ea8     0~..P~..|~...~..
 800598c:	08007ee0 08007f0c 08007f38 08007f64     .~......8...d...
 800599c:	08007f90 08007fac 08007fd8 08007ff0     ................
 80059ac:	08007ff0 08007ff0 08007ff0 08007ff0     ................
 80059bc:	08007ff0 08007ff0 08007ff0 08007ff0     ................
 80059cc:	08007ff0 08007ff0 08007ff0 08007ff0     ................
 80059dc:	08007ff0 08007ff0 08007ff0 08007ff0     ................
 80059ec:	08007ff0 08007ff0 08007ff0 08007ff0     ................
 80059fc:	08008010 08008010 08008010 08008010     ................
 8005a0c:	08008010 08008010 08008010 08008010     ................
 8005a1c:	08008010 08008010 08008010 08008010     ................
 8005a2c:	08008010 08008010 08008010 08008010     ................
 8005a3c:	08008010 08008010 08008010 08008010     ................
 8005a4c:	08008010 08008010 08008010 08008010     ................
 8005a5c:	08008010 08008010 08008010 08008010     ................
 8005a6c:	08008010 08008010 0800803c 0800803c     ........<...<...
 8005a7c:	0800803c 0800803c 0800803c 0800803c     <...<...<...<...
 8005a8c:	0800803c 0800803c 0800803c 0800803c     <...<...<...<...
 8005a9c:	0800803c 0800803c 0800803c 0800803c     <...<...<...<...
 8005aac:	0800803c 08008070 08008070 080080a4     <...p...p.......
 8005abc:	080080a4 080080a4 080080d8 08008104     ................
 8005acc:	08008104 08008104 08008104 08008104     ................
 8005adc:	08008104 08008104 08008104 08008104     ................
 8005aec:	08008104 08008104 08008104 08008104     ................
 8005afc:	08008104 08008104 08008104 08008104     ................
 8005b0c:	08008104 08008104 08008104 08008104     ................
 8005b1c:	08008104 08008104 08008104 08008104     ................
 8005b2c:	08008104 08008104 08008130 0800815c     ........0...\...
 8005b3c:	0800815c 0800815c 08008188 080081b4     \...\...........
 8005b4c:	080081b4 080081b4 080081b4 080081d0     ................
 8005b5c:	080081d0 080081d0 080081d0 080081fc     ................
 8005b6c:	080081fc 080081fc 080081fc 08008228     ............(...
 8005b7c:	08008228 08008254 08008254 08008254     (...T...T...T...
 8005b8c:	08008280 08008280 08008280 080082ac     ................
 8005b9c:	080082d8 080082d8 080082f4 080082f4     ................
 8005bac:	080082f4                                ....

08005bb0 <font32>:
 8005bb0:	00002020 08008318 08008340 08008370       ......@...p...
 8005bc0:	080083c0 08008410 08008480 080084d8     ................
 8005bd0:	08008500 08008538 0800856c 080085ac     ....8...l.......
 8005be0:	080085fc 08008624 08008654 0800867c     ....$...T...|...
 8005bf0:	080086a8 080086f4 0800873c 08008788     ........<.......
 8005c00:	080087d4 0800881c 08008864 080088ac     ........d.......
 8005c10:	080088f4 08008940 08008988 080089b0     ....@...........
 8005c20:	080089d8 08008a28 08008a78 08008ac8     ....(...x.......
 8005c30:	08008b10 08008b94 08008bf0 08008c44     ............D...
 8005c40:	08008ca0 08008cfc 08008d50 08008da0     ........P.......
 8005c50:	08008e00 08008e58 08008e7c 08008ebc     ....X...|.......
 8005c60:	08008f18 08008f64 08008fc8 08009020     ....d....... ...
 8005c70:	08009084 080090d8 0800913c 0800919c     ........<.......
 8005c80:	080091f0 08009244 0800929c 080092f8     ....D...........
 8005c90:	08009374 080093cc 08009428 0800947c     t.......(...|...
 8005ca0:	080094fc 08009524 080095c0 08009674     ....$.......t...
 8005cb0:	080096c0 08009708 08009708 0800974c     ............L...
 8005cc0:	08009794 080097e0 08009828 0800985c     ........(...\...
 8005cd0:	080098a4 080098e4 08009908 0800992c     ............,...
 8005ce0:	08009970 08009994 080099f8 08009a38     p...........8...
 8005cf0:	08009a80 08009ac4 08009b0c 08009b3c     ............<...
 8005d00:	08009b80 08009bb0 08009bf8 08009c44     ............D...
 8005d10:	08009ca8 08009cec 08009d34 08009d78     ........4...x...
 8005d20:	08009dcc 08009df4 08009e48 08009e6c     ........H...l...
 8005d30:	08009e6c 08009e6c 08009e6c 08009e6c     l...l...l...l...
 8005d40:	08009e6c 08009e6c 08009e6c 08009e6c     l...l...l...l...
 8005d50:	08009e6c 08009e6c 08009e6c 08009e6c     l...l...l...l...
 8005d60:	08009e6c 08009e6c 08009e6c 08009e6c     l...l...l...l...
 8005d70:	08009e6c 08009e6c 08009e6c 08009e6c     l...l...l...l...
 8005d80:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005d90:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005da0:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005db0:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005dc0:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005dd0:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005de0:	08009ea0 08009ea0 08009ea0 08009ea0     ................
 8005df0:	08009ea0 08009ea0 08009ee8 08009ee8     ................
 8005e00:	08009ee8 08009ee8 08009ee8 08009ee8     ................
 8005e10:	08009ee8 08009ee8 08009ee8 08009ee8     ................
 8005e20:	08009ee8 08009ee8 08009ee8 08009ee8     ................
 8005e30:	08009ee8 08009f44 08009f44 08009f44     ....D...D...D...
 8005e40:	08009f44 08009f44 08009fa0 08009fe8     D...D...........
 8005e50:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005e60:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005e70:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005e80:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005e90:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005ea0:	08009fe8 08009fe8 08009fe8 08009fe8     ................
 8005eb0:	08009fe8 08009fe8 0800a030 0800a078     ........0...x...
 8005ec0:	0800a078 0800a078 0800a0c0 0800a108     x...x...........
 8005ed0:	0800a108 0800a108 0800a108 0800a130     ............0...
 8005ee0:	0800a130 0800a130 0800a130 0800a178     0...0...0...x...
 8005ef0:	0800a178 0800a178 0800a178 0800a1c4     x...x...x.......
 8005f00:	0800a1c4 0800a20c 0800a20c 0800a20c     ................
 8005f10:	0800a254 0800a254 0800a254 0800a29c     T...T...T.......
 8005f20:	0800a2e4 0800a2e4 0800a308 0800a308     ................
 8005f30:	0800a308                                ....

08005f34 <font8>:
 8005f34:	00000808 0800a314 0800a324 0800a334     ........$...4...
 8005f44:	0800a344 0800a354 0800a364 0800a374     D...T...d...t...
 8005f54:	0800a384 0800a394 0800a3a4 0800a3b4     ................
 8005f64:	0800a3c4 0800a3d4 0800a3e4 0800a3f4     ................
 8005f74:	0800a404 0800a414 0800a424 0800a434     ........$...4...
 8005f84:	0800a444 0800a454 0800a464 0800a474     D...T...d...t...
 8005f94:	0800a484 0800a494 0800a4a4 0800a4b4     ................
 8005fa4:	0800a4c4 0800a4d4 0800a4e4 0800a4f4     ................
 8005fb4:	0800a504 0800a514 0800a524 0800a534     ........$...4...
 8005fc4:	0800a544 0800a554 0800a564 0800a574     D...T...d...t...
 8005fd4:	0800a584 0800a594 0800a5a4 0800a5b4     ................
 8005fe4:	0800a5c4 0800a5d4 0800a5e4 0800a5f4     ................
 8005ff4:	0800a604 0800a614 0800a624 0800a634     ........$...4...
 8006004:	0800a644 0800a654 0800a664 0800a674     D...T...d...t...
 8006014:	0800a684 0800a694 0800a6a4 0800a6b4     ................
 8006024:	0800a6c4 0800a6d4 0800a6e4 0800a6f4     ................
 8006034:	0800a704 0800a714 0800a724 0800a734     ........$...4...
 8006044:	0800a744 0800a754 0800a764 0800a774     D...T...d...t...
 8006054:	0800a784 0800a794 0800a7a4 0800a7b4     ................
 8006064:	0800a7c4 0800a7d4 0800a7e4 0800a7f4     ................
 8006074:	0800a804 0800a814 0800a824 0800a834     ........$...4...
 8006084:	0800a844 0800a854 0800a864 0800a874     D...T...d...t...
 8006094:	0800a884 0800a894 0800a8a4 0800a8b4     ................
 80060a4:	0800a8c4 0800a8d0 0800a8e0 0800a8f0     ................
 80060b4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80060c4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80060d4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80060e4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80060f4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006104:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006114:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006124:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006134:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006144:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006154:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006164:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006174:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006184:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 8006194:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80061a4:	0800a8f0 0800a8f0 0800a8f0 0800a8f0     ................
 80061b4:	0800a8f0 0800a8f0 0800a8f0 0800a900     ................
 80061c4:	0800a900 0800a900 0800a910 0800a920     ............ ...
 80061d4:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 80061e4:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 80061f4:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 8006204:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 8006214:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 8006224:	0800a920 0800a920 0800a920 0800a920      ... ... ... ...
 8006234:	0800a920 0800a920 0800a920 0800a930      ... ... ...0...
 8006244:	0800a930 0800a930 0800a940 0800a940     0...0...@...@...
 8006254:	0800a940 0800a940 0800a940 0800a950     @...@...@...P...
 8006264:	0800a950 0800a950 0800a950 0800a960     P...P...P...`...
 8006274:	0800a960 0800a960 0800a960 0800a970     `...`...`...p...
 8006284:	0800a970 0800a980 0800a980 0800a980     p...............
 8006294:	0800a990 0800a990 0800a990 0800a990     ................
 80062a4:	0800a9a0 0800a9a0 0800a9ac 0800a9ac     ................
 80062b4:	0800a9ac                                ....

080062b8 <fontKey_0>:
 80062b8:	32aeffff 08006458 080062c8 080063a8     ...2Xd...b...c..

080062c8 <fontKey_0_char>:
 80062c8:	0000001d 08004ec0                       .....N..

080062d0 <fontKey_1>:
 80062d0:	32aeffff 08006458 080062e0 080063a8     ...2Xd...b...c..

080062e0 <fontKey_1_char>:
 80062e0:	0000001d 08004f18                       .....O..

080062e8 <fontKey_2>:
 80062e8:	32aeffff 08006458 080062f8 080063a8     ...2Xd...b...c..

080062f8 <fontKey_2_char>:
 80062f8:	0000001d 08004f70                       ....pO..

08006300 <fontKey_3>:
 8006300:	32aeffff 08006458 08006310 080063a8     ...2Xd...c...c..

08006310 <fontKey_3_char>:
 8006310:	0000001d 08004fc8                       .....O..

08006318 <fontKey_4>:
 8006318:	32aeffff 08006458 08006328 080063a8     ...2Xd..(c...c..

08006328 <fontKey_4_char>:
 8006328:	0000001d 08005020                       .... P..

08006330 <fontKey_5>:
 8006330:	32aeffff 08006458 08006340 080063a8     ...2Xd..@c...c..

08006340 <fontKey_5_char>:
 8006340:	0000001d 08005078                       ....xP..

08006348 <fontKey_6>:
 8006348:	32aeffff 08006458 08006358 080063a8     ...2Xd..Xc...c..

08006358 <fontKey_6_char>:
 8006358:	0000001d 080050d0                       .....P..

08006360 <fontKey_7>:
 8006360:	32aeffff 08006458 08006370 080063a8     ...2Xd..pc...c..

08006370 <fontKey_7_char>:
 8006370:	0000001d 08005128                       ....(Q..

08006378 <fontKey_8>:
 8006378:	32aeffff 08006458 08006388 080063a8     ...2Xd...c...c..

08006388 <fontKey_8_char>:
 8006388:	0000001d 08005180                       .....Q..

08006390 <fontKey_9>:
 8006390:	32aeffff 08006458 080063a0 080063a8     ...2Xd...c...c..

080063a0 <fontKey_9_char>:
 80063a0:	0000001d 080051d8                       .....Q..

080063a8 <fontKey_EndCap_char>:
 80063a8:	00000002 08005230                       ....0R..

080063b0 <fontKey_I>:
 80063b0:	32aeffff 08006458 080063c0 080063a8     ...2Xd...c...c..

080063c0 <fontKey_I_char>:
 80063c0:	0000001d 08005238                       ....8R..

080063c8 <fontKey_Lock>:
 80063c8:	32aeffff 08006458 080063d8 080063a8     ...2Xd...c...c..

080063d8 <fontKey_Lock_char>:
 80063d8:	0000001d 08005290                       .....R..

080063e0 <fontKey_No>:
 80063e0:	ffffd086 08006458 080063f0 080063a8     ....Xd...c...c..

080063f0 <fontKey_No_char>:
 80063f0:	0000001d 080052e8                       .....R..

080063f8 <fontKey_Ok>:
 80063f8:	ffff1565 08006458 08006408 080063a8     e...Xd...d...c..

08006408 <fontKey_Ok_char>:
 8006408:	0000001d 08005340                       ....@S..

08006410 <fontKey_On>:
 8006410:	ffff32ae 08006458 08006420 080063a8     .2..Xd.. d...c..

08006420 <fontKey_On_char>:
 8006420:	0000001d 08005398                       .....S..

08006428 <fontKey_Point>:
 8006428:	32aeffff 08006458 08006438 080063a8     ...2Xd..8d...c..

08006438 <fontKey_Point_char>:
 8006438:	0000001d 080053f0                       .....S..

08006440 <fontKey_Prime>:
 8006440:	fffffae0 08006458 08006450 080063a8     ....Xd..Pd...c..

08006450 <fontKey_Prime_char>:
 8006450:	0000001d 08005448                       ....HT..

08006458 <fontKey_StartCap_char>:
 8006458:	00000002 080054a0                       .....T..

08006460 <fonts16_20>:
	...

08006470 <fonts16_20_char>:
 8006470:	00000008 08006460                       ....`d..

08006478 <fonts16_21>:
 8006478:	00000000 33fe0000 000033fe 00000000     .......3.3......

08006488 <fonts16_21_char>:
 8006488:	00000008 08006478                       ....xd..

08006490 <fonts16_22>:
 8006490:	00000000 00000007 00070000 00000000     ................

080064a0 <fonts16_22_char>:
 80064a0:	00000008 08006490                       .....d..

080064a8 <fonts16_23>:
 80064a8:	04100000 04103ffe 3ffe0410 00000410     .....?.....?....

080064b8 <fonts16_23_char>:
 80064b8:	00000008 080064a8                       .....d..

080064c0 <fonts16_24>:
 80064c0:	04700000 08880888 08883ffe 07100888     ..p......?......

080064d0 <fonts16_24_char>:
 80064d0:	00000008 080064c0                       .....d..

080064d8 <fonts16_25>:
 80064d8:	301c0000 03220c22 22601c9c 1c062218     ...0"."...`"."..

080064e8 <fonts16_25_char>:
 80064e8:	00000008 080064d8                       .....d..

080064f0 <fonts16_26>:
 80064f0:	1e000000 2082217c 163c2142 16000800     ....|!. B!<.....

08006500 <fonts16_26_char>:
 8006500:	00000008 080064f0                       .....d..

08006508 <fonts16_27>:
 8006508:	00000000 00040000 00010002 00000000     ................

08006518 <fonts16_27_char>:
 8006518:	00000008 08006508                       .....e..

08006520 <fonts16_28>:
 8006520:	00000000 07f00000 2002180c 00004001     ........... .@..

08006530 <fonts16_28_char>:
 8006530:	00000008 08006520                       .... e..

08006538 <fonts16_29>:
 8006538:	00000000 20024001 07f0180c 00000000     .....@. ........

08006548 <fonts16_29_char>:
 8006548:	00000008 08006538                       ....8e..

08006550 <fonts16_2A>:
 8006550:	01100000 004000a0 004007fc 011000a0     ......@...@.....

08006560 <fonts16_2A_char>:
 8006560:	00000008 08006550                       ....Pe..

08006568 <fonts16_2B>:
 8006568:	00400000 00400040 004007fc 00400040     ..@.@.@...@.@.@.

08006578 <fonts16_2B_char>:
 8006578:	00000008 08006568                       ....he..

08006580 <fonts16_2C>:
 8006580:	00000000 3c004c00 00000000 00000000     .....L.<........

08006590 <fonts16_2C_char>:
 8006590:	00000008 08006580                       .....e..

08006598 <fonts16_2D>:
 8006598:	00400000 00400040 00400040 00400040     ..@.@.@.@.@.@.@.

080065a8 <fonts16_2D_char>:
 80065a8:	00000008 08006598                       .....e..

080065b0 <fonts16_2E>:
 80065b0:	00000000 30000000 00003000 00000000     .......0.0......

080065c0 <fonts16_2E_char>:
 80065c0:	00000008 080065b0                       .....e..

080065c8 <fonts16_2F>:
 80065c8:	60000000 06001800 00600180 00060018     ...`......`.....

080065d8 <fonts16_2F_char>:
 80065d8:	00000008 080065c8                       .....e..

080065e0 <fonts16_30>:
 80065e0:	07f00000 2002180c 20022002 07f0180c     ....... . . ....

080065f0 <fonts16_30_char>:
 80065f0:	00000008 080065e0                       .....e..

080065f8 <fonts16_31>:
 80065f8:	00000000 200c2008 20003ffe 00002000     ..... . .?. . ..

08006608 <fonts16_31_char>:
 8006608:	00000008 080065f8                       .....e..

08006610 <fonts16_32>:
 8006610:	30080000 22022c04 20822102 20382044     ...0.,.".!. D 8 

08006620 <fonts16_32_char>:
 8006620:	00000008 08006610                       .....f..

08006628 <fonts16_33>:
 8006628:	20080000 20822004 20822082 0e381144     ... . . . . D.8.

08006638 <fonts16_33_char>:
 8006638:	00000008 08006628                       ....(f..

08006640 <fonts16_34>:
 8006640:	04000000 04c00700 240c0430 24003ffe     ........0..$.?.$

08006650 <fonts16_34_char>:
 8006650:	00000008 08006640                       ....@f..

08006658 <fonts16_35>:
 8006658:	20fe0000 20222042 10221022 07820842     ... B " ".".B...

08006668 <fonts16_35_char>:
 8006668:	00000008 08006658                       ....Xf..

08006670 <fonts16_36>:
 8006670:	0fe00000 20441098 20422042 0f001082     ......D B B ....

08006680 <fonts16_36_char>:
 8006680:	00000008 08006670                       ....pf..

08006688 <fonts16_37>:
 8006688:	001e0000 00020002 03c23c02 0006003a     .........<..:...

08006698 <fonts16_37_char>:
 8006698:	00000008 08006688                       .....f..

080066a0 <fonts16_38>:
 80066a0:	0e380000 20821144 20822082 0e381144     ..8.D.. . . D.8.

080066b0 <fonts16_38_char>:
 80066b0:	00000008 080066a0                       .....f..

080066b8 <fonts16_39>:
 80066b8:	00780000 21020084 11022102 03f80c84     ..x....!.!......

080066c8 <fonts16_39_char>:
 80066c8:	00000008 080066b8                       .....f..

080066d0 <fonts16_3A>:
 80066d0:	00000000 18600000 00001860 00000000     ......`.`.......

080066e0 <fonts16_3A_char>:
 80066e0:	00000008 080066d0                       .....f..

080066e8 <fonts16_3B>:
 80066e8:	00000000 4c600000 00003c60 00000000     ......`L`<......

080066f8 <fonts16_3B_char>:
 80066f8:	00000008 080066e8                       .....f..

08006700 <fonts16_3C>:
 8006700:	00800000 02200140 08080410 20021004     ....@. ........ 

08006710 <fonts16_3C_char>:
 8006710:	00000008 08006700                       .....g..

08006718 <fonts16_3D>:
 8006718:	01200000 01200120 01200120 01200120     .. . . . . . . .

08006728 <fonts16_3D_char>:
 8006728:	00000008 08006718                       .....g..

08006730 <fonts16_3E>:
 8006730:	40040000 10102008 04400820 01000280     ...@. .. .@.....

08006740 <fonts16_3E_char>:
 8006740:	00000008 08006730                       ....0g..

08006748 <fonts16_3F>:
 8006748:	00080000 00020004 00823302 00380044     .........3..D.8.

08006758 <fonts16_3F_char>:
 8006758:	00000008 08006748                       ....Hg..

08006760 <fonts16_40>:
 8006760:	40000000 04003fe0 04000400 040003e0     ...@.?..........

08006770 <fonts16_40_char>:
 8006770:	00000008 08006760                       ....`g..

08006778 <fonts16_41>:
 8006778:	38000000 02700780 0270020e 38000780     ...8..p...p....8

08006788 <fonts16_41_char>:
 8006788:	00000008 08006778                       ....xg..

08006790 <fonts16_42>:
 8006790:	3ffe0000 20822082 20822082 0e381144     ...?. . . . D.8.

080067a0 <fonts16_42_char>:
 80067a0:	00000008 08006790                       .....g..

080067a8 <fonts16_43>:
 80067a8:	0ff80000 20021004 20022002 08081004     ....... . . ....

080067b8 <fonts16_43_char>:
 80067b8:	00000008 080067a8                       .....g..

080067c0 <fonts16_44>:
 80067c0:	3ffe0000 20022002 10042002 07f00808     ...?. . . ......

080067d0 <fonts16_44_char>:
 80067d0:	00000008 080067c0                       .....g..

080067d8 <fonts16_45>:
 80067d8:	3ffe0000 20822082 20822082 20022082     ...?. . . . . . 

080067e8 <fonts16_45_char>:
 80067e8:	00000008 080067d8                       .....g..

080067f0 <fonts16_46>:
 80067f0:	3ffe0000 00820082 00820082 00020082     ...?............

08006800 <fonts16_46_char>:
 8006800:	00000008 080067f0                       .....g..

08006808 <fonts16_47>:
 8006808:	0ff80000 20021004 20822082 3f881084     ....... . . ...?

08006818 <fonts16_47_char>:
 8006818:	00000008 08006808                       .....h..

08006820 <fonts16_48>:
 8006820:	3ffe0000 00800080 00800080 3ffe0080     ...?...........?

08006830 <fonts16_48_char>:
 8006830:	00000008 08006820                       .... h..

08006838 <fonts16_49>:
 8006838:	00000000 20020000 20023ffe 00000000     ....... .?. ....

08006848 <fonts16_49_char>:
 8006848:	00000008 08006838                       ....8h..

08006850 <fonts16_4A>:
 8006850:	08000000 20001000 20002000 0ffe1000     ....... . . ....

08006860 <fonts16_4A_char>:
 8006860:	00000008 08006850                       ....Ph..

08006868 <fonts16_4B>:
 8006868:	3ffe0000 02400180 08100420 20041008     ...?..@. ...... 

08006878 <fonts16_4B_char>:
 8006878:	00000008 08006868                       ....hh..

08006880 <fonts16_4C>:
 8006880:	3ffe0000 20002000 20002000 20002000     ...?. . . . . . 

08006890 <fonts16_4C_char>:
 8006890:	00000008 08006880                       .....h..

08006898 <fonts16_4D>:
 8006898:	3ffe0000 00600018 00600180 3ffe0018     ...?..`...`....?

080068a8 <fonts16_4D_char>:
 80068a8:	00000008 08006898                       .....h..

080068b0 <fonts16_4E>:
 80068b0:	3ffe0000 0030000c 030000c0 3ffe0c00     ...?..0........?

080068c0 <fonts16_4E_char>:
 80068c0:	00000008 080068b0                       .....h..

080068c8 <fonts16_4F>:
 80068c8:	0ff80000 20021004 20022002 0ff81004     ....... . . ....

080068d8 <fonts16_4F_char>:
 80068d8:	00000008 080068c8                       .....h..

080068e0 <fonts16_50>:
 80068e0:	3ffe0000 01020102 01020102 00780084     ...?..........x.

080068f0 <fonts16_50_char>:
 80068f0:	00000008 080068e0                       .....h..

080068f8 <fonts16_51>:
 80068f8:	0ff80000 28021004 28022402 2ff81004     .......(.$.(.../

08006908 <fonts16_51_char>:
 8006908:	00000008 080068f8                       .....h..

08006910 <fonts16_52>:
 8006910:	3ffe0000 01020102 03020102 30780c84     ...?..........x0

08006920 <fonts16_52_char>:
 8006920:	00000008 08006910                       .....i..

08006928 <fonts16_53>:
 8006928:	08380000 20821044 20822082 0e081104     ..8.D.. . . ....

08006938 <fonts16_53_char>:
 8006938:	00000008 08006928                       ....(i..

08006940 <fonts16_54>:
 8006940:	00020000 00020002 00023ffe 00020002     .........?......

08006950 <fonts16_54_char>:
 8006950:	00000008 08006940                       ....@i..

08006958 <fonts16_55>:
 8006958:	0ffe0000 20001000 20002000 0ffe1000     ....... . . ....

08006968 <fonts16_55_char>:
 8006968:	00000008 08006958                       ....Xi..

08006970 <fonts16_56>:
 8006970:	001e0000 0e0001e0 0e003000 001e01e0     .........0......

08006980 <fonts16_56_char>:
 8006980:	00000008 08006970                       ....pi..

08006988 <fonts16_57>:
 8006988:	0ffe0000 0e003000 0e0001c0 0ffe3000     .....0.......0..

08006998 <fonts16_57_char>:
 8006998:	00000008 08006988                       .....i..

080069a0 <fonts16_58>:
 80069a0:	30020000 03300c0c 033000c0 30020c0c     ...0..0...0....0

080069b0 <fonts16_58_char>:
 80069b0:	00000008 080069a0                       .....i..

080069b8 <fonts16_59>:
 80069b8:	000e0000 00c00030 00c03f00 000e0030     ....0....?..0...

080069c8 <fonts16_59_char>:
 80069c8:	00000008 080069b8                       .....i..

080069d0 <fonts16_5A>:
 80069d0:	30020000 23022c02 203220c2 2006200a     ...0.,.#. 2 . . 

080069e0 <fonts16_5A_char>:
 80069e0:	00000008 080069d0                       .....i..

080069e8 <fonts16_5B>:
	...

080069f8 <fonts16_5B_char>:
 80069f8:	00000008 080069e8                       .....i..

08006a00 <fonts16_5C>:
 8006a00:	00060000 00600018 06000180 60001800     ......`........`

08006a10 <fonts16_5C_char>:
 8006a10:	00000008 08006a00                       .....j..

08006a18 <fonts16_5D>:
	...

08006a28 <fonts16_5D_char>:
 8006a28:	00000008 08006a18                       .....j..

08006a30 <fonts16_5E>:
	...

08006a40 <fonts16_5E_char>:
 8006a40:	00000008 08006a30                       ....0j..

08006a48 <fonts16_5F>:
 8006a48:	40000000 40004000 40004000 40004000     ...@.@.@.@.@.@.@

08006a58 <fonts16_5F_char>:
 8006a58:	00000008 08006a48                       ....Hj..

08006a60 <fonts16_60>:
	...

08006a70 <fonts16_60_char>:
 8006a70:	00000008 08006a60                       ....`j..

08006a78 <fonts16_61>:
 8006a78:	18800000 22402440 12402240 00003f80     ....@$@"@"@..?..

08006a88 <fonts16_61_char>:
 8006a88:	00000008 08006a78                       ....xj..

08006a90 <fonts16_62>:
 8006a90:	3ffc0000 20401080 20402040 00001f80     ...?..@ @ @ ....

08006aa0 <fonts16_62_char>:
 8006aa0:	00000008 08006a90                       .....j..

08006aa8 <fonts16_63>:
 8006aa8:	1f800000 20402040 20402040 00001080     ....@ @ @ @ ....

08006ab8 <fonts16_63_char>:
 8006ab8:	00000008 08006aa8                       .....j..

08006ac0 <fonts16_64>:
 8006ac0:	1f800000 20402040 10802040 00003ffc     ....@ @ @ ...?..

08006ad0 <fonts16_64_char>:
 8006ad0:	00000008 08006ac0                       .....j..

08006ad8 <fonts16_65>:
 8006ad8:	1f800000 22402240 22402240 00001380     ....@"@"@"@"....

08006ae8 <fonts16_65_char>:
 8006ae8:	00000008 08006ad8                       .....j..

08006af0 <fonts16_66>:
 8006af0:	00400000 3ff80040 00440044 00000044     ..@.@..?D.D.D...

08006b00 <fonts16_66_char>:
 8006b00:	00000008 08006af0                       .....j..

08006b08 <fonts16_67>:
 8006b08:	27800000 48404840 44804840 00003fc0     ...'@H@H@H.D.?..

08006b18 <fonts16_67_char>:
 8006b18:	00000008 08006b08                       .....k..

08006b20 <fonts16_68>:
 8006b20:	3ffc0000 00400080 00400040 00003f80     ...?..@.@.@..?..

08006b30 <fonts16_68_char>:
 8006b30:	00000008 08006b20                       .... k..

08006b38 <fonts16_69>:
 8006b38:	00000000 20400000 20003fcc 00000000     ......@ .?. ....

08006b48 <fonts16_69_char>:
 8006b48:	00000008 08006b38                       ....8k..

08006b50 <fonts16_6A>:
 8006b50:	20000000 40004000 3fcc4040 00000000     ... .@.@@@.?....

08006b60 <fonts16_6A_char>:
 8006b60:	00000008 08006b50                       ....Pk..

08006b68 <fonts16_6B>:
 8006b68:	3ffc0000 05000200 10400880 00002000     ...?......@.. ..

08006b78 <fonts16_6B_char>:
 8006b78:	00000008 08006b68                       ....hk..

08006b80 <fonts16_6C>:
 8006b80:	00000000 00040000 20003ffc 00000000     .........?. ....

08006b90 <fonts16_6C_char>:
 8006b90:	00000008 08006b80                       .....k..

08006b98 <fonts16_6D>:
 8006b98:	3fc00000 00400040 00403f80 3f800040     ...?@.@..?@.@..?

08006ba8 <fonts16_6D_char>:
 8006ba8:	00000008 08006b98                       .....k..

08006bb0 <fonts16_6E>:
 8006bb0:	3fc00000 00400080 00400040 00003f80     ...?..@.@.@..?..

08006bc0 <fonts16_6E_char>:
 8006bc0:	00000008 08006bb0                       .....k..

08006bc8 <fonts16_6F>:
 8006bc8:	1f800000 20402040 20402040 00001f80     ....@ @ @ @ ....

08006bd8 <fonts16_6F_char>:
 8006bd8:	00000008 08006bc8                       .....k..

08006be0 <fonts16_70>:
 8006be0:	7fc00000 08400840 08400840 00000780     ....@.@.@.@.....

08006bf0 <fonts16_70_char>:
 8006bf0:	00000008 08006be0                       .....k..

08006bf8 <fonts16_71>:
 8006bf8:	07800000 08400840 08400840 00007fc0     ....@.@.@.@.....

08006c08 <fonts16_71_char>:
 8006c08:	00000008 08006bf8                       .....k..

08006c10 <fonts16_72>:
 8006c10:	00000000 01003fc0 00800080 00400040     .....?......@.@.

08006c20 <fonts16_72_char>:
 8006c20:	00000008 08006c10                       .....l..

08006c28 <fonts16_73>:
 8006c28:	11800000 22402240 24402440 00001880     ....@"@"@$@$....

08006c38 <fonts16_73_char>:
 8006c38:	00000008 08006c28                       ....(l..

08006c40 <fonts16_74>:
 8006c40:	00400000 1ff80040 20402040 00002040     ..@.@...@ @ @ ..

08006c50 <fonts16_74_char>:
 8006c50:	00000008 08006c40                       ....@l..

08006c58 <fonts16_75>:
 8006c58:	1fc00000 20002000 10002000 00003fc0     ..... . . ...?..

08006c68 <fonts16_75_char>:
 8006c68:	00000008 08006c58                       ....Xl..

08006c70 <fonts16_76>:
 8006c70:	00c00000 0c000300 0c003000 00c00300     .........0......

08006c80 <fonts16_76_char>:
 8006c80:	00000008 08006c70                       ....pl..

08006c88 <fonts16_77>:
 8006c88:	0fc00000 0c003000 0c000300 0fc03000     .....0.......0..

08006c98 <fonts16_77_char>:
 8006c98:	00000008 08006c88                       .....l..

08006ca0 <fonts16_78>:
 8006ca0:	20400000 09001080 09000600 20401080     ..@ ..........@ 

08006cb0 <fonts16_78_char>:
 8006cb0:	00000008 08006ca0                       .....l..

08006cb8 <fonts16_79>:
 8006cb8:	00400000 26004180 06001800 00400180     ..@..A.&......@.

08006cc8 <fonts16_79_char>:
 8006cc8:	00000008 08006cb8                       .....l..

08006cd0 <fonts16_7A>:
 8006cd0:	30400000 24402840 21402240 000020c0     ..@0@(@$@"@!. ..

08006ce0 <fonts16_7A_char>:
 8006ce0:	00000008 08006cd0                       .....l..

08006ce8 <fonts16_7B>:
	...

08006cf8 <fonts16_7B_char>:
 8006cf8:	00000008 08006ce8                       .....l..

08006d00 <fonts16_7C>:
	...
 8006d08:	0000ffff 00000000                       ........

08006d10 <fonts16_7C_char>:
 8006d10:	00000008 08006d00                       .....m..

08006d18 <fonts16_7D>:
	...

08006d28 <fonts16_7D_char>:
 8006d28:	00000008 08006d18                       .....m..

08006d30 <fonts16_7E_92>:
 8006d30:	00000000 00040000 00010002 00000000     ................

08006d40 <fonts16_7E_92_char>:
 8006d40:	00000008 08006d30                       ....0m..

08006d48 <fonts16_93_B0>:
 8006d48:	00060000 00090009 00000006 00000000     ................

08006d58 <fonts16_93_B0_char>:
 8006d58:	00000008 08006d48                       ....Hm..

08006d60 <fonts16_B1_BF>:
 8006d60:	1c000000 41002200 400040cc 10002000     .....".A.@.@. ..

08006d70 <fonts16_B1_BF_char>:
 8006d70:	00000008 08006d60                       ....`m..

08006d78 <fonts16_C0_C1>:
 8006d78:	38000000 02740780 0271020e 38000780     ...8..t...q....8

08006d88 <fonts16_C0_C1_char>:
 8006d88:	00000008 08006d78                       ....xm..

08006d90 <fonts16_C2_C4>:
 8006d90:	38000000 02700782 0270020e 38000782     ...8..p...p....8

08006da0 <fonts16_C2_C4_char>:
 8006da0:	00000008 08006d90                       .....m..

08006da8 <fonts16_C5>:
 8006da8:	38000000 02730780 0273020f 38000780     ...8..s...s....8

08006db8 <fonts16_C5_char>:
 8006db8:	00000008 08006da8                       .....m..

08006dc0 <fonts16_C6_E0>:
 8006dc0:	18800000 22442440 12402248 00003f80     ....@$D"H"@..?..

08006dd0 <fonts16_C6_E0_char>:
 8006dd0:	00000008 08006dc0                       .....m..

08006dd8 <fonts16_E1>:
 8006dd8:	18800000 22482440 12422244 00003f80     ....@$H"D"B..?..

08006de8 <fonts16_E1_char>:
 8006de8:	00000008 08006dd8                       .....m..

08006df0 <fonts16_E2_E4>:
 8006df0:	18800000 2240244c 124c2240 00003f80     ....L$@"@"L..?..

08006e00 <fonts16_E2_E4_char>:
 8006e00:	00000008 08006df0                       .....m..

08006e08 <fonts16_E5_E9>:
 8006e08:	1f800000 22482240 22422244 00001380     ....@"H"D"B"....

08006e18 <fonts16_E5_E9_char>:
 8006e18:	00000008 08006e08                       .....n..

08006e20 <fonts16_EA_ED>:
 8006e20:	00000000 20480000 20023fc4 00000000     ......H .?. ....

08006e30 <fonts16_EA_ED_char>:
 8006e30:	00000008 08006e20                       .... n..

08006e38 <fonts16_EE_F1>:
 8006e38:	3fc00000 00420084 00420044 00003f80     ...?..B.D.B..?..

08006e48 <fonts16_EE_F1_char>:
 8006e48:	00000008 08006e38                       ....8n..

08006e50 <fonts16_F2_F3>:
 8006e50:	1f800000 20482040 20422044 00001f80     ....@ H D B ....

08006e60 <fonts16_F2_F3_char>:
 8006e60:	00000008 08006e50                       ....Pn..

08006e68 <fonts16_F4_F6>:
 8006e68:	1f800000 2040204c 204c2040 00001f80     ....L @ @ L ....

08006e78 <fonts16_F4_F6_char>:
 8006e78:	00000008 08006e68                       ....hn..

08006e80 <fonts16_F7_F9>:
 8006e80:	1fc00000 20042000 10002002 00003fc0     ..... . . ...?..

08006e90 <fonts16_F7_F9_char>:
 8006e90:	00000008 08006e80                       .....n..

08006e98 <fonts16_FA>:
 8006e98:	1fc00000 20082000 10022004 00003fc0     ..... . . ...?..

08006ea8 <fonts16_FA_char>:
 8006ea8:	00000008 08006e98                       .....n..

08006eb0 <fonts16_FB_FC>:
 8006eb0:	1fc00000 2000200c 100c2000 00003fc0     ..... . . ...?..

08006ec0 <fonts16_FB_FC_char>:
 8006ec0:	00000008 08006eb0                       .....n..

08006ec8 <fonts16_FD_FF>:
	...

08006ed8 <fonts16_FD_FF_char>:
 8006ed8:	00000008 08006ec8                       .....n..

08006ee0 <fonts24_20>:
	...

08006ef4 <fonts24_20_char>:
 8006ef4:	00000006 08006ee0                       .....n..

08006efc <fonts24_21>:
 8006efc:	00000000 ff0c0000 f0ff0cf0 00000000     ................
 8006f0c:	00000000                                ....

08006f10 <fonts24_21_char>:
 8006f10:	00000006 08006efc                       .....n..

08006f18 <fonts24_22>:
 8006f18:	00000000 0100f001 000000f0 00000000     ................
 8006f28:	0100f001 000000f0                       ........

08006f30 <fonts24_22_char>:
 8006f30:	00000008 08006f18                       .....o..

08006f38 <fonts24_23>:
 8006f38:	0e00c300 f30f00c3 80ff0100 00f0cf00     ................
 8006f48:	c30e70c3 00f30f00 0080ff01 c300f0cf     .p..............
 8006f58:	00c30070                                p...

08006f5c <fonts24_23_char>:
 8006f5c:	0000000c 08006f38                       ....8o..

08006f64 <fonts24_24>:
 8006f64:	01000000 8307c081 300606e0 3f180c0c     ...........0...?
 8006f74:	ff3ffcff 18180cfc 07301806 e003e0f0     ..?.......0.....
 8006f84:	00000040                                @...

08006f88 <fonts24_24_char>:
 8006f88:	0000000c 08006f64                       ....do..

08006f90 <fonts24_25>:
 8006f90:	00000000 0700c003 300c00e0 0c300c00     ...........0..0.
 8006fa0:	070f300c c08303e0 0000e000 1e00007c     .0..........|...
 8006fb0:	80c30300 0ce0e107 300c7030 00300c10     ........0p.0..0.
 8006fc0:	0300e007 000000c0 00000000              ............

08006fcc <fonts24_25_char>:
 8006fcc:	00000014 08006f90                       .....o..

08006fd4 <fonts24_26>:
 8006fd4:	03000000 f00700e0 c01b0600 0ce00f0c     ................
 8006fe4:	0c0c300c 700e0c30 07e01b06 e0038071     .0..0..p....q...
 8006ff4:	00c00100 0e006007 00040020 00000000     .....`.. .......

08007004 <fonts24_26_char>:
 8007004:	00000010 08006fd4                       .....o..

0800700c <fonts24_27>:
 800700c:	00000000 0300f003 000000f0              ............

08007018 <fonts24_27_char>:
 8007018:	00000004 0800700c                       .....p..

08007020 <fonts24_28>:
 8007020:	01000000 ff0f00f8 c0073e00 c0f000f0     .........>......
 8007030:	00003000 00000000                       .0......

08007038 <fonts24_28_char>:
 8007038:	00000007 08007020                       .... p..

08007040 <fonts24_29>:
 8007040:	80000000 00c01000 e0037870 0780ff3f     ........px..?...
 8007050:	000000fc 00000000                       ........

08007058 <fonts24_29_char>:
 8007058:	00000007 08007040                       ....@p..

08007060 <fonts24_2A>:
 8007060:	00000000 02004000 c0010040 00f00000     .....@..@.......
 8007070:	0200c001 40000040 00000000              ....@..@....

0800707c <fonts24_2A_char>:
 800707c:	00000009 08007060                       ....`p..

08007084 <fonts24_2B>:
 8007084:	00000000 18000018 00180000 01001800     ................
 8007094:	ff0180ff 00180080 00001800 18000018     ................
 80070a4:	00000000                                ....

080070a8 <fonts24_2B_char>:
 80070a8:	0000000c 08007084                       .....p..

080070b0 <fonts24_2C>:
 80070b0:	00000000 006c0000 00003c00 00000000     ......l..<......
 80070c0:	00000000                                ....

080070c4 <fonts24_2C_char>:
 80070c4:	00000006 080070b0                       .....p..

080070cc <fonts24_2D>:
 80070cc:	00000000 60000060 00600000 00006000     ....`..`..`..`..
 80070dc:	00000060 00000000                       `.......

080070e4 <fonts24_2D_char>:
 80070e4:	00000007 080070cc                       .....p..

080070ec <fonts24_2E>:
 80070ec:	00000000 000c0000 00000c00 00000000     ................
 80070fc:	00000000                                ....

08007100 <fonts24_2E_char>:
 8007100:	00000006 080070ec                       .....p..

08007108 <fonts24_2F>:
 8007108:	0f00000e fc0100c0 803f0000 00f00300     ..........?.....
 8007118:	00007000                                .p..

0800711c <fonts24_2F_char>:
 800711c:	00000006 08007108                       .....q..

08007124 <fonts24_30>:
 8007124:	00000000 ff0300ff e00007c0 0c30000c     ..............0.
 8007134:	000c3000 30000c30 03e00007 ff00c0ff     .0..0..0........
 8007144:	00000000                                ....

08007148 <fonts24_30_char>:
 8007148:	0000000c 08007124                       ....$q..

08007150 <fonts24_31>:
 8007150:	00000000 01000000 80010000 00c00000     ................
 8007160:	ff0f6000 f0ff0ff0 00000000 00000000     .`..............
 8007170:	00000000                                ....

08007174 <fonts24_31_char>:
 8007174:	0000000c 08007150                       ....Pq..

0800717c <fonts24_32>:
 800717c:	0e000000 010fc001 30800de0 0c30c00c     ...........0..0.
 800718c:	300c3060 30180c30 0ce00c0c 030cc007     `0.00..0........
 800719c:	00000000                                ....

080071a0 <fonts24_32_char>:
 80071a0:	0000000c 0800717c                       ....|q..

080071a8 <fonts24_33>:
 80071a8:	01000000 80038080 700006e0 0c30000c     ...........p..0.
 80071b8:	0c0c300c 300c0c30 07e01f0c e003c0f3     .0..0..0........
 80071c8:	00000000                                ....

080071cc <fonts24_33_char>:
 80071cc:	0000000c 080071a8                       .....q..

080071d4 <fonts24_34>:
 80071d4:	0000c000 f80000f0 00ce0000 0000c700     ................
 80071e4:	c00080c1 f0ff0fc0 00f0ff0f c00000c0     ................
 80071f4:	00000000                                ....

080071f8 <fonts24_34_char>:
 80071f8:	0000000c 080071d4                       .....q..

08007200 <fonts24_35>:
 8007200:	01000000 8f030080 f00f06e0 0c300c0c     ..............0.
 8007210:	060c3006 30060c30 07300c0e f00130fc     .0..0..0..0..0..
 8007220:	00000000                                ....

08007224 <fonts24_35_char>:
 8007224:	0000000c 08007200                       .....r..

0800722c <fonts24_36>:
 800722c:	01000000 ff0380ff 700806e0 0c300c0c     ...........p..0.
 800723c:	060c3006 30060c30 07700c0e f001e0fc     .0..0..0..p.....
 800724c:	00000080                                ....

08007250 <fonts24_36_char>:
 8007250:	0000000c 0800722c                       ....,r..

08007258 <fonts24_37>:
 8007258:	00000000 00003000 30000e30 0130e00f     .....0..0..0..0.
 8007268:	1e0030f8 30070030 00f00100 0000f000     .0..0..0........
 8007278:	00000030                                0...

0800727c <fonts24_37_char>:
 800727c:	0000000c 08007258                       ....Xr..

08007284 <fonts24_38>:
 8007284:	03000000 f30700e0 e01f06c0 0c300c0c     ..............0.
 8007294:	0c0c300c 300c0c30 07701e06 e303e0f7     .0..0..0..p.....
 80072a4:	00000080                                ....

080072a8 <fonts24_38_char>:
 80072a8:	0000000c 08007284                       .....r..

080072b0 <fonts24_39>:
 80072b0:	01000000 1f07800f 603006c0 0c30300c     ..........0`.00.
 80072c0:	300c3030 30300c30 03601807 ff00c0ff     00.00.00..`.....
 80072d0:	00000080                                ....

080072d4 <fonts24_39_char>:
 80072d4:	0000000c 080072b0                       .....r..

080072dc <fonts24_3A>:
 80072dc:	00000000 030c0000 00030c00 00000000     ................
 80072ec:	00000000                                ....

080072f0 <fonts24_3A_char>:
 80072f0:	00000006 080072dc                       .....r..

080072f8 <fonts24_3B>:
 80072f8:	00000000 034c0000 00033c00 00000000     ......L..<......
 8007308:	00000000                                ....

0800730c <fonts24_3B_char>:
 800730c:	00000006 080072f8                       .....r..

08007314 <fonts24_3C>:
 8007314:	00000000 3c000018 003c0000 00003c00     .......<..<..<..
 8007324:	66000066 00630000 0000c300 810180c1     f..f..c.........
 8007334:	80810180 00000000                       ........

0800733c <fonts24_3C_char>:
 800733c:	0000000d 08007314                       .....s..

08007344 <fonts24_3D>:
 8007344:	00000000 63000063 00630000 00006300     ....c..c..c..c..
 8007354:	63000063 00630000 00006300 63000063     c..c..c..c..c..c
 8007364:	00630000 00000000                       ..c.....

0800736c <fonts24_3D_char>:
 800736c:	0000000d 08007344                       ....Ds..

08007374 <fonts24_3E>:
 8007374:	01000000 81018081 00830180 0000c300     ................
 8007384:	66000063 00660000 00003c00 18000038     c..f..f..<..8...
 8007394:	00180000 00000000                       ........

0800739c <fonts24_3E_char>:
 800739c:	0000000d 08007374                       ....ts..

080073a4 <fonts24_3F>:
 80073a4:	00000000 01008001 600000c0 0c300000     ...........`..0.
 80073b4:	f00c30e0 30180030 00300c00 0300e007     .0..0..0..0.....
 80073c4:	000000c0                                ....

080073c8 <fonts24_3F_char>:
 80073c8:	0000000c 080073a4                       .....s..

080073d0 <fonts24_40>:
 80073d0:	01000000 ff0f00fc 80031e00 30c00030     ............0..0
 80073e0:	fc6160e0 301e6330 c63003c6 03c23003     .`a.0c.0..0..0..
 80073f0:	3003c330 c730c3c3 3fc630fe 3001c630     0..0..0..0.?0..0
 8007400:	33600066 ff11c000 00ff1880 00000008     f.`3............
 8007410:	00000000                                ....

08007414 <fonts24_40_char>:
 8007414:	00000016 080073d0                       .....s..

0800741c <fonts24_41>:
 800741c:	07000004 f0030080 007e0000 00c06f00     ..........~..o..
 800742c:	6000e061 f0600030 00e06700 f800007f     a..`0.`..g......
 800743c:	00e00300 04000007 00000000              ............

08007448 <fonts24_41_char>:
 8007448:	0000000e 0800741c                       .....t..

08007450 <fonts24_42>:
 8007450:	07000000 ff07f0ff 300c06f0 06300c06     ...........0..0.
 8007460:	0c06300c 300c0630 06300c06 1f03300c     .0..0..0..0..0..
 8007470:	e0f301f0 0000e000 00000000              ............

0800747c <fonts24_42_char>:
 800747c:	0000000e 08007450                       ....Pt..

08007484 <fonts24_43>:
 8007484:	00000000 ff01007f e08003c0 0c600006     ..............`.
 8007494:	000c3000 30000c30 0c30000c 00063000     .0..0..0..0..0..
 80074a4:	70000730 01e08003 c000c0c0 00000000     0..p............

080074b4 <fonts24_43_char>:
 80074b4:	00000010 08007484                       .....t..

080074bc <fonts24_44>:
 80074bc:	0f000000 ff0ff0ff 30000cf0 0c30000c     ...........0..0.
 80074cc:	000c3000 30000c30 0c30000c 00063000     .0..0..0..0..0..
 80074dc:	e0000770 01c0ff03 000080ff 00000000     p...............

080074ec <fonts24_44_char>:
 80074ec:	0000000f 080074bc                       .....t..

080074f4 <fonts24_45>:
 80074f4:	0f000000 ff0ff0ff 300c0cf0 0c300c0c     ...........0..0.
 8007504:	0c0c300c 300c0c30 0c300c0c 0c0c300c     .0..0..0..0..0..
 8007514:	300c0c30 0c300c0c 00000000 00000000     0..0..0.........

08007524 <fonts24_45_char>:
 8007524:	0000000f 080074f4                       .....t..

0800752c <fonts24_46>:
 800752c:	0f000000 ff0ff0ff 300c00f0 00300c00     ...........0..0.
 800753c:	0c00300c 300c0030 00300c00 0c00300c     .0..0..0..0..0..
 800754c:	30000030 00300000 00000000              0..0..0.....

08007558 <fonts24_46_char>:
 8007558:	0000000e 0800752c                       ....,u..

08007560 <fonts24_47>:
 8007560:	00000000 ff00007e e08101c0 06700003     ....~.........p.
 8007570:	00063000 30000c30 0c30000c 180c3018     .0..0..0..0..0..
 8007580:	30180e30 06701806 f803c018 00f801c0     0..0..p.........
 8007590:	00000000                                ....

08007594 <fonts24_47_char>:
 8007594:	00000011 08007560                       ....`u..

0800759c <fonts24_48>:
 800759c:	0f000000 ff0ff0ff 000c00f0 00000c00     ................
 80075ac:	0c00000c 000c0000 00000c00 0c00000c     ................
 80075bc:	f0ff0f00 00f0ff0f 00000000              ............

080075c8 <fonts24_48_char>:
 80075c8:	0000000e 0800759c                       .....u..

080075d0 <fonts24_49>:
 80075d0:	00000000 ff0f0000 f0ff0ff0 00000000     ................
 80075e0:	00000000                                ....

080075e4 <fonts24_49_char>:
 80075e4:	00000006 080075d0                       .....u..

080075ec <fonts24_4A>:
 80075ec:	03000000 80070080 00000600 0c00000c     ................
 80075fc:	00060000 f0ff0700 00f0ff03 00000000     ................

0800760c <fonts24_4A_char>:
 800760c:	0000000a 080075ec                       .....u..

08007614 <fonts24_4B>:
 8007614:	0f000000 ff0ff0ff 003000f0 00001800     ..........0.....
 8007624:	0e00000c 001f0000 00803900 c001c0e0     .........9......
 8007634:	30000760 0810000e 00000000 00000000     `..0............

08007644 <fonts24_4B_char>:
 8007644:	0000000f 08007614                       .....v..

0800764c <fonts24_4C>:
 800764c:	0f000000 ff0ff0ff 00000cf0 0c00000c     ................
 800765c:	000c0000 00000c00 0c00000c 000c0000     ................
 800766c:	00000000                                ....

08007670 <fonts24_4C_char>:
 8007670:	0000000c 0800764c                       ....Lv..

08007678 <fonts24_4D>:
 8007678:	0f000000 ff0ff0ff 300000f0 00e00100     ...........0....
 8007688:	fe00c00f 00f00300 07000007 e0030000     ................
 8007698:	00fe0000 00c01f00 0000e001 f0ff0f30     ............0...
 80076a8:	00f0ff0f 00000000                       ........

080076b0 <fonts24_4D_char>:
 80076b0:	00000012 08007678                       ....xv..

080076b8 <fonts24_4E>:
 80076b8:	0f000000 ff0ff0ff 300000f0 00600000     ...........0..`.
 80076c8:	0700c001 001e0080 01007800 800300e0     .........x......
 80076d8:	00000600 0ff0ff0f 0000f0ff 00000000     ................

080076e8 <fonts24_4E_char>:
 80076e8:	0000000f 080076b8                       .....v..

080076f0 <fonts24_4F>:
 80076f0:	00000000 ff0180ff e08003c0 06700007     ..............p.
 8007700:	000c3000 30000c30 0c30000c 000c3000     .0..0..0..0..0..
 8007710:	70000630 03e00007 ff01c0c3 003c0080     0..p..........<.
 8007720:	00000000                                ....

08007724 <fonts24_4F_char>:
 8007724:	00000011 080076f0                       .....v..

0800772c <fonts24_50>:
 800772c:	0f000000 ff0ff0ff 301800f0 00301800     ...........0..0.
 800773c:	18003018 30180030 00301800 1c003018     .0..0..0..0..0..
 800774c:	e00f0070 00c00700 00000000              p...........

08007758 <fonts24_50_char>:
 8007758:	0000000e 0800772c                       ....,w..

08007760 <fonts24_51>:
 8007760:	00000000 ff0100ff c0800380 06600007     ..............`.
 8007770:	000c3000 30000c30 0d30000d 800f3080     .0..0..0..0..0..
 8007780:	30000730 0f600007 ff0cc0ff 00001880     0..0..`.........
 8007790:	00000000                                ....

08007794 <fonts24_51_char>:
 8007794:	00000011 08007760                       ....`w..

0800779c <fonts24_52>:
 800779c:	0f000000 ff0ff0ff 301800f0 00301800     ...........0..0.
 80077ac:	18003018 30180030 00301800 6c003038     .0..0..0..0.80.l
 80077bc:	70ce0130 0ee08707 0008c001 00000000     0..p............

080077cc <fonts24_52_char>:
 80077cc:	00000010 0800779c                       .....w..

080077d4 <fonts24_53>:
 80077d4:	01000000 c30300c0 e00707c0 0c300e06     ..............0.
 80077e4:	0c0c300c 300c0c30 0c30180c 38063018     .0..0..0..0..0.8
 80077f4:	e0f00770 00c0e003 00000000              p...........

08007800 <fonts24_53_char>:
 8007800:	0000000e 080077d4                       .....w..

08007808 <fonts24_54>:
 8007808:	00000000 00003000 30000030 00300000     .....0..0..0..0.
 8007818:	ff0f3000 f0ff0ff0 00300000 00003000     .0........0..0..
 8007828:	30000030 00300000 00000000              0..0..0.....

08007834 <fonts24_54_char>:
 8007834:	0000000e 08007808                       .....x..

0800783c <fonts24_55>:
 800783c:	01000000 ff03f0ff 000006f0 0c000006     ................
 800784c:	000c0000 00000c00 0600000c 00060000     ................
 800785c:	f0ff0300 00f0ff01 00000000              ............

08007868 <fonts24_55_char>:
 8007868:	0000000e 0800783c                       ....<x..

08007870 <fonts24_56>:
 8007870:	00100000 03007000 800f00f0 03007c00     .....p.......|..
 8007880:	800f00f0 00000e00 0100c007 3e0000f8     ...............>
 8007890:	80070000 00e00100 00007000 00000010     .........p......

080078a0 <fonts24_56_char>:
 80078a0:	0000000f 08007870                       ....px..

080078a8 <fonts24_57>:
 80078a8:	00300000 3f00f003 00fc03c0 0c00c00f     ..0....?........
 80078b8:	c00f0000 00fc0300 00c03f00 0000f003     .........?......
 80078c8:	f0030030 03c03f00 c00f00fc 00000c00     0....?..........
 80078d8:	0300c00f 3f0000fc f00300c0 00300000     .......?......0.
 80078e8:	00000000                                ....

080078ec <fonts24_57_char>:
 80078ec:	00000016 080078a8                       .....x..

080078f4 <fonts24_58>:
 80078f4:	0c000008 00061000 60000330 00c0e001     ........0..`....
 8007904:	1f0080f3 001e0000 0100f300 000380e1     ................
 8007914:	600006c0 0830000c 00001000              ...`..0.....

08007920 <fonts24_58_char>:
 8007920:	0000000e 080078f4                       .....x..

08007928 <fonts24_59>:
 8007928:	00000000 00001000 e0010070 00800700     ........p.......
 8007938:	fc0f000f 00fc0f00 00000e00 01000007     ................
 8007948:	e00000c0 00300000 00001000              ......0.....

08007954 <fonts24_59_char>:
 8007954:	0000000e 08007928                       ....(y..

0800795c <fonts24_5A>:
 800795c:	0e00000c 000f3000 30800d30 0c30e00c     .....0..0..0..0.
 800796c:	1c0c3078 30060c30 0c30030c 000cb001     x0..0..0..0.....
 800797c:	70000cf0 0000000c                       ...p....

08007984 <fonts24_5A_char>:
 8007984:	0000000d 0800795c                       ....\y..

0800798c <fonts24_5B>:
	...

080079a0 <fonts24_5B_char>:
 80079a0:	00000006 0800798c                       .....y..

080079a8 <fonts24_5C>:
 80079a8:	00300000 3f00f003 00fc03c0 0c00c00f     ..0....?........
 80079b8:	00000000                                ....

080079bc <fonts24_5C_char>:
 80079bc:	00000006 080079a8                       .....y..

080079c4 <fonts24_5D>:
 80079c4:	ff0000e0 c0ff0000 00f0ff00 ff00fcff     ................
 80079d4:	7fff00ff c0fffe00 fcc0fffc fff8e0ff     ................
 80079e4:	f8fff1f0 61f8fff1 fc417cff fee103fc     .......a.|A.....
 80079f4:	00fe0303 0f00fe07 ff1f00ff 00ff3f00     .............?..
 8007a04:	0700ff7f 1f0000ff 000f0000 7f00ff07     ................
 8007a14:	ff3f00ff 00ff1f00 0700ff0f fe0303fe     ..?.............
 8007a24:	41fee103 ff61fcfc f8fff17c f8f8fff1     ...A..a.|.......
 8007a34:	fffcf0ff c0fffce0 ffc0fffe ffff007f     ................
 8007a44:	00fcff00 ff00f0ff 00ff00c0 0000e000     ................

08007a54 <fonts24_5D_char>:
 8007a54:	00000030 080079c4                       0....y..

08007a5c <fonts24_5E>:
 8007a5c:	00070000 03007f00 ff0f00ff 00fb3f00     .............?..
 8007a6c:	ff00f37f f1ff01f3 07f1ff03 ff0ff1ff     ................
 8007a7c:	80ff0fe0 1f00fe1f f83f00fc 00f83f00     ..........?..?..
 8007a8c:	7f00f07f cf7f00e0 f0df7fe0 fff8ffff     ................
 8007a9c:	fffff8ff f8fffff8 fff8ffff fffff8ff     ................
 8007aac:	f8fffff8 7ff0df7f e07fe0cf 00f07f00     ................
 8007abc:	3f00f83f fc1f00f8 00fe1f00 0f80ff0f     ?..?............
 8007acc:	ff07e0ff f1ff03f1 00f1ff01 7f00f3ff     ................
 8007adc:	fb3f00f3 00ff0f00 0000ff03 0700007f     ..?.............

08007aec <fonts24_5E_char>:
 8007aec:	00000030 08007a5c                       0...\z..

08007af4 <fonts24_5F>:
 8007af4:	c00000c0 00c00000 0000c000 c00000c0     ................
 8007b04:	00c00000 0000c000 c00000c0 00c00000     ................
 8007b14:	0000c000                                ....

08007b18 <fonts24_5F_char>:
 8007b18:	0000000c 08007af4                       .....z..

08007b20 <fonts24_60>:
	...

08007b34 <fonts24_60_char>:
 8007b34:	00000006 08007b20                       .... {..

08007b3c <fonts24_61>:
 8007b3c:	03000000 ee0700cc 00670e00 0c00630c     ..........g..c..
 8007b4c:	630c0063 00330600 0f003703 fc0f00fe     c..c..3..7......
 8007b5c:	00000000                                ....

08007b60 <fonts24_61_char>:
 8007b60:	0000000c 08007b3c                       ....<{..

08007b68 <fonts24_62>:
 8007b68:	0f000000 ff0ff0ff 000c03f0 0c000606     ................
 8007b78:	030c0003 00030c00 03000706 fc0100fe     ................
 8007b88:	00000000                                ....

08007b8c <fonts24_62_char>:
 8007b8c:	0000000c 08007b68                       ....h{..

08007b94 <fonts24_63>:
 8007b94:	01000000 fc0700f8 00060e00 0c00030c     ................
 8007ba4:	030c0003 00030e00 03000707 8801008e     ................
 8007bb4:	00000000                                ....

08007bb8 <fonts24_63_char>:
 8007bb8:	0000000c 08007b94                       .....{..

08007bc0 <fonts24_64>:
 8007bc0:	01000000 fc0700f8 00060e00 0c00030c     ................
 8007bd0:	030c0003 00030e00 0f000e07 ff0ff0ff     ................
 8007be0:	000000f0                                ....

08007be4 <fonts24_64_char>:
 8007be4:	0000000c 08007bc0                       .....{..

08007bec <fonts24_65>:
 8007bec:	01000000 fc0700f8 00360e00 0c00330c     ..........6..3..
 8007bfc:	330c0033 00330e00 03003607 3c01003e     3..3..3..6..>..<
 8007c0c:	00000000                                ....

08007c10 <fonts24_65_char>:
 8007c10:	0000000c 08007bec                       .....{..

08007c18 <fonts24_66>:
 8007c18:	00000300 ff0f0003 f0ff0fe0 00300300     ..............0.
 8007c28:	00003003 00000030                       .0..0...

08007c30 <fonts24_66_char>:
 8007c30:	00000007 08007c18                       .....|..

08007c38 <fonts24_67>:
 8007c38:	31000000 fe7300fc 0007e700 c60003c6     ...1..s.........
 8007c48:	03c60003 0006c300 3f00ff7f 000000ff     ...........?....
 8007c58:	00000000                                ....

08007c5c <fonts24_67_char>:
 8007c5c:	0000000b 08007c38                       ....8|..

08007c64 <fonts24_68>:
 8007c64:	0f000000 ff0ff0ff 000c00f0 00000600     ................
 8007c74:	03000003 00030000 0f000700 fc0f00fe     ................
 8007c84:	00000000                                ....

08007c88 <fonts24_68_char>:
 8007c88:	0000000c 08007c64                       ....d|..

08007c90 <fonts24_69>:
 8007c90:	0f000000 ff0f30ff 00000030 00000000     .....0..0.......

08007ca0 <fonts24_69_char>:
 8007ca0:	00000005 08007c90                       .....|..

08007ca8 <fonts24_6A>:
 8007ca8:	ff0000c0 ff7f30ff 00000030 00000000     .....0..0.......

08007cb8 <fonts24_6A_char>:
 8007cb8:	00000005 08007ca8                       .....|..

08007cc0 <fonts24_6B>:
 8007cc0:	0f000000 ff0ff0ff 006000f0 00003000     ..........`..0..
 8007cd0:	ec010078 00860300 0c00030e 00000001     x...............

08007ce0 <fonts24_6B_char>:
 8007ce0:	0000000a 08007cc0                       .....|..

08007ce8 <fonts24_6C>:
 8007ce8:	0f000000 ff0ff0ff 000000f0              ............

08007cf4 <fonts24_6C_char>:
 8007cf4:	00000004 08007ce8                       .....|..

08007cfc <fonts24_6D>:
 8007cfc:	0f000000 ff0f00ff 000c0000 00000600     ................
 8007d0c:	03000003 00030000 0f00ff0f 060000fe     ................
 8007d1c:	00030000 00000300 07000003 00fe0f00     ................
 8007d2c:	0000fc0f 00000000                       ........

08007d34 <fonts24_6D_char>:
 8007d34:	00000012 08007cfc                       .....|..

08007d3c <fonts24_6E>:
 8007d3c:	0f000000 ff0f00ff 000c0000 00000600     ................
 8007d4c:	03000003 00030000 0f00ff0f 000000fe     ................
 8007d5c:	00000000                                ....

08007d60 <fonts24_6E_char>:
 8007d60:	0000000b 08007d3c                       ....<}..

08007d68 <fonts24_6F>:
 8007d68:	01000000 fc0300f8 00060600 0c00030c     ................
 8007d78:	030c0003 00030c00 03000606 f80100fc     ................
 8007d88:	00000000                                ....

08007d8c <fonts24_6F_char>:
 8007d8c:	0000000c 08007d68                       ....h}..

08007d94 <fonts24_70>:
 8007d94:	ff000000 ffff00ff 00060600 0c00030c     ................
 8007da4:	030c0003 00030c00 03000606 f80100fc     ................
 8007db4:	00000000                                ....

08007db8 <fonts24_70_char>:
 8007db8:	0000000c 08007d94                       .....}..

08007dc0 <fonts24_71>:
 8007dc0:	01000000 fe0300fc 00060600 0c00030c     ................
 8007dd0:	030c0003 00030c00 ff000606 ffff00ff     ................
 8007de0:	00000000                                ....

08007de4 <fonts24_71_char>:
 8007de4:	0000000c 08007dc0                       .....}..

08007dec <fonts24_72>:
 8007dec:	0f000000 ff0f00ff 00060000 00000300     ................
 8007dfc:	03000003 00000000                       ........

08007e04 <fonts24_72_char>:
 8007e04:	00000008 08007dec                       .....}..

08007e0c <fonts24_73>:
 8007e0c:	03000000 3e07000c 00330e00 0c00330c     .......>..3..3..
 8007e1c:	630c0063 006f0e00 0300ce07 00000080     c..c..o.........
 8007e2c:	00000000                                ....

08007e30 <fonts24_73_char>:
 8007e30:	0000000b 08007e0c                       .....~..

08007e38 <fonts24_74>:
 8007e38:	00000300 ff070003 e0ff0fe0 0c00030c     ................
 8007e48:	00000003 00000000                       ........

08007e50 <fonts24_74_char>:
 8007e50:	00000007 08007e38                       ....8~..

08007e58 <fonts24_75>:
 8007e58:	01000000 ff0300ff 00000600 0c00000c     ................
 8007e68:	000c0000 00000600 0f000003 ff0f00ff     ................
 8007e78:	00000000                                ....

08007e7c <fonts24_75_char>:
 8007e7c:	0000000c 08007e58                       ....X~..

08007e84 <fonts24_76>:
 8007e84:	00000100 3e000007 00f80100 0600c007     .......>........
 8007e94:	c0070000 00f80100 00003e00 01000007     .........>......
 8007ea4:	00000000                                ....

08007ea8 <fonts24_76_char>:
 8007ea8:	0000000b 08007e84                       .....~..

08007eb0 <fonts24_77>:
 8007eb0:	00000300 fc01001f 00e00700 0700000e     ................
 8007ec0:	fe0100f0 000f0000 0700fe01 000e00f0     ................
 8007ed0:	00e00700 0000fc01 0300001f 00000000     ................

08007ee0 <fonts24_77_char>:
 8007ee0:	0000000f 08007eb0                       .....~..

08007ee8 <fonts24_78>:
 8007ee8:	0e000008 07070001 009e0100 0000f800     ................
 8007ef8:	dc000070 008e0100 0e000307 00080001     p...............
 8007f08:	00000000                                ....

08007f0c <fonts24_78_char>:
 8007f0c:	0000000c 08007ee8                       .....~..

08007f14 <fonts24_79>:
 8007f14:	c0000000 7fc0000f 00f0c100 3e008067     ............g..>
 8007f24:	801f0000 00f00300 00007f00 0000000f     ................
 8007f34:	00000000                                ....

08007f38 <fonts24_79_char>:
 8007f38:	0000000b 08007f14                       ........

08007f40 <fonts24_7A>:
 8007f40:	0e00000c 030f0003 00830d00 0c00e30c     ................
 8007f50:	1b0c0073 000f0c00 0c00070c 00000003     s...............
 8007f60:	00000000                                ....

08007f64 <fonts24_7A_char>:
 8007f64:	0000000b 08007f40                       ....@...

08007f6c <fonts24_7B>:
 8007f6c:	00000000 01000003 c0000080 0f600000     ..............`.
 8007f7c:	ff0ff0ff 600000f0 00c00000 03008001     .......`........
 8007f8c:	00000000                                ....

08007f90 <fonts24_7B_char>:
 8007f90:	0000000c 08007f6c                       ....l...

08007f98 <fonts24_7C>:
 8007f98:	00000000 ffff0000 f0fffff0 00000000     ................
 8007fa8:	00000000                                ....

08007fac <fonts24_7C_char>:
 8007fac:	00000006 08007f98                       ........

08007fb4 <fonts24_7D>:
 8007fb4:	00000000 800100c0 00000300 0f000006     ................
 8007fc4:	ff0ff0ff 000006f0 01000003 c0000080     ................
 8007fd4:	00000000                                ....

08007fd8 <fonts24_7D_char>:
 8007fd8:	0000000c 08007fb4                       ........

08007fe0 <fonts24_7E_92>:
 8007fe0:	00000000 00003001 000000f0 00000000     .....0..........

08007ff0 <fonts24_7E_92_char>:
 8007ff0:	00000005 08007fe0                       ........

08007ff8 <fonts24_93_B0>:
 8007ff8:	00000000 0100e000 10010010 00100100     ................
 8008008:	0000e000 00000000                       ........

08008010 <fonts24_93_B0_char>:
 8008010:	00000007 08007ff8                       ........

08008018 <fonts24_B1_BF>:
 8008018:	0e00000c 030f0003 00830d00 0cc0e30c     ................
 8008028:	1b0cc073 000f0c00 0c00070c 00000003     s...............
 8008038:	00000000                                ....

0800803c <fonts24_B1_BF_char>:
 800803c:	0000000b 08008018                       ........

08008044 <fonts24_C0_C1>:
 8008044:	07000004 f0030080 007e0000 00c06f00     ..........~..o..
 8008054:	6000e061 f4600038 00e26700 f800017f     a..`8.`..g......
 8008064:	00e00300 04000007 00000000              ............

08008070 <fonts24_C0_C1_char>:
 8008070:	0000000e 08008044                       ....D...

08008078 <fonts24_C2_C4>:
 8008078:	07000004 f0030080 007e0000 00c66f00     ..........~..o..
 8008088:	6000e661 f0600030 00e66700 f800067f     a..`0.`..g......
 8008098:	00e00300 04000007 00000000              ............

080080a4 <fonts24_C2_C4_char>:
 80080a4:	0000000e 08008078                       ....x...

080080ac <fonts24_C5>:
 80080ac:	07000004 f0030080 007e0000 00c06f00     ..........~..o..
 80080bc:	6000ec61 f2600032 00ec6700 f800007f     a..`2.`..g......
 80080cc:	00e00300 04000007 00000000              ............

080080d8 <fonts24_C5_char>:
 80080d8:	0000000e 080080ac                       ........

080080e0 <fonts24_C6_E0>:
 80080e0:	03000000 ee0700cc 00670e00 0c10630c     ..........g..c..
 80080f0:	630c3063 40330660 0f003703 fc0f00fe     c0.c`.3@.7......
 8008100:	00000000                                ....

08008104 <fonts24_C6_E0_char>:
 8008104:	0000000c 080080e0                       ........

0800810c <fonts24_E1>:
 800810c:	07000000 cc070088 00660c00 0c40630c     ..........f..c@.
 800811c:	330c6063 10330630 0f003702 f80f00fe     c`.30.3..7......
 800812c:	00000000                                ....

08008130 <fonts24_E1_char>:
 8008130:	0000000c 0800810c                       ........

08008138 <fonts24_E2_E4>:
 8008138:	03000000 ee0700cc 60670e00 0c60630c     ..........g`.c`.
 8008148:	630c0063 60330600 0f603703 fc0f00fe     c..c..3`.7`.....
 8008158:	00000000                                ....

0800815c <fonts24_E2_E4_char>:
 800815c:	0000000c 08008138                       ....8...

08008164 <fonts24_E5>:
 8008164:	03000000 ee0700cc 00670e00 0c30630c     ..........g..c0.
 8008174:	630c4863 30330648 0f003703 fc0f00fe     cH.cH.30.7......
 8008184:	00000000                                ....

08008188 <fonts24_E5_char>:
 8008188:	0000000c 08008164                       ....d...

08008190 <fonts24_E6_E9>:
 8008190:	03000000 fc0700f8 00660600 0c40630c     ..........f..c@.
 80081a0:	630c6063 10630630 03006706 7803007e     c`.c0.c..g..~..x
 80081b0:	00000000                                ....

080081b4 <fonts24_E6_E9_char>:
 80081b4:	0000000c 08008190                       ........

080081bc <fonts24_EA_ED>:
 80081bc:	00000000 ff0f4000 30ff0f60 00100000     .....@..`..0....
 80081cc:	00000000                                ....

080081d0 <fonts24_EA_ED_char>:
 80081d0:	00000006 080081bc                       ........

080081d8 <fonts24_EE_F1>:
 80081d8:	00000000 ff0f0000 60ff0f00 00300600     ...........`..0.
 80081e8:	03003003 60030060 0f600700 fc0f30fe     .0..`..`..`..0..
 80081f8:	00000000                                ....

080081fc <fonts24_EE_F1_char>:
 80081fc:	0000000c 080081d8                       ........

08008204 <fonts24_F2_F3>:
 8008204:	01000000 fc0700f8 00060e00 0c40030c     ..............@.
 8008214:	030c6003 10030e30 03000706 f80100fe     .`..0...........
 8008224:	00000000                                ....

08008228 <fonts24_F2_F3_char>:
 8008228:	0000000c 08008204                       ........

08008230 <fonts24_F4_F6>:
 8008230:	01000000 fc0300f8 60060600 0c60030c     ...........`..`.
 8008240:	030c0003 60030c00 03600606 f80100fc     .......`..`.....
 8008250:	00000000                                ....

08008254 <fonts24_F4_F6_char>:
 8008254:	0000000c 08008230                       ....0...

0800825c <fonts24_F7_F9>:
 800825c:	01000000 ff0300ff 00000600 0c10000c     ................
 800826c:	000c3000 40000660 0f000003 ff0f00ff     .0..`..@........
 800827c:	00000000                                ....

08008280 <fonts24_F7_F9_char>:
 8008280:	0000000c 0800825c                       ....\...

08008288 <fonts24_FA>:
 8008288:	01000000 ff0700ff 00000e00 0c40000c     ..............@.
 8008298:	000c6000 10000e30 0f000006 ff0f00ff     .`..0...........
 80082a8:	00000000                                ....

080082ac <fonts24_FA_char>:
 80082ac:	0000000c 08008288                       ........

080082b4 <fonts24_FB_FC>:
 80082b4:	01000000 ff0300ff 60000600 0c60000c     ...........`..`.
 80082c4:	000c0000 60000600 0f600003 ff0f00ff     .......`..`.....
 80082d4:	00000000                                ....

080082d8 <fonts24_FB_FC_char>:
 80082d8:	0000000c 080082b4                       ........

080082e0 <fonts24_FD_FF>:
	...

080082f4 <fonts24_FD_FF_char>:
 80082f4:	00000006 080082e0                       ........

080082fc <fonts32_20>:
	...

08008318 <fonts32_20_char>:
 8008318:	00000007 080082fc                       ........

08008320 <fonts32_21>:
	...
 8008328:	039fffe0 039fffe0 039fffe0 00000000     ................
	...

08008340 <fonts32_21_char>:
 8008340:	00000008 08008320                       .... ...

08008348 <fonts32_22>:
 8008348:	00000000 00000fe0 00001fe0 00000fe0     ................
	...
 8008360:	00000fe0 00001fe0 00000fe0 00000000     ................

08008370 <fonts32_22_char>:
 8008370:	0000000a 08008348                       ....H...

08008378 <fonts32_23>:
 8008378:	001c3800 071c3800 07fc3800 07fff800     .8...8...8......
 8008388:	01fffe00 001fffe0 001c7fe0 001c3be0     .............;..
 8008398:	07fc3800 07fe3800 07fff800 003fff80     .8...8........?.
 80083a8:	001fffe0 001c3fe0 001c38e0 001c3800     .....?...8...8..
	...

080083c0 <fonts32_23_char>:
 80083c0:	00000012 08008378                       ....x...

080083c8 <fonts32_24>:
 80083c8:	00000000 00f03f00 01f07f80 03f0ffc0     .....?..........
 80083d8:	07c0f0e0 0781e0e0 0701e0e0 3ffffff8     ...............?
 80083e8:	3ffffff8 0703c0e0 0783c0e0 07c783e0     ...?............
 80083f8:	03ff83c0 01ff0380 00fe0000 00000000     ................
	...

08008410 <fonts32_24_char>:
 8008410:	00000012 080083c8                       ........

08008418 <fonts32_25>:
 8008418:	00000000 00001f00 00007fc0 0000ffe0     ................
 8008428:	0000e1e0 0000c0e0 0600c0e0 0780e1e0     ................
 8008438:	07e0ffe0 03f87fc0 00fe1f00 003f8000     ..............?.
 8008448:	000fc000 0003f000 0000fc00 01fc3f00     .............?..
 8008458:	03fe0fc0 07ff03e0 060300e0 06030060     ............`...
 8008468:	06030000 07ff0000 03fe0000 01fc0000     ................
	...

08008480 <fonts32_25_char>:
 8008480:	0000001a 08008418                       ........

08008488 <fonts32_26>:
 8008488:	00000000 007c0000 01fe0000 03ff0000     ......|.........
 8008498:	03ff9f80 0783ffc0 0701ffe0 0700f8e0     ................
 80084a8:	0701f0e0 0707f0e0 038ff8e0 03ff3fe0     .............?..
 80084b8:	01fe1fc0 00f80f80 01fe0000 03fe0000     ................
 80084c8:	038e0000 03800000 00000000 00000000     ................

080084d8 <fonts32_26_char>:
 80084d8:	00000014 08008488                       ........

080084e0 <fonts32_27>:
 80084e0:	00000000 000007e0 00001fe0 00001fe0     ................
 80084f0:	000007e0 00000000 00000000 00000000     ................

08008500 <fonts32_27_char>:
 8008500:	00000008 080084e0                       ........

08008508 <fonts32_28>:
 8008508:	00000000 003f0000 03fff000 0ffffc00     ......?.........
 8008518:	3fffff00 7f001fc0 f80003e0 c00000e0     ...?............
 8008528:	80000020 00000000 00000000 00000000      ...............

08008538 <fonts32_28_char>:
 8008538:	0000000c 08008508                       ........

08008540 <fonts32_29>:
 8008540:	00000000 00000020 c00000e0 f00003e0     .... ...........
 8008550:	fe000fc0 7fffff80 1ffffe00 07fff800     ................
 8008560:	00ffc000 00000000 00000000              ............

0800856c <fonts32_29_char>:
 800856c:	0000000b 08008540                       ....@...

08008574 <fonts32_2A>:
 8008574:	00000380 00000380 00003b80 00003f00     .........;...?..
 8008584:	00003fe0 00000fe0 00003fe0 00003f00     .?.......?...?..
 8008594:	00003b80 00000380 00000380 00000000     .;..............
	...

080085ac <fonts32_2A_char>:
 80085ac:	0000000e 08008574                       ....t...

080085b4 <fonts32_2B>:
 80085b4:	00000000 00038000 00038000 00038000     ................
 80085c4:	00038000 00038000 00038000 007ffe00     ................
 80085d4:	007ffe00 007ffe00 00038000 00038000     ................
 80085e4:	00038000 00038000 00038000 00038000     ................
	...

080085fc <fonts32_2B_char>:
 80085fc:	00000012 080085b4                       ........

08008604 <fonts32_2C>:
	...
 800860c:	27800000 3f800000 3f800000 1f800000     ...'...?...?....
	...

08008624 <fonts32_2C_char>:
 8008624:	00000008 08008604                       ........

0800862c <fonts32_2D>:
 800862c:	000e0000 000e0000 000e0000 000e0000     ................
 800863c:	000e0000 000e0000 000e0000 000e0000     ................
 800864c:	000e0000 00000000                       ........

08008654 <fonts32_2D_char>:
 8008654:	0000000a 0800862c                       ....,...

0800865c <fonts32_2E>:
	...
 8008664:	07800000 07800000 07800000 07800000     ................
	...

0800867c <fonts32_2E_char>:
 800867c:	00000008 0800865c                       ....\...

08008684 <fonts32_2F>:
 8008684:	07800000 07f80000 07ff8000 00fff000     ................
 8008694:	000fff00 0000ffe0 00001fe0 000001e0     ................
 80086a4:	00000000                                ....

080086a8 <fonts32_2F_char>:
 80086a8:	00000009 08008684                       ........

080086b0 <fonts32_30>:
 80086b0:	00000000 003ffc00 00ffff00 01ffff80     ......?.........
 80086c0:	03e00fc0 078001e0 070000e0 070000e0     ................
 80086d0:	070000e0 070000e0 038001e0 03e00fc0     ................
 80086e0:	01ffff80 00ffff00 003ffc00 00000000     ..........?.....
 80086f0:	00000000                                ....

080086f4 <fonts32_30_char>:
 80086f4:	00000011 080086b0                       ........

080086fc <fonts32_31>:
	...
 8008708:	00001800 00001c00 00000e00 00000f00     ................
 8008718:	00000780 07ffffc0 07ffffe0 07ffffe0     ................
	...

0800873c <fonts32_31_char>:
 800873c:	00000010 080086fc                       ........

08008744 <fonts32_32>:
 8008744:	00000000 03800c00 03c00f80 03e00fc0     ................
 8008754:	03f003c0 037800e0 033c00e0 031e00e0     ......x...<.....
 8008764:	030f00e0 030780e0 0303c0e0 0301f3c0     ................
 8008774:	0300ff80 03003f00 03000c00 00000000     .....?..........
 8008784:	00000000                                ....

08008788 <fonts32_32_char>:
 8008788:	00000011 08008744                       ....D...

08008790 <fonts32_33>:
 8008790:	00000000 00700700 00f00780 01f007c0     ......p.........
 80087a0:	03e003c0 078001e0 0701c0e0 0701c0e0     ................
 80087b0:	0701c0e0 0701c1e0 0781e3e0 07c7ffc0     ................
 80087c0:	03ff3f80 01fe1f00 00fc0000 00000000     .?..............
 80087d0:	00000000                                ....

080087d4 <fonts32_33_char>:
 80087d4:	00000011 08008790                       ........

080087dc <fonts32_34>:
 80087dc:	003e0000 003f0000 003f8000 003bc000     ..>...?...?...;.
 80087ec:	0039e000 0038f000 00387c00 00383e00     ..9...8..|8..>8.
 80087fc:	00381f80 07ffffc0 07ffffe0 07ffffe0     ..8.............
 800880c:	00380000 00380000 00380000 00000000     ..8...8...8.....

0800881c <fonts32_34_char>:
 800881c:	00000010 080087dc                       ........

08008824 <fonts32_35>:
 8008824:	00000000 0071c000 00f1fe00 01f1ffc0     ......q.........
 8008834:	03c1ffc0 0780e3c0 0700f1c0 070071c0     .............q..
 8008844:	070071c0 070071c0 0780f1c0 03c1f1c0     .q...q..........
 8008854:	01ffe1c0 00ffc1c0 007f8000 00000000     ................

08008864 <fonts32_35_char>:
 8008864:	00000010 08008824                       ....$...

0800886c <fonts32_36>:
 800886c:	00000000 007ffc00 00ffff00 01ffff80     ................
 800887c:	03f7c7c0 0781e1e0 0700e0e0 0700e0e0     ................
 800888c:	0700e0e0 0700e0e0 0780e0e0 03c1e3e0     ................
 800889c:	01ffc7c0 00ff8780 007f0700 00000000     ................

080088ac <fonts32_36_char>:
 80088ac:	00000010 0800886c                       ....l...

080088b4 <fonts32_37>:
 80088b4:	00000000 000001e0 000001e0 000001e0     ................
 80088c4:	07e001e0 07fc01e0 07ff81e0 07ffe1e0     ................
 80088d4:	001ff9e0 0003fde0 00007fe0 00001fe0     ................
 80088e4:	000007e0 000003e0 000001e0 00000000     ................

080088f4 <fonts32_37_char>:
 80088f4:	00000010 080088b4                       ........

080088fc <fonts32_38>:
 80088fc:	00000000 007e0000 01ff1f80 03ffbfc0     ......~.........
 800890c:	03e7ffc0 0781f1e0 0701e0e0 0701e0e0     ................
 800891c:	0701e0e0 0701e0e0 0781f1e0 03e7ffc0     ................
 800892c:	01ffbfc0 00ff1f00 007e0000 00000000     ..........~.....
 800893c:	00000000                                ....

08008940 <fonts32_38_char>:
 8008940:	00000011 080088fc                       ........

08008948 <fonts32_39>:
 8008948:	00000000 0060fc00 01e1ff00 03e3ff80     ......`.........
 8008958:	03e7efc0 078781e0 070700e0 070700e0     ................
 8008968:	070700e0 078700e0 03c781e0 03f3efc0     ................
 8008978:	01ffff80 00ffff00 003ffc00 00000000     ..........?.....

08008988 <fonts32_39_char>:
 8008988:	00000010 08008948                       ....H...

08008990 <fonts32_3A>:
	...
 8008998:	07803800 07803800 07803800 07803800     .8...8...8...8..
	...

080089b0 <fonts32_3A_char>:
 80089b0:	00000008 08008990                       ........

080089b8 <fonts32_3B>:
	...
 80089c0:	67803800 7f803800 3f803800 1f803800     .8.g.8...8.?.8..
	...

080089d8 <fonts32_3B_char>:
 80089d8:	00000008 080089b8                       ........

080089e0 <fonts32_3C>:
 80089e0:	00000000 0003c000 0003c000 0007e000     ................
 80089f0:	0007e000 0007e000 000ff000 000e7000     .............p..
 8008a00:	001e7800 001e7800 001c3800 003c3c00     .x...x...8...<<.
 8008a10:	00381c00 00781e00 00700e00 00700e00     ..8...x...p...p.
	...

08008a28 <fonts32_3C_char>:
 8008a28:	00000012 080089e0                       ........

08008a30 <fonts32_3D>:
 8008a30:	00000000 001e3800 001e3800 001e3800     .....8...8...8..
 8008a40:	001e3800 001e3800 001e3800 001e3800     .8...8...8...8..
 8008a50:	001e3800 001e3800 001e3800 001e3800     .8...8...8...8..
 8008a60:	001e3800 001e3800 001e3800 001e3800     .8...8...8...8..
	...

08008a78 <fonts32_3D_char>:
 8008a78:	00000012 08008a30                       ....0...

08008a80 <fonts32_3E>:
 8008a80:	00000000 00700e00 00781e00 00781e00     ......p...x...x.
 8008a90:	00381c00 003c3c00 001c3800 001c3800     ..8..<<..8...8..
 8008aa0:	001e7800 000e7000 000ff000 0007e000     .x...p..........
 8008ab0:	0007e000 0007e000 0003c000 0003c000     ................
	...

08008ac8 <fonts32_3E_char>:
 8008ac8:	00000012 08008a80                       ........

08008ad0 <fonts32_3F>:
 8008ad0:	00000000 00000f00 00000f80 00000fc0     ................
 8008ae0:	000007e0 000001e0 079e00e0 079f00e0     ................
 8008af0:	079f80e0 079fc0e0 0003e1e0 0000fbe0     ................
 8008b00:	0000ffc0 00007f80 00001f00 00000000     ................

08008b10 <fonts32_3F_char>:
 8008b10:	00000010 08008ad0                       ........

08008b18 <fonts32_40>:
 8008b18:	00000000 007f8000 03ffe000 0ffff800     ................
 8008b28:	1f81fc00 3e003e00 3c000f00 787f0780     .....>.>...<...x
 8008b38:	f1ffc3c0 f1ffe1c0 e3c1f1e0 e78078e0     .............x..
 8008b48:	e70038e0 c78038e0 c38038e0 c1c038e0     .8...8...8...8..
 8008b58:	c1f078e0 c3fff8e0 c7ffc0e0 e7fff8e0     .x..............
 8008b68:	e783f9e0 e38039c0 f3c003c0 71e00780     .....9.........q
 8008b78:	78f81f00 3c7ffe00 1c3ffc00 0c0ff000     ...x...<..?.....
 8008b88:	04000000 00000000 00000000              ............

08008b94 <fonts32_40_char>:
 8008b94:	0000001f 08008b18                       ........

08008b9c <fonts32_41>:
 8008b9c:	07800000 07e00000 07fc0000 03ff0000     ................
 8008bac:	007fe000 000ff800 000dff00 000c7fe0     ................
 8008bbc:	000c0fe0 000c01e0 000c1fe0 000c7fe0     ................
 8008bcc:	000fff00 000ff800 007fe000 03ff0000     ................
 8008bdc:	07fc0000 07e00000 07800000 06000000     ................
 8008bec:	00000000                                ....

08008bf0 <fonts32_41_char>:
 8008bf0:	00000015 08008b9c                       ........

08008bf8 <fonts32_42>:
	...
 8008c00:	07ffffe0 07ffffe0 07ffffe0 0701c0e0     ................
 8008c10:	0701c0e0 0701c0e0 0701c0e0 0701c0e0     ................
 8008c20:	0701c0e0 0701c0e0 0701e1e0 0783f3e0     ................
 8008c30:	03c7ffc0 03ffbf80 01ff1f00 00fe0000     ................
 8008c40:	00000000                                ....

08008c44 <fonts32_42_char>:
 8008c44:	00000013 08008bf8                       ........

08008c4c <fonts32_43>:
 8008c4c:	00000000 000ff800 003ffe00 00ffff00     ..........?.....
 8008c5c:	01ffff80 03f00fc0 03c003e0 078001e0     ................
 8008c6c:	078001e0 070000e0 070000e0 070000e0     ................
 8008c7c:	070000e0 078001e0 078001e0 03e007c0     ................
 8008c8c:	01f80fc0 00f80f80 00780f00 00380c00     ..........x...8.
 8008c9c:	00000000                                ....

08008ca0 <fonts32_43_char>:
 8008ca0:	00000015 08008c4c                       ....L...

08008ca8 <fonts32_44>:
	...
 8008cb0:	03ffffe0 03ffffe0 03ffffe0 038000e0     ................
 8008cc0:	038000e0 038000e0 038000e0 038000e0     ................
 8008cd0:	038000e0 038000e0 038001e0 038001e0     ................
 8008ce0:	03c003c0 01f00fc0 00ffff80 007fff00     ................
 8008cf0:	003ffc00 000ff000 00000000              ..?.........

08008cfc <fonts32_44_char>:
 8008cfc:	00000015 08008ca8                       ........

08008d04 <fonts32_45>:
	...
 8008d0c:	03ffffe0 03ffffe0 03ffffe0 0381c0e0     ................
 8008d1c:	0381c0e0 0381c0e0 0381c0e0 0381c0e0     ................
 8008d2c:	0381c0e0 0381c0e0 0381c0e0 0381c0e0     ................
 8008d3c:	0381c0e0 0381c0e0 0381c0e0 038000e0     ................
 8008d4c:	00000000                                ....

08008d50 <fonts32_45_char>:
 8008d50:	00000013 08008d04                       ........

08008d58 <fonts32_46>:
	...
 8008d60:	07ffffe0 07ffffe0 07ffffe0 0001c0e0     ................
 8008d70:	0001c0e0 0001c0e0 0001c0e0 0001c0e0     ................
 8008d80:	0001c0e0 0001c0e0 0001c0e0 0001c0e0     ................
 8008d90:	0001c0e0 000000e0 000000e0 00000000     ................

08008da0 <fonts32_46_char>:
 8008da0:	00000012 08008d58                       ....X...

08008da8 <fonts32_47>:
 8008da8:	00000000 000ff000 003ffc00 007fff00     ..........?.....
 8008db8:	01ffff80 01f007c0 03e001c0 03c001e0     ................
 8008dc8:	078000e0 078000e0 070000e0 070000e0     ................
 8008dd8:	070700e0 070700e0 078701e0 078701e0     ................
 8008de8:	03c703c0 03c70fc0 01ff0f80 01ff0f00     ................
 8008df8:	00ff0c00 00000000                       ........

08008e00 <fonts32_47_char>:
 8008e00:	00000016 08008da8                       ........

08008e08 <fonts32_48>:
	...
 8008e10:	07ffffe0 07ffffe0 07ffffe0 0001c000     ................
 8008e20:	0001c000 0001c000 0001c000 0001c000     ................
 8008e30:	0001c000 0001c000 0001c000 0001c000     ................
 8008e40:	0001c000 0001c000 07ffffe0 07ffffe0     ................
 8008e50:	07ffffe0 00000000                       ........

08008e58 <fonts32_48_char>:
 8008e58:	00000014 08008e08                       ........

08008e60 <fonts32_49>:
	...
 8008e68:	07ffffe0 07ffffe0 07ffffe0 07ffffe0     ................
 8008e78:	00000000                                ....

08008e7c <fonts32_49_char>:
 8008e7c:	00000007 08008e60                       ....`...

08008e84 <fonts32_4A>:
 8008e84:	00f00000 01f00000 03f00000 07f00000     ................
 8008e94:	07c00000 07800000 07800000 07800000     ................
 8008ea4:	07c00000 07ffffe0 03ffffe0 01ffffe0     ................
 8008eb4:	007fffe0 00000000                       ........

08008ebc <fonts32_4A_char>:
 8008ebc:	0000000e 08008e84                       ........

08008ec4 <fonts32_4B>:
	...
 8008ecc:	07ffffe0 07ffffe0 07ffffe0 0007c000     ................
 8008edc:	0003e000 0001f000 0001f800 0007fc00     ................
 8008eec:	000ffe00 001f9f00 007f0f80 00fc07c0     ................
 8008efc:	01f803e0 07f001e0 07c000e0 07800060     ............`...
 8008f0c:	07000020 06000000 00000000               ...........

08008f18 <fonts32_4B_char>:
 8008f18:	00000015 08008ec4                       ........

08008f20 <fonts32_4C>:
	...
 8008f28:	07ffffe0 07ffffe0 07ffffe0 07800000     ................
 8008f38:	07800000 07800000 07800000 07800000     ................
 8008f48:	07800000 07800000 07800000 07800000     ................
 8008f58:	07800000 07800000 00000000              ............

08008f64 <fonts32_4C_char>:
 8008f64:	00000011 08008f20                       .... ...

08008f6c <fonts32_4D>:
	...
 8008f74:	07ffffe0 07ffffe0 07ffffe0 00000fe0     ................
 8008f84:	00007fe0 0003ff00 001ff800 00ffe000     ................
 8008f94:	07fe0000 07f00000 07f00000 07fc0000     ................
 8008fa4:	00ff8000 003ff000 0003fe00 0000ffc0     ......?.........
 8008fb4:	00000fe0 07ffffe0 07ffffe0 07ffffe0     ................
 8008fc4:	00000000                                ....

08008fc8 <fonts32_4D_char>:
 8008fc8:	00000017 08008f6c                       ....l...

08008fd0 <fonts32_4E>:
	...
 8008fd8:	07ffffe0 07ffffe0 07ffffe0 000007e0     ................
 8008fe8:	00001fc0 00007f00 0000fc00 0003f800     ................
 8008ff8:	0007f000 001fc000 003f8000 007e0000     ..........?...~.
 8009008:	01f80000 03f00000 07ffffe0 07ffffe0     ................
 8009018:	07ffffe0 00000000                       ........

08009020 <fonts32_4E_char>:
 8009020:	00000014 08008fd0                       ........

08009028 <fonts32_4F>:
 8009028:	0007e000 000ff800 003ffe00 007fff00     ..........?.....
 8009038:	01f81f80 03f007c0 03c003c0 078001e0     ................
 8009048:	078001e0 070000e0 070000e0 070000e0     ................
 8009058:	070000e0 070000e0 078001e0 03c003e0     ................
 8009068:	03e007c0 01f81f80 00ffff00 007ffe00     ................
 8009078:	001ffc00 0007e000 00000000              ............

08009084 <fonts32_4F_char>:
 8009084:	00000017 08009028                       ....(...

0800908c <fonts32_50>:
	...
 8009094:	07ffffe0 07ffffe0 07ffffe0 000380e0     ................
 80090a4:	000380e0 000380e0 000380e0 000380e0     ................
 80090b4:	000380e0 000380e0 000380e0 0003c1e0     ................
 80090c4:	0003e3e0 0001ffc0 0000ff80 00007f00     ................
 80090d4:	00000000                                ....

080090d8 <fonts32_50_char>:
 80090d8:	00000013 0800908c                       ........

080090e0 <fonts32_51>:
 80090e0:	0007e000 000ff800 003ffe00 007fff00     ..........?.....
 80090f0:	01f81f80 03f007c0 03c003c0 078001e0     ................
 8009100:	078001e0 070000e0 070000e0 077000e0     ..............p.
 8009110:	07f000e0 07f000e0 07e001e0 03c003e0     ................
 8009120:	03e007c0 07f81f80 0fffff00 0f7ffe00     ................
 8009130:	0e1ffc00 0c07e000 00000000              ............

0800913c <fonts32_51_char>:
 800913c:	00000017 080090e0                       ........

08009144 <fonts32_52>:
	...
 800914c:	07ffffe0 07ffffe0 07ffffe0 0001c0e0     ................
 800915c:	0001c0e0 0001c0e0 0001c0e0 0001c0e0     ................
 800916c:	0003c0e0 0007c0e0 000fc0e0 001fc0e0     ................
 800917c:	007fc0e0 01fdffe0 03f8ffc0 07e07f80     ................
 800918c:	07c00000 07000000 06000000 00000000     ................

0800919c <fonts32_52_char>:
 800919c:	00000016 08009144                       ....D...

080091a4 <fonts32_53>:
 80091a4:	00000000 00780000 00f83f00 01f87f80     ......x..?......
 80091b4:	03f0ffc0 03c0f3e0 0781e1e0 0781e0e0     ................
 80091c4:	0701e0e0 0701c0e0 0703c0e0 0703c0e0     ................
 80091d4:	0783c1e0 078783e0 03ff8fc0 01ff0f80     ................
 80091e4:	00fe0f00 007c0e00 00000000              ......|.....

080091f0 <fonts32_53_char>:
 80091f0:	00000013 080091a4                       ........

080091f8 <fonts32_54>:
 80091f8:	000000e0 000000e0 000000e0 000000e0     ................
 8009208:	000000e0 000000e0 000000e0 07ffffe0     ................
 8009218:	07ffffe0 07ffffe0 07ffffe0 000000e0     ................
 8009228:	000000e0 000000e0 000000e0 000000e0     ................
 8009238:	000000e0 000000e0 00000000              ............

08009244 <fonts32_54_char>:
 8009244:	00000013 080091f8                       ........

0800924c <fonts32_55>:
	...
 8009254:	007fffe0 00ffffe0 03ffffe0 03f00000     ................
 8009264:	03c00000 07800000 07800000 07800000     ................
 8009274:	07800000 07800000 07800000 07800000     ................
 8009284:	03c00000 03f00000 03ffffe0 00ffffe0     ................
 8009294:	007fffe0 00000000                       ........

0800929c <fonts32_55_char>:
 800929c:	00000014 0800924c                       ....L...

080092a4 <fonts32_56>:
 80092a4:	000000e0 000003e0 00001fe0 00007fe0     ................
 80092b4:	0003ff00 000ff800 007fc000 03fe0000     ................
 80092c4:	07f00000 07800000 07e00000 03fc0000     ................
 80092d4:	00ff8000 001ff000 0007fc00 0000ff80     ................
 80092e4:	00003fe0 000007e0 000001e0 00000060     .?..........`...
 80092f4:	00000000                                ....

080092f8 <fonts32_56_char>:
 80092f8:	00000015 080092a4                       ........

08009300 <fonts32_57>:
 8009300:	000000e0 00000fe0 0000ffe0 000fffe0     ................
 8009310:	007ffe00 07ffe000 07fc0000 07f80000     ................
 8009320:	07ff0000 01ffe000 003ffe00 0003ffc0     ..........?.....
 8009330:	00003fe0 000003e0 00001fe0 0000ffe0     .?..............
 8009340:	000fff80 00fff800 07ff8000 07f80000     ................
 8009350:	07f80000 07ff8000 01fffc00 001fffc0     ................
 8009360:	0001ffe0 00001fe0 000001e0 00000060     ............`...
 8009370:	00000000                                ....

08009374 <fonts32_57_char>:
 8009374:	0000001d 08009300                       ........

0800937c <fonts32_58>:
 800937c:	06000000 07000060 07c000e0 07e003e0     ....`...........
 800938c:	03f007e0 00fc1fc0 007e3f00 003ffc00     .........?~...?.
 800939c:	000ff800 0007f000 000ff800 001ffc00     ................
 80093ac:	007f7e00 00fc1f80 03f80fc0 07e003e0     .~..............
 80093bc:	07c001e0 078000e0 06000060 00000000     ........`.......

080093cc <fonts32_58_char>:
 80093cc:	00000014 0800937c                       ....|...

080093d4 <fonts32_59>:
 80093d4:	00000060 000001e0 000003e0 00000fe0     `...............
 80093e4:	00001fc0 00003f00 0000fe00 0001f800     .....?..........
 80093f4:	07fff000 07ffc000 07ffe000 0001f800     ................
 8009404:	0000fc00 00007f00 00001f80 00000fe0     ................
 8009414:	000003e0 000001e0 00000060 00000020     ........`... ...
 8009424:	00000000                                ....

08009428 <fonts32_59_char>:
 8009428:	00000015 080093d4                       ........

08009430 <fonts32_5A>:
 8009430:	07800000 07c000e0 07f000e0 07f800e0     ................
 8009440:	07fc00e0 073e00e0 071f80e0 070fc0e0     ......>.........
 8009450:	0707e0e0 0703f0e0 0700f8e0 07007ee0     .............~..
 8009460:	07003fe0 07001fe0 07000fe0 070007e0     .?..............
 8009470:	070001e0 07000000 00000000              ............

0800947c <fonts32_5A_char>:
 800947c:	00000013 08009430                       ....0...

08009484 <fonts32_5B>:
	...
 800948c:	01c00000 05300008 030c0010 01030020     ......0..... ...
 800949c:	0180c040 01003000 01200d00 01100200     @....0.... .....
 80094ac:	01080500 01040880 09000080 1d012080     ............. ..
 80094bc:	3f00c080 3f00c0fe 1d012080 09000080     ...?...?. ......
 80094cc:	01040880 01080500 01100200 01200d00     .............. .
 80094dc:	01003000 0180c040 01030020 030c0010     .0..@... .......
 80094ec:	05300008 01c00000 00000000 00000000     ..0.............

080094fc <fonts32_5B_char>:
 80094fc:	0000001e 08009484                       ........

08009504 <fonts32_5C>:
 8009504:	000001e0 00001fe0 0000ffc0 000ffe00     ................
 8009514:	00ffe000 07ff0000 07f00000 07800000     ................

08009524 <fonts32_5C_char>:
 8009524:	00000008 08009504                       ........

0800952c <fonts32_5D>:
 800952c:	001ff800 00600600 01820180 02060440     ......`.....@...
 800953c:	04060420 08070c10 10071808 201f3804      ............8. 
 800954c:	203fb814 407ff8f2 40fffbe2 81cfffc1     ..? ...@...@....
 800955c:	8107ff81 8203ff01 8003fe01 8001fff9     ................
 800956c:	8001fffd 8003ffc1 8203fe01 8107ff81     ................
 800957c:	81cfffc1 40fffbe2 407ff8f2 203fb814     .......@...@..? 
 800958c:	201f3804 10071808 08070c10 04060420     .8. ........ ...
 800959c:	02060440 01820180 00600600 001ff800     @.........`.....
	...

080095c0 <fonts32_5D_char>:
 80095c0:	00000025 0800952c                       %...,...

080095c8 <fonts32_5E>:
 80095c8:	00000000 07ffffe0 0ffffff0 0ffffff0     ................
 80095d8:	0ffffff0 0f01e0f0 0f01e0f0 0f01e0f0     ................
 80095e8:	0f01e0f0 0f01e0f0 0f01e0f0 0f01e0f0     ................
 80095f8:	0f01e0f0 0f83f1f0 0f83fbe0 07efffe0     ................
 8009608:	07ffbfc0 03ff1f80 01fe0000 007c0000     ..............|.
	...
 8009620:	07ffffe0 0ffffff0 0ffffff0 0ffffff0     ................
 8009630:	0f0000f0 0f0000f0 0f0000f0 0f0000f0     ................
 8009640:	0f0000f0 0f0000f0 0f0000f0 0f0000f0     ................
 8009650:	078001e0 07c003e0 03e007c0 03f00fc0     ................
 8009660:	01ffff80 00ffff00 007ffe00 001ff800     ................
 8009670:	00000000                                ....

08009674 <fonts32_5E_char>:
 8009674:	0000002b 080095c8                       +.......

0800967c <fonts32_5F>:
 800967c:	c0000000 c0000000 c0000000 c0000000     ................
 800968c:	c0000000 c0000000 c0000000 c0000000     ................
 800969c:	c0000000 c0000000 c0000000 c0000000     ................
 80096ac:	c0000000 c0000000 c0000000 c0000000     ................
 80096bc:	c0000000                                ....

080096c0 <fonts32_5F_char>:
 80096c0:	00000011 0800967c                       ....|...

080096c8 <fonts32_60_61>:
 80096c8:	00000000 01f0c000 03f8f000 07fcf800     ................
 80096d8:	079cfc00 071e3c00 070e1c00 070e1c00     .....<..........
 80096e8:	070e1c00 078e3c00 03cf3c00 01fffc00     .....<...<......
 80096f8:	07fff800 07fff000 07ffc000 00000000     ................

08009708 <fonts32_60_61_char>:
 8009708:	00000010 080096c8                       ........

08009710 <fonts32_62>:
 8009710:	00000000 07ffffe0 07ffffe0 07ffffe0     ................
 8009720:	03c07000 07803800 07001c00 07001c00     .p...8..........
 8009730:	07001c00 07803c00 03c0f800 01fff000     .....<..........
 8009740:	00ffe000 007fc000 00000000              ............

0800974c <fonts32_62_char>:
 800974c:	0000000f 08009710                       ........

08009754 <fonts32_63>:
 8009754:	00000000 007fc000 01ffe000 03fff000     ................
 8009764:	03e0f800 07803800 07003c00 07001c00     .....8...<......
 8009774:	07001c00 07003c00 07807800 03e0f800     .....<...x......
 8009784:	01e0f000 00e0e000 00208000 00000000     .......... .....

08009794 <fonts32_63_char>:
 8009794:	00000010 08009754                       ....T...

0800979c <fonts32_64>:
 800979c:	00000000 003f8000 007fc000 01fff000     ......?.........
 80097ac:	03fff800 03e0f800 07803c00 07003c00     .........<...<..
 80097bc:	07001c00 07001c00 07003c00 03807800     .........<...x..
 80097cc:	03ffffe0 07ffffe0 07ffffe0 07ffffe0     ................
 80097dc:	00000000                                ....

080097e0 <fonts32_64_char>:
 80097e0:	00000011 0800979c                       ........

080097e8 <fonts32_65>:
 80097e8:	00000000 007fc000 01ffe000 03fff000     ................
 80097f8:	03e6f800 07863800 07063c00 07061c00     .....8...<......
 8009808:	07061c00 07063c00 07863800 03c6f800     .....<...8......
 8009818:	03e7f000 01e7e000 00e7c000 00000000     ................

08009828 <fonts32_65_char>:
 8009828:	00000010 080097e8                       ........

08009830 <fonts32_66>:
 8009830:	00000000 00003800 00003800 07ffffc0     .....8...8......
 8009840:	07ffffe0 07ffffe0 000039e0 000038e0     .........9...8..
 8009850:	000038e0 000038e0 00000000              .8...8......

0800985c <fonts32_66_char>:
 800985c:	0000000b 08009830                       ....0...

08009864 <fonts32_67>:
 8009864:	00000000 387fc000 79fff000 fbfff800     .......8...y....
 8009874:	f3c0f800 e7807c00 c7003c00 c7003c00     .....|...<...<..
 8009884:	c7003c00 e7803c00 f3c07800 ffe0f000     .<...<...x......
 8009894:	7ffff800 3ffff800 0ffff800 00000000     .......?........

080098a4 <fonts32_67_char>:
 80098a4:	00000010 08009864                       ....d...

080098ac <fonts32_68>:
 80098ac:	00000000 07ffffe0 07ffffe0 07ffffe0     ................
 80098bc:	00007800 00003800 00001c00 00001c00     .x...8..........
 80098cc:	00001c00 00003c00 07fff800 07fff800     .....<..........
 80098dc:	07fff000 00000000                       ........

080098e4 <fonts32_68_char>:
 80098e4:	0000000e 080098ac                       ........

080098ec <fonts32_69>:
	...
 80098f4:	03fff9e0 03fff9e0 03fff9e0 00000000     ................
 8009904:	00000000                                ....

08009908 <fonts32_69_char>:
 8009908:	00000007 080098ec                       ........

08009910 <fonts32_6A>:
 8009910:	c0000000 e0000000 fffff9e0 fffff9e0     ................
 8009920:	7ffff9e0 00000000 00000000              ............

0800992c <fonts32_6A_char>:
 800992c:	00000007 08009910                       ........

08009934 <fonts32_6B>:
 8009934:	00000000 07ffffe0 07ffffe0 07ffffe0     ................
 8009944:	000f0000 000fc000 001fe000 007ff000     ................
 8009954:	00fcf800 03f87800 07e03800 07c01800     .....x...8......
 8009964:	07000800 06000000 00000000              ............

08009970 <fonts32_6B_char>:
 8009970:	0000000f 08009934                       ....4...

08009978 <fonts32_6C>:
	...
 8009980:	03ffffe0 03ffffe0 03ffffe0 00000000     ................
 8009990:	00000000                                ....

08009994 <fonts32_6C_char>:
 8009994:	00000007 08009978                       ....x...

0800999c <fonts32_6D>:
 800999c:	00000000 07fffc00 07fffc00 07fff000     ................
 80099ac:	00007800 00003800 00003c00 00001c00     .x...8...<......
 80099bc:	00003c00 00003c00 07fff800 07fff000     .<...<..........
 80099cc:	07fff000 00003000 00003800 00003c00     .....0...8...<..
 80099dc:	00001c00 00003c00 00003c00 07fff800     .....<...<......
 80099ec:	07fff000 07ffe000 00000000              ............

080099f8 <fonts32_6D_char>:
 80099f8:	00000017 0800999c                       ........

08009a00 <fonts32_6E>:
 8009a00:	00000000 07fffc00 07fffc00 07fff000     ................
 8009a10:	00007800 00003800 00003c00 00001c00     .x...8...<......
 8009a20:	00003c00 00003c00 07fff800 07fff800     .<...<..........
 8009a30:	07fff000 00000000                       ........

08009a38 <fonts32_6E_char>:
 8009a38:	0000000e 08009a00                       ........

08009a40 <fonts32_6F>:
 8009a40:	00000000 007fc000 01ffe000 03fff000     ................
 8009a50:	03e0f800 07803800 07003c00 07001c00     .....8...<......
 8009a60:	07001c00 07003c00 07803800 03e0f800     .....<...8......
 8009a70:	03fff000 01ffe000 00ffc000 00000000     ................

08009a80 <fonts32_6F_char>:
 8009a80:	00000010 08009a40                       ....@...

08009a88 <fonts32_70>:
 8009a88:	00000000 fffff800 fffff800 ffffe000     ................
 8009a98:	03c07000 07003800 07003800 07003800     .p...8...8...8..
 8009aa8:	07003800 07803800 03c0f800 03fff000     .8...8..........
 8009ab8:	01ffe000 007fc000 00000000              ............

08009ac4 <fonts32_70_char>:
 8009ac4:	0000000f 08009a88                       ........

08009acc <fonts32_71>:
 8009acc:	00000000 007fc000 01fff000 03fff800     ................
 8009adc:	03c07800 07803c00 07001c00 07001c00     .x...<..........
 8009aec:	07001c00 07803c00 03c07800 01e0f000     .....<...x......
 8009afc:	fffffc00 fffffc00 fffffc00 00000000     ................

08009b0c <fonts32_71_char>:
 8009b0c:	00000010 08009acc                       ........

08009b14 <fonts32_72>:
 8009b14:	00000000 07fff800 07fff800 07ffe000     ................
 8009b24:	0000f000 00007800 00003800 00003800     .....x...8...8..
 8009b34:	00003800 00000000                       .8......

08009b3c <fonts32_72_char>:
 8009b3c:	0000000a 08009b14                       ........

08009b44 <fonts32_73>:
 8009b44:	00000000 00e1e000 03e7f000 03e7f800     ................
 8009b54:	078f3c00 070f1c00 070f1c00 070e1c00     .<..............
 8009b64:	071e1c00 071e3c00 07fe7800 03fc7800     .....<...x...x..
 8009b74:	01f87000 00f00000 00000000              .p..........

08009b80 <fonts32_73_char>:
 8009b80:	0000000f 08009b44                       ....D...

08009b88 <fonts32_74>:
 8009b88:	00000000 00001800 00001800 03ffff80     ................
 8009b98:	07ffffc0 07ffffe0 07001800 07001800     ................
 8009ba8:	07001800 00000000                       ........

08009bb0 <fonts32_74_char>:
 8009bb0:	0000000a 08009b88                       ........

08009bb8 <fonts32_75>:
 8009bb8:	00000000 007ff800 01fff800 03fff800     ................
 8009bc8:	07fff800 07800000 07000000 07000000     ................
 8009bd8:	07000000 07800000 07c00000 03fff800     ................
 8009be8:	01fff800 07fff800 07fff800 00000000     ................

08009bf8 <fonts32_75_char>:
 8009bf8:	00000010 08009bb8                       ........

08009c00 <fonts32_76>:
 8009c00:	00000000 00001800 0000f800 0007f800     ................
 8009c10:	001ff800 00ffc000 03fe0000 07f00000     ................
 8009c20:	07e00000 07fc0000 03ff8000 007ff000     ................
 8009c30:	0007f800 0001f800 00003800 00001800     .........8......
 8009c40:	00000000                                ....

08009c44 <fonts32_76_char>:
 8009c44:	00000011 08009c00                       ........

08009c4c <fonts32_77>:
 8009c4c:	00000000 00007800 0003f800 001ff800     .....x..........
 8009c5c:	01fff000 07ff8000 07f80000 07f80000     ................
 8009c6c:	07ff8000 00fff800 000ff800 0001f800     ................
 8009c7c:	001ff800 03fff000 07ff0000 07f00000     ................
 8009c8c:	07fc0000 03ff8000 003ff800 0007f800     ..........?.....
 8009c9c:	0000f800 00001800 00000000              ............

08009ca8 <fonts32_77_char>:
 8009ca8:	00000017 08009c4c                       ....L...

08009cb0 <fonts32_78>:
 8009cb0:	06000800 07001800 07c07800 07e0f800     .........x......
 8009cc0:	01fbf000 00ffe000 003f8000 003f8000     ..........?...?.
 8009cd0:	00ffe000 01fbf000 03e1f800 07c07800     .............x..
 8009ce0:	07803800 06001800 00000000              .8..........

08009cec <fonts32_78_char>:
 8009cec:	0000000f 08009cb0                       ........

08009cf4 <fonts32_79>:
 8009cf4:	00001800 e0007800 e003f800 e00ff800     .....x..........
 8009d04:	e07fe000 ffff0000 fff80000 3fc00000     ...............?
 8009d14:	0ff80000 00ff0000 003fe000 0007f800     ..........?.....
 8009d24:	0001f800 00003800 00000800 00000000     .....8..........

08009d34 <fonts32_79_char>:
 8009d34:	00000010 08009cf4                       ........

08009d3c <fonts32_7A>:
 8009d3c:	07800000 07c03800 07e03800 07f03800     .....8...8...8..
 8009d4c:	07f83800 077c3800 073f3800 071fb800     .8...8|..8?.....
 8009d5c:	070ff800 0703f800 0701f800 0700f800     ................
 8009d6c:	07007800 07003800 00000000              .x...8......

08009d78 <fonts32_7A_char>:
 8009d78:	0000000f 08009d3c                       ....<...

08009d80 <fonts32_7B>:
 8009d80:	000e0000 000e0000 001f0000 3fffff80     ...............?
 8009d90:	7ffbffc0 fff1ffe0 f00001e0 e00000e0     ................
 8009da0:	e00000e0 e00000e0 00000000 00000000     ................
	...

08009dcc <fonts32_7B_char>:
 8009dcc:	00000013 08009d80                       ........

08009dd4 <fonts32_7C>:
	...
 8009ddc:	ffffffe0 ffffffe0 ffffffe0 00000000     ................
	...

08009df4 <fonts32_7C_char>:
 8009df4:	00000008 08009dd4                       ........

08009dfc <fonts32_7D>:
 8009dfc:	e00000e0 e00000e0 e00000e0 ffe1ffe0     ................
 8009e0c:	fff3ffe0 7fffffc0 003f0000 001e0000     ..........?.....
 8009e1c:	001e0000 00000000 00000000 00000000     ................
	...

08009e48 <fonts32_7D_char>:
 8009e48:	00000013 08009dfc                       ........

08009e50 <fonts32_7E_92>:
	...
 8009e58:	00000ce0 000007e0 000003e0 00000000     ................
 8009e68:	00000000                                ....

08009e6c <fonts32_7E_92_char>:
 8009e6c:	00000007 08009e50                       ....P...

08009e74 <fonts32_93_B0>:
	...
 8009e7c:	00000780 00000fc0 00001860 00001860     ........`...`...
 8009e8c:	00001860 00001ce0 00000fc0 00000300     `...............
 8009e9c:	00000000                                ....

08009ea0 <fonts32_93_B0_char>:
 8009ea0:	0000000b 08009e74                       ....t...

08009ea8 <fonts32_B1_BF>:
 8009ea8:	00000000 00f80000 01fe0000 03ff0000     ................
 8009eb8:	07bf0000 0787c000 0703f9e0 0701f9e0     ................
 8009ec8:	0700f9e0 070079e0 07800000 07e00000     .....y..........
 8009ed8:	03f00000 01f00000 00f00000 00000000     ................

08009ee8 <fonts32_B1_BF_char>:
 8009ee8:	00000010 08009ea8                       ........

08009ef0 <fonts32_C0_C4>:
 8009ef0:	07800000 07e00000 07fc0000 03ff0000     ................
 8009f00:	007fe00e 000ff80e 000dff0e 000c7fe0     ................
 8009f10:	000c0fe0 000c01e0 000c1fe0 000c7fe0     ................
 8009f20:	000fff0e 000ff80e 007fe00e 03ff0000     ................
 8009f30:	07fc0000 07e00000 07800000 06000000     ................
 8009f40:	00000000                                ....

08009f44 <fonts32_C0_C4_char>:
 8009f44:	00000015 08009ef0                       ........

08009f4c <fonts32_C5>:
 8009f4c:	07800000 07e00000 07fc0000 03ff0000     ................
 8009f5c:	007fe000 000ff800 000dff00 000c7fdc     ................
 8009f6c:	000c0fe2 000c01e2 000c1fe2 000c7fdc     ................
 8009f7c:	000fff00 000ff800 007fe000 03ff0000     ................
 8009f8c:	07fc0000 07e00000 07800000 06000000     ................
 8009f9c:	00000000                                ....

08009fa0 <fonts32_C5_char>:
 8009fa0:	00000015 08009f4c                       ....L...

08009fa8 <fonts32_C6_E0>:
 8009fa8:	00000000 01f0c000 03f8f000 07fcf800     ................
 8009fb8:	079cfc00 071e3c20 070e1c60 070e1ce0     .... <..`.......
 8009fc8:	070e1de0 078e3d80 03cf3c00 01fffc00     .....=...<......
 8009fd8:	07fff800 07fff000 07ffc000 00000000     ................

08009fe8 <fonts32_C6_E0_char>:
 8009fe8:	00000010 08009fa8                       ........

08009ff0 <fonts32_E1>:
 8009ff0:	00000000 00e00000 01f8e000 03f8f000     ................
 800a000:	030c7000 030c1800 030c1800 030c1980     .p..............
 800a010:	030619e0 030618e0 01861860 00c63000     ........`....0..
 800a020:	01fff000 03ffe000 02000000 00000000     ................

0800a030 <fonts32_E1_char>:
 800a030:	00000010 08009ff0                       ........

0800a038 <fonts32_E2_E4>:
 800a038:	00000000 01f0c000 03f8f000 07fcf800     ................
 800a048:	079cfdc0 071e3dc0 070e1c00 070e1c00     .....=..........
 800a058:	070e1c00 078e3c00 03cf3dc0 01fffdc0     .....<...=......
 800a068:	07fff800 07fff000 07ffc000 00000000     ................

0800a078 <fonts32_E2_E4_char>:
 800a078:	00000010 0800a038                       ....8...

0800a080 <fonts32_E5>:
 800a080:	00000000 01f0c000 03f8f000 07fcf800     ................
 800a090:	079cfc00 071e3ce0 070e1d10 070e1d10     .....<..........
 800a0a0:	070e1d10 078e3ce0 03cf3c00 01fffc00     .....<...<......
 800a0b0:	07fff800 07fff000 07ffc000 00000000     ................

0800a0c0 <fonts32_E5_char>:
 800a0c0:	00000010 0800a080                       ........

0800a0c8 <fonts32_E6_E9>:
 800a0c8:	00000000 007f8000 00ffe000 01fff000     ................
 800a0d8:	03863000 03061800 03061800 03061980     .0..............
 800a0e8:	030619e0 030618e0 03061860 01867000     ........`....p..
 800a0f8:	01c7f000 00c7e000 00070000 00000000     ................

0800a108 <fonts32_E6_E9_char>:
 800a108:	00000010 0800a0c8                       ........

0800a110 <fonts32_EA_ED>:
	...
 800a118:	00000100 03fff980 03fff8e0 00000060     ............`...
 800a128:	00000020 00000000                        .......

0800a130 <fonts32_EA_ED_char>:
 800a130:	00000008 0800a110                       ........

0800a138 <fonts32_EE_F1>:
	...
 800a144:	03fff800 03fff980 000061c0 000030c0     .........a...0..
 800a154:	000018c0 00001980 00001980 00001980     ................
 800a164:	000038c0 03ffe0c0 03ffc000 00000000     .8..............
 800a174:	00000000                                ....

0800a178 <fonts32_EE_F1_char>:
 800a178:	00000010 0800a138                       ....8...

0800a180 <fonts32_F2_F3>:
 800a180:	00000000 003f8000 00ffe000 01fff000     ......?.........
 800a190:	03c07000 03001800 03001800 03001980     .p..............
 800a1a0:	030019e0 030018e0 03801860 01c03000     ........`....0..
 800a1b0:	01fff000 00ffe000 003f8000 00000000     ..........?.....
 800a1c0:	00000000                                ....

0800a1c4 <fonts32_F2_F3_char>:
 800a1c4:	00000011 0800a180                       ........

0800a1cc <fonts32_F4_F6>:
 800a1cc:	00000000 007fc000 01ffe000 03fff0c0     ................
 800a1dc:	03e0f8c0 078038c0 07003c00 07001c00     .....8...<......
 800a1ec:	07001c00 07003c00 078038c0 03e0f8c0     .....<...8......
 800a1fc:	03fff0c0 01ffe000 00ffc000 00000000     ................

0800a20c <fonts32_F4_F6_char>:
 800a20c:	00000010 0800a1cc                       ........

0800a214 <fonts32_F7_F9>:
 800a214:	00000000 007ff800 01fff800 03fff800     ................
 800a224:	07fff800 07800020 07000060 070000e0     .... ...`.......
 800a234:	070001e0 07800180 07c00000 03fff800     ................
 800a244:	01fff800 07fff800 07fff800 00000000     ................

0800a254 <fonts32_F7_F9_char>:
 800a254:	00000010 0800a214                       ........

0800a25c <fonts32_FA>:
	...
 800a264:	00fff800 01fff800 03800000 03000000     ................
 800a274:	03000000 03000180 030001e0 030000e0     ................
 800a284:	01800060 00c00000 03fff800 03fff800     `...............
	...

0800a29c <fonts32_FA_char>:
 800a29c:	00000010 0800a25c                       ....\...

0800a2a4 <fonts32_FB_FC>:
 800a2a4:	00000000 007ff800 01fff800 03fff9c0     ................
 800a2b4:	07fff9c0 078001c0 07000000 07000000     ................
 800a2c4:	07000000 07800000 07c001c0 03fff9c0     ................
 800a2d4:	01fff9c0 07fff800 07fff800 00000000     ................

0800a2e4 <fonts32_FB_FC_char>:
 800a2e4:	00000010 0800a2a4                       ........

0800a2ec <fonts32_FD_FF>:
	...

0800a308 <fonts32_FD_FF_char>:
 800a308:	00000007 0800a2ec                       ........

0800a310 <fonts8_20>:
 800a310:	00000000                                ....

0800a314 <fonts8_20_char>:
 800a314:	00000004 0800a310                       ........

0800a31c <fonts8_21>:
 800a31c:	4f000000 00000000                       ...O....

0800a324 <fonts8_21_char>:
 800a324:	00000006 0800a31c                       ........

0800a32c <fonts8_22>:
 800a32c:	00070000 00000007                       ........

0800a334 <fonts8_22_char>:
 800a334:	00000006 0800a32c                       ....,...

0800a33c <fonts8_23>:
 800a33c:	147f1400 0000147f                       ........

0800a344 <fonts8_23_char>:
 800a344:	00000006 0800a33c                       ....<...

0800a34c <fonts8_24>:
 800a34c:	7f2a2400 0000122a                       .$*.*...

0800a354 <fonts8_24_char>:
 800a354:	00000006 0800a34c                       ....L...

0800a35c <fonts8_25>:
 800a35c:	08132300 00006264                       .#..db..

0800a364 <fonts8_25_char>:
 800a364:	00000006 0800a35c                       ....\...

0800a36c <fonts8_26>:
 800a36c:	55493600 00005022                       .6IU"P..

0800a374 <fonts8_26_char>:
 800a374:	00000006 0800a36c                       ....l...

0800a37c <fonts8_27>:
 800a37c:	03050000 00000000                       ........

0800a384 <fonts8_27_char>:
 800a384:	00000006 0800a37c                       ....|...

0800a38c <fonts8_28>:
 800a38c:	221c0000 00000041                       ..."A...

0800a394 <fonts8_28_char>:
 800a394:	00000006 0800a38c                       ........

0800a39c <fonts8_29>:
 800a39c:	22410000 0000001c                       ..A"....

0800a3a4 <fonts8_29_char>:
 800a3a4:	00000006 0800a39c                       ........

0800a3ac <fonts8_2A>:
 800a3ac:	3e081400 00001408                       ...>....

0800a3b4 <fonts8_2A_char>:
 800a3b4:	00000006 0800a3ac                       ........

0800a3bc <fonts8_2B>:
 800a3bc:	3e080800 00000808                       ...>....

0800a3c4 <fonts8_2B_char>:
 800a3c4:	00000006 0800a3bc                       ........

0800a3cc <fonts8_2C>:
 800a3cc:	30500000 00000000                       ..P0....

0800a3d4 <fonts8_2C_char>:
 800a3d4:	00000006 0800a3cc                       ........

0800a3dc <fonts8_2D>:
 800a3dc:	08080800 00000808                       ........

0800a3e4 <fonts8_2D_char>:
 800a3e4:	00000006 0800a3dc                       ........

0800a3ec <fonts8_2E>:
 800a3ec:	60600000 00000000                       ..``....

0800a3f4 <fonts8_2E_char>:
 800a3f4:	00000006 0800a3ec                       ........

0800a3fc <fonts8_2F>:
 800a3fc:	08102000 00000204                       . ......

0800a404 <fonts8_2F_char>:
 800a404:	00000006 0800a3fc                       ........

0800a40c <fonts8_30>:
 800a40c:	49413e00 00003e41                       .>AIA>..

0800a414 <fonts8_30_char>:
 800a414:	00000006 0800a40c                       ........

0800a41c <fonts8_31>:
 800a41c:	7f420000 00000040                       ..B.@...

0800a424 <fonts8_31_char>:
 800a424:	00000006 0800a41c                       ........

0800a42c <fonts8_32>:
 800a42c:	51614200 00004649                       .BaQIF..

0800a434 <fonts8_32_char>:
 800a434:	00000006 0800a42c                       ....,...

0800a43c <fonts8_33>:
 800a43c:	45412100 0000314b                       .!AEK1..

0800a444 <fonts8_33_char>:
 800a444:	00000006 0800a43c                       ....<...

0800a44c <fonts8_34>:
 800a44c:	12141800 0000107f                       ........

0800a454 <fonts8_34_char>:
 800a454:	00000006 0800a44c                       ....L...

0800a45c <fonts8_35>:
 800a45c:	45452700 00003945                       .'EEE9..

0800a464 <fonts8_35_char>:
 800a464:	00000006 0800a45c                       ....\...

0800a46c <fonts8_36>:
 800a46c:	494a3c00 00003049                       .<JII0..

0800a474 <fonts8_36_char>:
 800a474:	00000006 0800a46c                       ....l...

0800a47c <fonts8_37>:
 800a47c:	09710100 00000305                       ..q.....

0800a484 <fonts8_37_char>:
 800a484:	00000006 0800a47c                       ....|...

0800a48c <fonts8_38>:
 800a48c:	49493600 00003649                       .6III6..

0800a494 <fonts8_38_char>:
 800a494:	00000006 0800a48c                       ........

0800a49c <fonts8_39>:
 800a49c:	49490600 00001e29                       ..II)...

0800a4a4 <fonts8_39_char>:
 800a4a4:	00000006 0800a49c                       ........

0800a4ac <fonts8_3A>:
 800a4ac:	36360000 00000000                       ..66....

0800a4b4 <fonts8_3A_char>:
 800a4b4:	00000006 0800a4ac                       ........

0800a4bc <fonts8_3B>:
 800a4bc:	36560000 00000000                       ..V6....

0800a4c4 <fonts8_3B_char>:
 800a4c4:	00000006 0800a4bc                       ........

0800a4cc <fonts8_3C>:
 800a4cc:	22140800 00000841                       ..."A...

0800a4d4 <fonts8_3C_char>:
 800a4d4:	00000006 0800a4cc                       ........

0800a4dc <fonts8_3D>:
 800a4dc:	14141400 00001414                       ........

0800a4e4 <fonts8_3D_char>:
 800a4e4:	00000006 0800a4dc                       ........

0800a4ec <fonts8_3E>:
 800a4ec:	22410000 00000814                       ..A"....

0800a4f4 <fonts8_3E_char>:
 800a4f4:	00000006 0800a4ec                       ........

0800a4fc <fonts8_3F>:
 800a4fc:	51010200 00000609                       ...Q....

0800a504 <fonts8_3F_char>:
 800a504:	00000006 0800a4fc                       ........

0800a50c <fonts8_40>:
 800a50c:	2020fe00 00003e10                       ..  .>..

0800a514 <fonts8_40_char>:
 800a514:	00000006 0800a50c                       ........

0800a51c <fonts8_41>:
 800a51c:	11117e00 00007e11                       .~...~..

0800a524 <fonts8_41_char>:
 800a524:	00000006 0800a51c                       ........

0800a52c <fonts8_42>:
 800a52c:	49497f00 00003649                       ..III6..

0800a534 <fonts8_42_char>:
 800a534:	00000006 0800a52c                       ....,...

0800a53c <fonts8_43>:
 800a53c:	41413e00 00002241                       .>AAA"..

0800a544 <fonts8_43_char>:
 800a544:	00000006 0800a53c                       ....<...

0800a54c <fonts8_44>:
 800a54c:	41417f00 00001c22                       ..AA"...

0800a554 <fonts8_44_char>:
 800a554:	00000006 0800a54c                       ....L...

0800a55c <fonts8_45>:
 800a55c:	49497f00 00004149                       ..IIIA..

0800a564 <fonts8_45_char>:
 800a564:	00000006 0800a55c                       ....\...

0800a56c <fonts8_46>:
 800a56c:	09097f00 00000109                       ........

0800a574 <fonts8_46_char>:
 800a574:	00000006 0800a56c                       ....l...

0800a57c <fonts8_47>:
 800a57c:	49413e00 00007a49                       .>AIIz..

0800a584 <fonts8_47_char>:
 800a584:	00000006 0800a57c                       ....|...

0800a58c <fonts8_48>:
 800a58c:	08087f00 00007f08                       ........

0800a594 <fonts8_48_char>:
 800a594:	00000006 0800a58c                       ........

0800a59c <fonts8_49>:
 800a59c:	7f410000 00000041                       ..A.A...

0800a5a4 <fonts8_49_char>:
 800a5a4:	00000006 0800a59c                       ........

0800a5ac <fonts8_4A>:
 800a5ac:	41402000 0000013f                       . @A?...

0800a5b4 <fonts8_4A_char>:
 800a5b4:	00000006 0800a5ac                       ........

0800a5bc <fonts8_4B>:
 800a5bc:	14087f00 00004122                       ...."A..

0800a5c4 <fonts8_4B_char>:
 800a5c4:	00000006 0800a5bc                       ........

0800a5cc <fonts8_4C>:
 800a5cc:	40407f00 00004040                       ..@@@@..

0800a5d4 <fonts8_4C_char>:
 800a5d4:	00000006 0800a5cc                       ........

0800a5dc <fonts8_4D>:
 800a5dc:	0c027f00 00007f02                       ........

0800a5e4 <fonts8_4D_char>:
 800a5e4:	00000006 0800a5dc                       ........

0800a5ec <fonts8_4E>:
 800a5ec:	08047f00 00007f10                       ........

0800a5f4 <fonts8_4E_char>:
 800a5f4:	00000006 0800a5ec                       ........

0800a5fc <fonts8_4F>:
 800a5fc:	41413e00 00003e41                       .>AAA>..

0800a604 <fonts8_4F_char>:
 800a604:	00000006 0800a5fc                       ........

0800a60c <fonts8_50>:
 800a60c:	09097f00 00000609                       ........

0800a614 <fonts8_50_char>:
 800a614:	00000006 0800a60c                       ........

0800a61c <fonts8_51>:
 800a61c:	51413e00 00005e21                       .>AQ!^..

0800a624 <fonts8_51_char>:
 800a624:	00000006 0800a61c                       ........

0800a62c <fonts8_52>:
 800a62c:	19097f00 00004629                       ....)F..

0800a634 <fonts8_52_char>:
 800a634:	00000006 0800a62c                       ....,...

0800a63c <fonts8_53>:
 800a63c:	49494600 00003149                       .FIII1..

0800a644 <fonts8_53_char>:
 800a644:	00000006 0800a63c                       ....<...

0800a64c <fonts8_54>:
 800a64c:	7f010100 00000101                       ........

0800a654 <fonts8_54_char>:
 800a654:	00000006 0800a64c                       ....L...

0800a65c <fonts8_55>:
 800a65c:	40403f00 00003f40                       .?@@@?..

0800a664 <fonts8_55_char>:
 800a664:	00000006 0800a65c                       ....\...

0800a66c <fonts8_56>:
 800a66c:	40201f00 00001f20                       .. @ ...

0800a674 <fonts8_56_char>:
 800a674:	00000006 0800a66c                       ....l...

0800a67c <fonts8_57>:
 800a67c:	38403f00 00003f40                       .?@8@?..

0800a684 <fonts8_57_char>:
 800a684:	00000006 0800a67c                       ....|...

0800a68c <fonts8_58>:
 800a68c:	08146300 00006314                       .c...c..

0800a694 <fonts8_58_char>:
 800a694:	00000006 0800a68c                       ........

0800a69c <fonts8_59>:
 800a69c:	70080700 00000708                       ...p....

0800a6a4 <fonts8_59_char>:
 800a6a4:	00000006 0800a69c                       ........

0800a6ac <fonts8_5A>:
 800a6ac:	49516100 00004345                       .aQIEC..

0800a6b4 <fonts8_5A_char>:
 800a6b4:	00000006 0800a6ac                       ........

0800a6bc <fonts8_5B>:
 800a6bc:	8183fe00 0000fe83                       ........

0800a6c4 <fonts8_5B_char>:
 800a6c4:	00000006 0800a6bc                       ........

0800a6cc <fonts8_5C>:
 800a6cc:	08040200 00002010                       ..... ..

0800a6d4 <fonts8_5C_char>:
 800a6d4:	00000006 0800a6cc                       ........

0800a6dc <fonts8_5D>:
 800a6dc:	f9f3fe00 0000feff                       ........

0800a6e4 <fonts8_5D_char>:
 800a6e4:	00000006 0800a6dc                       ........

0800a6ec <fonts8_5E>:
 800a6ec:	fffffe00 0000feff                       ........

0800a6f4 <fonts8_5E_char>:
 800a6f4:	00000006 0800a6ec                       ........

0800a6fc <fonts8_5F>:
 800a6fc:	c0c0c000 0000c0c0                       ........

0800a704 <fonts8_5F_char>:
 800a704:	00000006 0800a6fc                       ........

0800a70c <fonts8_60>:
 800a70c:	e1c3fe00 0000fef3                       ........

0800a714 <fonts8_60_char>:
 800a714:	00000006 0800a70c                       ........

0800a71c <fonts8_61>:
 800a71c:	54542000 00007854                       . TTTx..

0800a724 <fonts8_61_char>:
 800a724:	00000006 0800a71c                       ........

0800a72c <fonts8_62>:
 800a72c:	44487f00 00003844                       ..HDD8..

0800a734 <fonts8_62_char>:
 800a734:	00000006 0800a72c                       ....,...

0800a73c <fonts8_63>:
 800a73c:	44443800 00002044                       .8DDD ..

0800a744 <fonts8_63_char>:
 800a744:	00000006 0800a73c                       ....<...

0800a74c <fonts8_64>:
 800a74c:	44443800 00007f48                       .8DDH...

0800a754 <fonts8_64_char>:
 800a754:	00000006 0800a74c                       ....L...

0800a75c <fonts8_65>:
 800a75c:	54543800 00001854                       .8TTT...

0800a764 <fonts8_65_char>:
 800a764:	00000006 0800a75c                       ....\...

0800a76c <fonts8_66>:
 800a76c:	097e0800 00000201                       ..~.....

0800a774 <fonts8_66_char>:
 800a774:	00000006 0800a76c                       ....l...

0800a77c <fonts8_67>:
 800a77c:	a4a41800 00007ca4                       .....|..

0800a784 <fonts8_67_char>:
 800a784:	00000006 0800a77c                       ....|...

0800a78c <fonts8_68>:
 800a78c:	04087f00 00007804                       .....x..

0800a794 <fonts8_68_char>:
 800a794:	00000006 0800a78c                       ........

0800a79c <fonts8_69>:
 800a79c:	7d440000 00000040                       ..D}@...

0800a7a4 <fonts8_69_char>:
 800a7a4:	00000005 0800a79c                       ........

0800a7ac <fonts8_6A>:
 800a7ac:	44402000 0000003d                       . @D=...

0800a7b4 <fonts8_6A_char>:
 800a7b4:	00000006 0800a7ac                       ........

0800a7bc <fonts8_6B>:
 800a7bc:	28107f00 00000044                       ...(D...

0800a7c4 <fonts8_6B_char>:
 800a7c4:	00000006 0800a7bc                       ........

0800a7cc <fonts8_6C>:
 800a7cc:	7f410000 00000040                       ..A.@...

0800a7d4 <fonts8_6C_char>:
 800a7d4:	00000005 0800a7cc                       ........

0800a7dc <fonts8_6D>:
 800a7dc:	18047c00 00007804                       .|...x..

0800a7e4 <fonts8_6D_char>:
 800a7e4:	00000006 0800a7dc                       ........

0800a7ec <fonts8_6E>:
 800a7ec:	04087c00 00007804                       .|...x..

0800a7f4 <fonts8_6E_char>:
 800a7f4:	00000006 0800a7ec                       ........

0800a7fc <fonts8_6F>:
 800a7fc:	44443800 00003844                       .8DDD8..

0800a804 <fonts8_6F_char>:
 800a804:	00000006 0800a7fc                       ........

0800a80c <fonts8_70>:
 800a80c:	14147c00 00000814                       .|......

0800a814 <fonts8_70_char>:
 800a814:	00000006 0800a80c                       ........

0800a81c <fonts8_71>:
 800a81c:	14140800 00007c18                       .....|..

0800a824 <fonts8_71_char>:
 800a824:	00000006 0800a81c                       ........

0800a82c <fonts8_72>:
 800a82c:	04087c00 00000804                       .|......

0800a834 <fonts8_72_char>:
 800a834:	00000006 0800a82c                       ....,...

0800a83c <fonts8_73>:
 800a83c:	54544800 00002054                       .HTTT ..

0800a844 <fonts8_73_char>:
 800a844:	00000006 0800a83c                       ....<...

0800a84c <fonts8_74>:
 800a84c:	443f0400 00002040                       ..?D@ ..

0800a854 <fonts8_74_char>:
 800a854:	00000006 0800a84c                       ....L...

0800a85c <fonts8_75>:
 800a85c:	40403c00 00007c20                       .<@@ |..

0800a864 <fonts8_75_char>:
 800a864:	00000006 0800a85c                       ....\...

0800a86c <fonts8_76>:
 800a86c:	40201c00 00001c20                       .. @ ...

0800a874 <fonts8_76_char>:
 800a874:	00000006 0800a86c                       ....l...

0800a87c <fonts8_77>:
 800a87c:	30403c00 00003c40                       .<@0@<..

0800a884 <fonts8_77_char>:
 800a884:	00000006 0800a87c                       ....|...

0800a88c <fonts8_78>:
 800a88c:	10284400 00004428                       .D(.(D..

0800a894 <fonts8_78_char>:
 800a894:	00000006 0800a88c                       ........

0800a89c <fonts8_79>:
 800a89c:	50500c00 00003c50                       ..PPP<..

0800a8a4 <fonts8_79_char>:
 800a8a4:	00000006 0800a89c                       ........

0800a8ac <fonts8_7A>:
 800a8ac:	54644400 0000444c                       .DdTLD..

0800a8b4 <fonts8_7A_char>:
 800a8b4:	00000006 0800a8ac                       ........

0800a8bc <fonts8_7B>:
 800a8bc:	7f020400 00000402                       ........

0800a8c4 <fonts8_7B_char>:
 800a8c4:	00000006 0800a8bc                       ........

0800a8cc <fonts8_7C>:
 800a8cc:	00ff0000                                ....

0800a8d0 <fonts8_7C_char>:
 800a8d0:	00000004 0800a8cc                       ........

0800a8d8 <fonts8_7D>:
 800a8d8:	7f201000 00001020                       .. . ...

0800a8e0 <fonts8_7D_char>:
 800a8e0:	00000006 0800a8d8                       ........

0800a8e8 <fonts8_7E_C1>:
 800a8e8:	11117e00 00007e11                       .~...~..

0800a8f0 <fonts8_7E_C1_char>:
 800a8f0:	00000006 0800a8e8                       ........

0800a8f8 <fonts8_C2_C4>:
 800a8f8:	11117e00 00007e11                       .~...~..

0800a900 <fonts8_C2_C4_char>:
 800a900:	00000006 0800a8f8                       ........

0800a908 <fonts8_C5>:
 800a908:	11117e00 00007e11                       .~...~..

0800a910 <fonts8_C5_char>:
 800a910:	00000006 0800a908                       ........

0800a918 <fonts8_C6_E1>:
 800a918:	55542000 00007854                       . TUTx..

0800a920 <fonts8_C6_E1_char>:
 800a920:	00000006 0800a918                       ........

0800a928 <fonts8_E2_E4>:
 800a928:	54543800 00001854                       .8TTT...

0800a930 <fonts8_E2_E4_char>:
 800a930:	00000006 0800a928                       ....(...

0800a938 <fonts8_E5_E9>:
 800a938:	55543800 00001854                       .8TUT...

0800a940 <fonts8_E5_E9_char>:
 800a940:	00000006 0800a938                       ....8...

0800a948 <fonts8_EA_ED>:
 800a948:	7d440000 00000040                       ..D}@...

0800a950 <fonts8_EA_ED_char>:
 800a950:	00000006 0800a948                       ....H...

0800a958 <fonts8_EE_F1>:
 800a958:	05097c00 00007805                       .|...x..

0800a960 <fonts8_EE_F1_char>:
 800a960:	00000006 0800a958                       ....X...

0800a968 <fonts8_F2_F3>:
 800a968:	45443800 00003844                       .8DED8..

0800a970 <fonts8_F2_F3_char>:
 800a970:	00000006 0800a968                       ....h...

0800a978 <fonts8_F4_F6>:
 800a978:	44453800 00003845                       .8EDE8..

0800a980 <fonts8_F4_F6_char>:
 800a980:	00000006 0800a978                       ....x...

0800a988 <fonts8_F7_FA>:
 800a988:	41403c00 00007c20                       .<@A |..

0800a990 <fonts8_F7_FA_char>:
 800a990:	00000006 0800a988                       ........

0800a998 <fonts8_FB_FC>:
 800a998:	40413c00 00007c21                       .<A@!|..

0800a9a0 <fonts8_FB_FC_char>:
 800a9a0:	00000006 0800a998                       ........

0800a9a8 <fonts8_FD_FF>:
 800a9a8:	00000000                                ....

0800a9ac <fonts8_FD_FF_char>:
 800a9ac:	00000004 0800a9a8                       ........

0800a9b4 <audioleveltab>:
 800a9b4:	0f0a0604 7f402819                       .....(@.

0800a9bc <waveformSteps>:
 800a9bc:	00000002 20000260 00000003 2000025c     ....`.. ....\.. 
 800a9cc:	00000005 20000258 00000007 2000025c     ....X.. ....\.. 
 800a9dc:	00000008 20000260 0000000b 20000254     ....`.. ....T.. 

0800a9ec <buttonsConfig>:
 800a9ec:	08002fd9 080031c3 080030fd 00000000     ./...1...0......
 800a9fc:	08002fdb 080031b9 080030ed 00000001     ./...1...0......
 800aa0c:	08002fdd 080031af 080030dd 00000002     ./...1...0......
 800aa1c:	08002fdf 080031a5 080030cd 00000003     ./...1...0......
 800aa2c:	08002fe1 0800319b 080030bd 00000004     ./...1...0......
 800aa3c:	08002fe3 08003191 080030ad 00000005     ./...1...0......
 800aa4c:	08002fe5 08003187 0800309d 00000006     ./...1...0......
 800aa5c:	08002fe7 0800317d 0800308d 00000007     ./..}1...0......
 800aa6c:	08002fe9 08003173 0800307d 00000008     ./..s1..}0......
 800aa7c:	08002feb 08003169 0800306d 00000009     ./..i1..m0......
 800aa8c:	08002fed 0800315f 0800305d 0000000a     ./.._1..]0......
 800aa9c:	08002fef 08003155 0800304d 0000000b     ./..U1..M0......
 800aaac:	08002ff1 0800314b 0800303d 0000000c     ./..K1..=0......
 800aabc:	08002ff3 08003141 0800302d 0000000d     ./..A1..-0......
 800aacc:	08002ff5 08003137 0800301d 0000000e     ./..71...0......
 800aadc:	08002ff7 0800312d 0800300d 0000000f     ./..-1...0......
 800aaec:	08002ff9 08003123 08002ffd 00000010     ./..#1.../......
 800aafc:	33323130 37363534 62613938 66656463     0123456789abcdef
 800ab0c:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
 800ab1c:	7a797877 302d2300 6800202b 65004c6c     wxyz.#-0+ .hlL.e
 800ab2c:	46456766 31300047 35343332 39383736     fgEFG.0123456789
 800ab3c:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 800ab4c:	63626139 00666564                       9abcdef.
