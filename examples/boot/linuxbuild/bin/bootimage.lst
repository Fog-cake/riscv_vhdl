
..\linuxbuild\bin/bootimage:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <trap_table>:
  .globl interrupt_handler_c

trap_table:
# 8-bytes per exception entry
trap_table:
  j _start            # 
   0:	06c0006f          	j	6c <_start>
  nop
   4:	00000013          	nop
  j exception_entry   # Instruction Misaligned
   8:	1500006f          	j	158 <exception_entry>
  nop
   c:	00000013          	nop
  j exception_entry   # Instruction Load Fault
  10:	1480006f          	j	158 <exception_entry>
  nop
  14:	00000013          	nop
  j exception_entry   # Instruction Illegal
  18:	1400006f          	j	158 <exception_entry>
  nop
  1c:	00000013          	nop
  j exception_entry   # Breakpoint
  20:	1380006f          	j	158 <exception_entry>
  nop
  24:	00000013          	nop
  j exception_entry   # Load Misaligned
  28:	1300006f          	j	158 <exception_entry>
  nop
  2c:	00000013          	nop
  j exception_entry   # Load Fault
  30:	1280006f          	j	158 <exception_entry>
  nop
  34:	00000013          	nop
  j exception_entry   # Store Misaligned
  38:	1200006f          	j	158 <exception_entry>
  nop
  3c:	00000013          	nop
  j exception_entry   # Store Fault
  40:	1180006f          	j	158 <exception_entry>
  nop
  44:	00000013          	nop
  j exception_entry   # Call from U-mode
  48:	1100006f          	j	158 <exception_entry>
  nop
  4c:	00000013          	nop
  j exception_entry   # Call from S-mode
  50:	1080006f          	j	158 <exception_entry>
  nop
  54:	00000013          	nop
  j exception_entry   # Call from H-mode
  58:	1000006f          	j	158 <exception_entry>
  nop
  5c:	00000013          	nop
  j exception_entry   # Call from M-mode
  60:	0f80006f          	j	158 <exception_entry>
  nop
  64:	00000013          	nop

0000000000000068 <bad_trap>:

bad_trap:
  j bad_trap
  68:	0000006f          	j	68 <bad_trap>

000000000000006c <_start>:

_start:
  li  x1, 0
  6c:	00000093          	li	ra,0
  li  x2, 0
  70:	00000113          	li	sp,0
  li  x3, 0
  74:	00000193          	li	gp,0
  li  x4, 0
  78:	00000213          	li	tp,0
  li  x5, 0
  7c:	00000293          	li	t0,0
  li  x6, 0
  80:	00000313          	li	t1,0
  li  x7, 0
  84:	00000393          	li	t2,0
  li  x8, 0
  88:	00000413          	li	s0,0
  li  x9, 0
  8c:	00000493          	li	s1,0
  li  x10,0
  90:	00000513          	li	a0,0
  li  x11,0
  94:	00000593          	li	a1,0
  li  x12,0
  98:	00000613          	li	a2,0
  li  x13,0
  9c:	00000693          	li	a3,0
  li  x14,0
  a0:	00000713          	li	a4,0
  li  x15,0
  a4:	00000793          	li	a5,0
  li  x16,0
  a8:	00000813          	li	a6,0
  li  x17,0
  ac:	00000893          	li	a7,0
  li  x18,0
  b0:	00000913          	li	s2,0
  li  x19,0
  b4:	00000993          	li	s3,0
  li  x20,0
  b8:	00000a13          	li	s4,0
  li  x21,0
  bc:	00000a93          	li	s5,0
  li  x22,0
  c0:	00000b13          	li	s6,0
  li  x23,0
  c4:	00000b93          	li	s7,0
  li  x24,0
  c8:	00000c13          	li	s8,0
  li  x25,0
  cc:	00000c93          	li	s9,0
  li  x26,0
  d0:	00000d13          	li	s10,0
  li  x27,0
  d4:	00000d93          	li	s11,0
  li  x28,0
  d8:	00000e13          	li	t3,0
  li  x29,0
  dc:	00000e93          	li	t4,0
  li  x30,0
  e0:	00000f13          	li	t5,0
  li  x31,0
  e4:	00000f93          	li	t6,0
  ##! csrs (pseudo asm instruction) - set bit   
  ##! csrrs - atomic read and set bit
  ##! csrc (pseudo asm instruction) - clear bit 
  ##! csrrc - atomic read and clear bit

  li t0, 0x00001800   # MPP[12:11] = 0x3 (Previous to machine mode)
  e8:	000022b7          	lui	t0,0x2
  ec:	8002829b          	addiw	t0,t0,-2048
  csrc mstatus, t0    # run tests in user mode = 0, by clearing bits
  f0:	3002b073          	csrc	mstatus,t0
  li t0, 0x00000008   # Enable irq in machine and user modes after execution of xRET
  f4:	00800293          	li	t0,8
  csrs mstatus, t0    # enable interrupts in user mode
  f8:	3002a073          	csrs	mstatus,t0
  #csrs mstatus, t0    # enable FPU
  #li t0, MSTATUS_XS;   
  #csrs mstatus, t0    # enable accelerator

  ##! init mtvec register (see https://github.com/riscv/riscv-test-env/blob/master/p/riscv_test.h)
  la t0, interrupt_entry
  fc:	00000297          	auipc	t0,0x0
 100:	15828293          	addi	t0,t0,344 # 254 <interrupt_entry>
  csrw mtvec, t0
 104:	30529073          	csrw	mtvec,t0
  li t0, 0x00000800
 108:	000012b7          	lui	t0,0x1
 10c:	8002829b          	addiw	t0,t0,-2048
  csrs mie, t0       # Enable External irq (ftom PLIC) for M mode
 110:	3042a073          	csrs	mie,t0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
#endif

  ##! initialize global pointer (no need in it)
  lui gp, 0x10000
 114:	100001b7          	lui	gp,0x10000

  ##! get core id
  csrr a0, mhartid            # a0 <= MHARTID value
 118:	f1402573          	csrr	a0,mhartid

#define SRAM_BASE_ADDR  0x10000000
#define SRAM_SIZE_BYTES (1<<19)
#define STACK_CORE1_BYTES 4096

  li  sp, SRAM_BASE_ADDR+SRAM_SIZE_BYTES
 11c:	10080137          	lui	sp,0x10080
  li  a1, 1
 120:	00100593          	li	a1,1
  beq a0, a1, sp_init_core1
 124:	00b50663          	beq	a0,a1,130 <sp_init_core1>
  li  a1, 0
 128:	00000593          	li	a1,0
  beq a0, a1, sp_init_core0
 12c:	00b50463          	beq	a0,a1,134 <sp_init_core0>

0000000000000130 <sp_init_core1>:
sp_init_core1:
  j sp_init_coreall
 130:	00c0006f          	j	13c <sp_init_coreall>

0000000000000134 <sp_init_core0>:
sp_init_core0:
  li t0,-STACK_CORE1_BYTES
 134:	fffff2b7          	lui	t0,0xfffff
  add sp, sp, t0
 138:	00510133          	add	sp,sp,t0

000000000000013c <sp_init_coreall>:
sp_init_coreall:
  add tp, zero, sp            # tp = sp + 0 (mov)
 13c:	00200233          	add	tp,zero,sp
  ## Use tp register to save/restore registers context on task switching
  addi tp,tp,-256              # tp = tp - 256 = 0x1007ff00
 140:	f0020213          	addi	tp,tp,-256 # ffffffffffffff00 <_end+0xfffffffffffff560>
  addi sp, sp,-264
 144:	ef810113          	addi	sp,sp,-264 # 1007fef8 <_end+0x1007f558>

  # copy image 64 KB
  jal _init
 148:	474000ef          	jal	ra,5bc <_init>

  ##! jump to entry point in SRAM = 0x10000000
  ##!     'meps' - Machine Exception Program Coutner
  li  t0, SRAM_BASE_ADDR
 14c:	100002b7          	lui	t0,0x10000
  csrw mepc, t0
 150:	34129073          	csrw	mepc,t0
  ##! @see riscv-priv-spec-1.7.pdf. 3.2.1
  ##! After handling a trap, the ERET instruction is used to return to the privilege level at which the
  ##! trap occurred. In addition to manipulating the privilege stack as described in Section 3.1.5, ERET
  ##! sets the pc to the value stored in the Xepc register, where X is the privilege mode (S, H, or M) in
  ##! which the ERET instruction was executed.
  mret
 154:	30200073          	mret

0000000000000158 <exception_entry>:

exception_entry:
  fence
 158:	0ff0000f          	fence
  _save_context(tp)
 15c:	00123023          	sd	ra,0(tp) # 0 <trap_table>
 160:	00823423          	sd	s0,8(tp) # 8 <trap_table+0x8>
 164:	00923823          	sd	s1,16(tp) # 10 <trap_table+0x10>
 168:	01223c23          	sd	s2,24(tp) # 18 <trap_table+0x18>
 16c:	03323023          	sd	s3,32(tp) # 20 <trap_table+0x20>
 170:	03423423          	sd	s4,40(tp) # 28 <trap_table+0x28>
 174:	03523823          	sd	s5,48(tp) # 30 <trap_table+0x30>
 178:	03623c23          	sd	s6,56(tp) # 38 <trap_table+0x38>
 17c:	05723023          	sd	s7,64(tp) # 40 <trap_table+0x40>
 180:	05823423          	sd	s8,72(tp) # 48 <trap_table+0x48>
 184:	05923823          	sd	s9,80(tp) # 50 <trap_table+0x50>
 188:	05a23c23          	sd	s10,88(tp) # 58 <trap_table+0x58>
 18c:	07b23023          	sd	s11,96(tp) # 60 <trap_table+0x60>
 190:	06223423          	sd	sp,104(tp) # 68 <bad_trap>
 194:	07023c23          	sd	a6,120(tp) # 78 <_start+0xc>
 198:	09123023          	sd	a7,128(tp) # 80 <_start+0x14>
 19c:	08a23423          	sd	a0,136(tp) # 88 <_start+0x1c>
 1a0:	08b23823          	sd	a1,144(tp) # 90 <_start+0x24>
 1a4:	08c23c23          	sd	a2,152(tp) # 98 <_start+0x2c>
 1a8:	0ad23023          	sd	a3,160(tp) # a0 <_start+0x34>
 1ac:	0ae23423          	sd	a4,168(tp) # a8 <_start+0x3c>
 1b0:	0af23823          	sd	a5,176(tp) # b0 <_start+0x44>
 1b4:	0b023c23          	sd	a6,184(tp) # b8 <_start+0x4c>
 1b8:	0d123023          	sd	a7,192(tp) # c0 <_start+0x54>
 1bc:	0c523423          	sd	t0,200(tp) # c8 <_start+0x5c>
 1c0:	0c623823          	sd	t1,208(tp) # d0 <_start+0x64>
 1c4:	0c723c23          	sd	t2,216(tp) # d8 <_start+0x6c>
 1c8:	0fc23023          	sd	t3,224(tp) # e0 <_start+0x74>
 1cc:	0fd23423          	sd	t4,232(tp) # e8 <_start+0x7c>
 1d0:	0e323823          	sd	gp,240(tp) # f0 <_start+0x84>
  jal exception_handler_c
 1d4:	4fc000ef          	jal	ra,6d0 <exception_handler_c>
  _restore_context(tp)
 1d8:	00023083          	ld	ra,0(tp) # 0 <trap_table>
 1dc:	00823403          	ld	s0,8(tp) # 8 <trap_table+0x8>
 1e0:	01023483          	ld	s1,16(tp) # 10 <trap_table+0x10>
 1e4:	01823903          	ld	s2,24(tp) # 18 <trap_table+0x18>
 1e8:	02023983          	ld	s3,32(tp) # 20 <trap_table+0x20>
 1ec:	02823a03          	ld	s4,40(tp) # 28 <trap_table+0x28>
 1f0:	03023a83          	ld	s5,48(tp) # 30 <trap_table+0x30>
 1f4:	03823b03          	ld	s6,56(tp) # 38 <trap_table+0x38>
 1f8:	04023b83          	ld	s7,64(tp) # 40 <trap_table+0x40>
 1fc:	04823c03          	ld	s8,72(tp) # 48 <trap_table+0x48>
 200:	05023c83          	ld	s9,80(tp) # 50 <trap_table+0x50>
 204:	05823d03          	ld	s10,88(tp) # 58 <trap_table+0x58>
 208:	06023d83          	ld	s11,96(tp) # 60 <trap_table+0x60>
 20c:	06823103          	ld	sp,104(tp) # 68 <bad_trap>
 210:	07823803          	ld	a6,120(tp) # 78 <_start+0xc>
 214:	08023883          	ld	a7,128(tp) # 80 <_start+0x14>
 218:	08823503          	ld	a0,136(tp) # 88 <_start+0x1c>
 21c:	09023583          	ld	a1,144(tp) # 90 <_start+0x24>
 220:	09823603          	ld	a2,152(tp) # 98 <_start+0x2c>
 224:	0a023683          	ld	a3,160(tp) # a0 <_start+0x34>
 228:	0a823703          	ld	a4,168(tp) # a8 <_start+0x3c>
 22c:	0b023783          	ld	a5,176(tp) # b0 <_start+0x44>
 230:	0b823803          	ld	a6,184(tp) # b8 <_start+0x4c>
 234:	0c023883          	ld	a7,192(tp) # c0 <_start+0x54>
 238:	0c823283          	ld	t0,200(tp) # c8 <_start+0x5c>
 23c:	0d023303          	ld	t1,208(tp) # d0 <_start+0x64>
 240:	0d823383          	ld	t2,216(tp) # d8 <_start+0x6c>
 244:	0e023e03          	ld	t3,224(tp) # e0 <_start+0x74>
 248:	0e823e83          	ld	t4,232(tp) # e8 <_start+0x7c>
 24c:	0f023183          	ld	gp,240(tp) # f0 <_start+0x84>
  mret
 250:	30200073          	mret

0000000000000254 <interrupt_entry>:

interrupt_entry:
  ##! module CSRFile rises io_fatc signal that is cause of the 'ptw.invalidate'.
  fence
 254:	0ff0000f          	fence
  csrw mscratch, a0;
 258:	34051073          	csrw	mscratch,a0

  _save_context(tp)
 25c:	00123023          	sd	ra,0(tp) # 0 <trap_table>
 260:	00823423          	sd	s0,8(tp) # 8 <trap_table+0x8>
 264:	00923823          	sd	s1,16(tp) # 10 <trap_table+0x10>
 268:	01223c23          	sd	s2,24(tp) # 18 <trap_table+0x18>
 26c:	03323023          	sd	s3,32(tp) # 20 <trap_table+0x20>
 270:	03423423          	sd	s4,40(tp) # 28 <trap_table+0x28>
 274:	03523823          	sd	s5,48(tp) # 30 <trap_table+0x30>
 278:	03623c23          	sd	s6,56(tp) # 38 <trap_table+0x38>
 27c:	05723023          	sd	s7,64(tp) # 40 <trap_table+0x40>
 280:	05823423          	sd	s8,72(tp) # 48 <trap_table+0x48>
 284:	05923823          	sd	s9,80(tp) # 50 <trap_table+0x50>
 288:	05a23c23          	sd	s10,88(tp) # 58 <trap_table+0x58>
 28c:	07b23023          	sd	s11,96(tp) # 60 <trap_table+0x60>
 290:	06223423          	sd	sp,104(tp) # 68 <bad_trap>
 294:	07023c23          	sd	a6,120(tp) # 78 <_start+0xc>
 298:	09123023          	sd	a7,128(tp) # 80 <_start+0x14>
 29c:	08a23423          	sd	a0,136(tp) # 88 <_start+0x1c>
 2a0:	08b23823          	sd	a1,144(tp) # 90 <_start+0x24>
 2a4:	08c23c23          	sd	a2,152(tp) # 98 <_start+0x2c>
 2a8:	0ad23023          	sd	a3,160(tp) # a0 <_start+0x34>
 2ac:	0ae23423          	sd	a4,168(tp) # a8 <_start+0x3c>
 2b0:	0af23823          	sd	a5,176(tp) # b0 <_start+0x44>
 2b4:	0b023c23          	sd	a6,184(tp) # b8 <_start+0x4c>
 2b8:	0d123023          	sd	a7,192(tp) # c0 <_start+0x54>
 2bc:	0c523423          	sd	t0,200(tp) # c8 <_start+0x5c>
 2c0:	0c623823          	sd	t1,208(tp) # d0 <_start+0x64>
 2c4:	0c723c23          	sd	t2,216(tp) # d8 <_start+0x6c>
 2c8:	0fc23023          	sd	t3,224(tp) # e0 <_start+0x74>
 2cc:	0fd23423          	sd	t4,232(tp) # e8 <_start+0x7c>
 2d0:	0e323823          	sd	gp,240(tp) # f0 <_start+0x84>
  ##       long handle_trap(long cause, long epc, long long regs[32])
  ##             a0 = argument 1: cause
  ##             a1 = argument 2: mepc
  ##             a2 = argument 3: pointer on stack
  ## @return     a0 New instruction pointer offset
  csrr a0, mcause
 2d4:	34202573          	csrr	a0,mcause
  csrr a1, mepc
 2d8:	341025f3          	csrr	a1,mepc
  sd a1,COOP_REG_TP(tp)
 2dc:	06b23823          	sd	a1,112(tp) # 70 <_start+0x4>
  mv a2, sp
 2e0:	00010613          	mv	a2,sp
  # !!! Cannot reset external pending bits only via IrqController (page 28)
  li t0, 0x00000800
 2e4:	000012b7          	lui	t0,0x1
 2e8:	8002829b          	addiw	t0,t0,-2048
  csrc mip, t0      #csrc pseudo asm instruction clear CSR bit.
 2ec:	3442b073          	csrc	mip,t0
                    #[11] MEIP: machine pending external interrupt
  jal interrupt_handler_c
 2f0:	42e000ef          	jal	ra,71e <interrupt_handler_c>

  # tp-offset in the context array is used to save mepc value. An it may be
  # modified by isr handler during preemtive task switching.
  ld a1,COOP_REG_TP(tp)
 2f4:	07023583          	ld	a1,112(tp) # 70 <_start+0x4>
  csrw mepc,a1
 2f8:	34159073          	csrw	mepc,a1
  _restore_context(tp)
 2fc:	00023083          	ld	ra,0(tp) # 0 <trap_table>
 300:	00823403          	ld	s0,8(tp) # 8 <trap_table+0x8>
 304:	01023483          	ld	s1,16(tp) # 10 <trap_table+0x10>
 308:	01823903          	ld	s2,24(tp) # 18 <trap_table+0x18>
 30c:	02023983          	ld	s3,32(tp) # 20 <trap_table+0x20>
 310:	02823a03          	ld	s4,40(tp) # 28 <trap_table+0x28>
 314:	03023a83          	ld	s5,48(tp) # 30 <trap_table+0x30>
 318:	03823b03          	ld	s6,56(tp) # 38 <trap_table+0x38>
 31c:	04023b83          	ld	s7,64(tp) # 40 <trap_table+0x40>
 320:	04823c03          	ld	s8,72(tp) # 48 <trap_table+0x48>
 324:	05023c83          	ld	s9,80(tp) # 50 <trap_table+0x50>
 328:	05823d03          	ld	s10,88(tp) # 58 <trap_table+0x58>
 32c:	06023d83          	ld	s11,96(tp) # 60 <trap_table+0x60>
 330:	06823103          	ld	sp,104(tp) # 68 <bad_trap>
 334:	07823803          	ld	a6,120(tp) # 78 <_start+0xc>
 338:	08023883          	ld	a7,128(tp) # 80 <_start+0x14>
 33c:	08823503          	ld	a0,136(tp) # 88 <_start+0x1c>
 340:	09023583          	ld	a1,144(tp) # 90 <_start+0x24>
 344:	09823603          	ld	a2,152(tp) # 98 <_start+0x2c>
 348:	0a023683          	ld	a3,160(tp) # a0 <_start+0x34>
 34c:	0a823703          	ld	a4,168(tp) # a8 <_start+0x3c>
 350:	0b023783          	ld	a5,176(tp) # b0 <_start+0x44>
 354:	0b823803          	ld	a6,184(tp) # b8 <_start+0x4c>
 358:	0c023883          	ld	a7,192(tp) # c0 <_start+0x54>
 35c:	0c823283          	ld	t0,200(tp) # c8 <_start+0x5c>
 360:	0d023303          	ld	t1,208(tp) # d0 <_start+0x64>
 364:	0d823383          	ld	t2,216(tp) # d8 <_start+0x6c>
 368:	0e023e03          	ld	t3,224(tp) # e0 <_start+0x74>
 36c:	0e823e83          	ld	t4,232(tp) # e8 <_start+0x7c>
 370:	0f023183          	ld	gp,240(tp) # f0 <_start+0x84>
  mret
 374:	30200073          	mret
	...

0000000000000382 <fw_get_cpuid>:
#include "axi_maps.h"
#include "encoding.h"

static const int FW_IMAGE_SIZE_BYTES = 1 << 18;

int fw_get_cpuid() {
 382:	1101                	addi	sp,sp,-32
 384:	ec22                	sd	s0,24(sp)
 386:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mhartid" : "=r" (ret));
 388:	f14027f3          	csrr	a5,mhartid
 38c:	fef42623          	sw	a5,-20(s0)
    return ret;
 390:	fec42783          	lw	a5,-20(s0)
}
 394:	853e                	mv	a0,a5
 396:	6462                	ld	s0,24(sp)
 398:	6105                	addi	sp,sp,32
 39a:	8082                	ret

000000000000039c <led_set>:

void led_set(int output) {
 39c:	1101                	addi	sp,sp,-32
 39e:	ec22                	sd	s0,24(sp)
 3a0:	1000                	addi	s0,sp,32
 3a2:	87aa                	mv	a5,a0
 3a4:	fef42623          	sw	a5,-20(s0)
    // [3:0] DIP pins
    ((gpio_map *)ADDR_NASTI_SLAVE_GPIO)->ouser = (output << 4);
 3a8:	fec42783          	lw	a5,-20(s0)
 3ac:	0047979b          	slliw	a5,a5,0x4
 3b0:	0007871b          	sext.w	a4,a5
 3b4:	4785                	li	a5,1
 3b6:	07fe                	slli	a5,a5,0x1f
 3b8:	2701                	sext.w	a4,a4
 3ba:	c798                	sw	a4,8(a5)
}
 3bc:	0001                	nop
 3be:	6462                	ld	s0,24(sp)
 3c0:	6105                	addi	sp,sp,32
 3c2:	8082                	ret

00000000000003c4 <print_uart>:

void print_uart(const char *buf, int sz) {
 3c4:	7179                	addi	sp,sp,-48
 3c6:	f422                	sd	s0,40(sp)
 3c8:	1800                	addi	s0,sp,48
 3ca:	fca43c23          	sd	a0,-40(s0)
 3ce:	87ae                	mv	a5,a1
 3d0:	fcf42a23          	sw	a5,-44(s0)
    uart_map *uart = (uart_map *)ADDR_NASTI_SLAVE_UART1;
 3d4:	000807b7          	lui	a5,0x80
 3d8:	0785                	addi	a5,a5,1
 3da:	07b2                	slli	a5,a5,0xc
 3dc:	fef43023          	sd	a5,-32(s0)
    for (int i = 0; i < sz; i++) {
 3e0:	fe042623          	sw	zero,-20(s0)
 3e4:	a825                	j	41c <print_uart+0x58>
        while (uart->status & UART_STATUS_TX_FULL) {}
 3e6:	0001                	nop
 3e8:	fe043783          	ld	a5,-32(s0)
 3ec:	439c                	lw	a5,0(a5)
 3ee:	0007871b          	sext.w	a4,a5
 3f2:	4785                	li	a5,1
 3f4:	8ff9                	and	a5,a5,a4
 3f6:	2781                	sext.w	a5,a5
 3f8:	fbe5                	bnez	a5,3e8 <print_uart+0x24>
        uart->data = buf[i];
 3fa:	fec42783          	lw	a5,-20(s0)
 3fe:	fd843703          	ld	a4,-40(s0)
 402:	97ba                	add	a5,a5,a4
 404:	0007c783          	lbu	a5,0(a5) # 80000 <_end+0x7f660>
 408:	0007871b          	sext.w	a4,a5
 40c:	fe043783          	ld	a5,-32(s0)
 410:	cb98                	sw	a4,16(a5)
    for (int i = 0; i < sz; i++) {
 412:	fec42783          	lw	a5,-20(s0)
 416:	2785                	addiw	a5,a5,1
 418:	fef42623          	sw	a5,-20(s0)
 41c:	fec42703          	lw	a4,-20(s0)
 420:	fd442783          	lw	a5,-44(s0)
 424:	2701                	sext.w	a4,a4
 426:	2781                	sext.w	a5,a5
 428:	faf74fe3          	blt	a4,a5,3e6 <print_uart+0x22>
    }
}
 42c:	0001                	nop
 42e:	7422                	ld	s0,40(sp)
 430:	6145                	addi	sp,sp,48
 432:	8082                	ret

0000000000000434 <print_uart_hex>:

void print_uart_hex(long val) {
 434:	7139                	addi	sp,sp,-64
 436:	fc22                	sd	s0,56(sp)
 438:	0080                	addi	s0,sp,64
 43a:	fca43423          	sd	a0,-56(s0)
    unsigned char t, s;
    uart_map *uart = (uart_map *)ADDR_NASTI_SLAVE_UART1;
 43e:	000807b7          	lui	a5,0x80
 442:	0785                	addi	a5,a5,1
 444:	07b2                	slli	a5,a5,0xc
 446:	fef43023          	sd	a5,-32(s0)
    for (int i = 0; i < 16; i++) {
 44a:	fe042423          	sw	zero,-24(s0)
 44e:	a8ad                	j	4c8 <print_uart_hex+0x94>
        while (uart->status & UART_STATUS_TX_FULL) {}
 450:	0001                	nop
 452:	fe043783          	ld	a5,-32(s0)
 456:	439c                	lw	a5,0(a5)
 458:	0007871b          	sext.w	a4,a5
 45c:	4785                	li	a5,1
 45e:	8ff9                	and	a5,a5,a4
 460:	2781                	sext.w	a5,a5
 462:	fbe5                	bnez	a5,452 <print_uart_hex+0x1e>
        
        t = (unsigned char)((val >> ((15 - i) * 4)) & 0xf);
 464:	473d                	li	a4,15
 466:	fe842783          	lw	a5,-24(s0)
 46a:	40f707bb          	subw	a5,a4,a5
 46e:	2781                	sext.w	a5,a5
 470:	0027979b          	slliw	a5,a5,0x2
 474:	2781                	sext.w	a5,a5
 476:	fc843703          	ld	a4,-56(s0)
 47a:	40f757b3          	sra	a5,a4,a5
 47e:	0ff7f793          	andi	a5,a5,255
 482:	8bbd                	andi	a5,a5,15
 484:	fcf40fa3          	sb	a5,-33(s0)
        if (t < 10) {
 488:	fdf44783          	lbu	a5,-33(s0)
 48c:	0ff7f713          	andi	a4,a5,255
 490:	47a5                	li	a5,9
 492:	00e7e963          	bltu	a5,a4,4a4 <print_uart_hex+0x70>
            s = t + '0';
 496:	fdf44783          	lbu	a5,-33(s0)
 49a:	0307879b          	addiw	a5,a5,48
 49e:	fef407a3          	sb	a5,-17(s0)
 4a2:	a039                	j	4b0 <print_uart_hex+0x7c>
        } else {
            s = (t - 10) + 'a';
 4a4:	fdf44783          	lbu	a5,-33(s0)
 4a8:	0577879b          	addiw	a5,a5,87
 4ac:	fef407a3          	sb	a5,-17(s0)
        }
        uart->data = s;
 4b0:	fef44783          	lbu	a5,-17(s0)
 4b4:	0007871b          	sext.w	a4,a5
 4b8:	fe043783          	ld	a5,-32(s0)
 4bc:	cb98                	sw	a4,16(a5)
    for (int i = 0; i < 16; i++) {
 4be:	fe842783          	lw	a5,-24(s0)
 4c2:	2785                	addiw	a5,a5,1
 4c4:	fef42423          	sw	a5,-24(s0)
 4c8:	fe842783          	lw	a5,-24(s0)
 4cc:	0007871b          	sext.w	a4,a5
 4d0:	47bd                	li	a5,15
 4d2:	f6e7dfe3          	ble	a4,a5,450 <print_uart_hex+0x1c>
    }
}
 4d6:	0001                	nop
 4d8:	7462                	ld	s0,56(sp)
 4da:	6121                	addi	sp,sp,64
 4dc:	8082                	ret

00000000000004de <copy_image>:

void copy_image() { 
 4de:	7179                	addi	sp,sp,-48
 4e0:	f406                	sd	ra,40(sp)
 4e2:	f022                	sd	s0,32(sp)
 4e4:	1800                	addi	s0,sp,48
    uint32_t tech;
    uint64_t *fwrom = (uint64_t *)ADDR_NASTI_SLAVE_FWIMAGE;
 4e6:	001007b7          	lui	a5,0x100
 4ea:	fef43423          	sd	a5,-24(s0)
    uint64_t *sram = (uint64_t *)ADDR_NASTI_SLAVE_SRAM;
 4ee:	100007b7          	lui	a5,0x10000
 4f2:	fef43023          	sd	a5,-32(s0)
    pnp_map *pnp = (pnp_map *)ADDR_NASTI_SLAVE_PNP;
 4f6:	001007b7          	lui	a5,0x100
 4fa:	17fd                	addi	a5,a5,-1
 4fc:	07b2                	slli	a5,a5,0xc
 4fe:	fcf43c23          	sd	a5,-40(s0)

    /** 
     * Speed-up RTL simulation by skipping coping stage.
     * Or skip this stage to avoid rewritting of externally loaded image.
     */
    tech = pnp->tech & 0xFF;
 502:	fd843783          	ld	a5,-40(s0)
 506:	479c                	lw	a5,8(a5)
 508:	0ff7f793          	andi	a5,a5,255
 50c:	fcf42a23          	sw	a5,-44(s0)

    if (tech != TECH_INFERRED && pnp->fwid == 0) {
 510:	fd442783          	lw	a5,-44(s0)
 514:	2781                	sext.w	a5,a5
 516:	cf91                	beqz	a5,532 <copy_image+0x54>
 518:	fd843783          	ld	a5,-40(s0)
 51c:	43dc                	lw	a5,4(a5)
 51e:	eb91                	bnez	a5,532 <copy_image+0x54>
        memcpy(sram, fwrom, FW_IMAGE_SIZE_BYTES);
 520:	000407b7          	lui	a5,0x40
 524:	863e                	mv	a2,a5
 526:	fe843583          	ld	a1,-24(s0)
 52a:	fe043503          	ld	a0,-32(s0)
 52e:	2b2000ef          	jal	ra,7e0 <memcpy>
    }
    // Write Firmware ID to avoid copy image after soft-reset.
    pnp->fwid = 0x20190630;
 532:	fd843783          	ld	a5,-40(s0)
 536:	20190737          	lui	a4,0x20190
 53a:	6307071b          	addiw	a4,a4,1584
 53e:	c3d8                	sw	a4,4(a5)
    uint64_t *arr_csrs = (uint64_t *)0x80080000;
    uint64_t x1 = arr_csrs[CSR_MCPUID<<1]; 
    pnp->fwdbg1 = x1;
    arr_csrs[CSR_MCPUID<<1] = x1;
#endif
}
 540:	0001                	nop
 542:	70a2                	ld	ra,40(sp)
 544:	7402                	ld	s0,32(sp)
 546:	6145                	addi	sp,sp,48
 548:	8082                	ret

000000000000054a <timestamp_output>:

/** This function will be used during video recording to show
 how tochange npc register value on core[1] while core[0] is running
 Zephyr OS
*/
void timestamp_output() {
 54a:	1101                	addi	sp,sp,-32
 54c:	ec06                	sd	ra,24(sp)
 54e:	e822                	sd	s0,16(sp)
 550:	1000                	addi	s0,sp,32
    gptimers_map *tmr = (gptimers_map *)ADDR_NASTI_SLAVE_GPTIMERS;
 552:	000807b7          	lui	a5,0x80
 556:	0795                	addi	a5,a5,5
 558:	07b2                	slli	a5,a5,0xc
 55a:	fef43023          	sd	a5,-32(s0)
    uint64_t start = tmr->highcnt;
 55e:	fe043783          	ld	a5,-32(s0)
 562:	639c                	ld	a5,0(a5)
 564:	fef43423          	sd	a5,-24(s0)
    while (1) {
        if (tmr->highcnt < start || (start + SYS_HZ) < tmr->highcnt) {
 568:	fe043783          	ld	a5,-32(s0)
 56c:	639c                	ld	a5,0(a5)
 56e:	fe843703          	ld	a4,-24(s0)
 572:	00e7ee63          	bltu	a5,a4,58e <timestamp_output+0x44>
 576:	fe843703          	ld	a4,-24(s0)
 57a:	026267b7          	lui	a5,0x2626
 57e:	a0078793          	addi	a5,a5,-1536 # 2625a00 <_end+0x2625060>
 582:	973e                	add	a4,a4,a5
 584:	fe043783          	ld	a5,-32(s0)
 588:	639c                	ld	a5,0(a5)
 58a:	fcf77fe3          	bleu	a5,a4,568 <timestamp_output+0x1e>
            start = tmr->highcnt;
 58e:	fe043783          	ld	a5,-32(s0)
 592:	639c                	ld	a5,0(a5)
 594:	fef43423          	sd	a5,-24(s0)
            print_uart("HIGHCNT: ", 9);
 598:	45a5                	li	a1,9
 59a:	6785                	lui	a5,0x1
 59c:	8a078513          	addi	a0,a5,-1888 # 8a0 <memcpy+0xc0>
 5a0:	3c4000e7          	jalr	964(zero) # 3c4 <print_uart>
            print_uart_hex(start);
 5a4:	fe843783          	ld	a5,-24(s0)
 5a8:	853e                	mv	a0,a5
 5aa:	e8bff0ef          	jal	ra,434 <print_uart_hex>
            print_uart("\r\n", 2);
 5ae:	4589                	li	a1,2
 5b0:	6785                	lui	a5,0x1
 5b2:	8b078513          	addi	a0,a5,-1872 # 8b0 <memcpy+0xd0>
 5b6:	3c4000e7          	jalr	964(zero) # 3c4 <print_uart>
        if (tmr->highcnt < start || (start + SYS_HZ) < tmr->highcnt) {
 5ba:	b77d                	j	568 <timestamp_output+0x1e>

00000000000005bc <_init>:
        }
    }
}

void _init() {
 5bc:	7139                	addi	sp,sp,-64
 5be:	fc06                	sd	ra,56(sp)
 5c0:	f822                	sd	s0,48(sp)
 5c2:	0080                	addi	s0,sp,64
    uint32_t tech;
    pnp_map *pnp = (pnp_map *)ADDR_NASTI_SLAVE_PNP;
 5c4:	001007b7          	lui	a5,0x100
 5c8:	17fd                	addi	a5,a5,-1
 5ca:	07b2                	slli	a5,a5,0xc
 5cc:	fef43423          	sd	a5,-24(s0)
    uart_map *uart = (uart_map *)ADDR_NASTI_SLAVE_UART1;
 5d0:	000807b7          	lui	a5,0x80
 5d4:	0785                	addi	a5,a5,1
 5d6:	07b2                	slli	a5,a5,0xc
 5d8:	fef43023          	sd	a5,-32(s0)
    gpio_map *gpio = (gpio_map *)ADDR_NASTI_SLAVE_GPIO;
 5dc:	4785                	li	a5,1
 5de:	07fe                	slli	a5,a5,0x1f
 5e0:	fcf43c23          	sd	a5,-40(s0)
    irqctrl_map *p_irq = (irqctrl_map *)ADDR_NASTI_SLAVE_IRQCTRL;
 5e4:	400017b7          	lui	a5,0x40001
 5e8:	0786                	slli	a5,a5,0x1
 5ea:	fcf43823          	sd	a5,-48(s0)
  
    if (fw_get_cpuid() != 0) {
 5ee:	d95ff0ef          	jal	ra,382 <fw_get_cpuid>
 5f2:	87aa                	mv	a5,a0
 5f4:	c391                	beqz	a5,5f8 <_init+0x3c>
        // TODO: waiting event or something
        while(1) {}
 5f6:	a001                	j	5f6 <_init+0x3a>
    }

    // mask all interrupts in interrupt controller to avoid
    // unpredictable behaviour after elf-file reloading via debug port.
    p_irq->irq_mask = 0xFFFFFFFF;
 5f8:	fd043783          	ld	a5,-48(s0)
 5fc:	577d                	li	a4,-1
 5fe:	c398                	sw	a4,0(a5)

    // Half period of the uart = Fbus / 115200 / 2 = 70 MHz / 115200 / 2:
    uart->scaler = SYS_HZ / 115200 / 2;  // 40 MHz
 600:	fe043783          	ld	a5,-32(s0)
 604:	0ad00713          	li	a4,173
 608:	c3d8                	sw	a4,4(a5)

    gpio->direction = 0xF;  // [3:0] input DIP; [11:4] output LEDs
 60a:	fd843783          	ld	a5,-40(s0)
 60e:	473d                	li	a4,15
 610:	c398                	sw	a4,0(a5)

    led_set(0x01);
 612:	4505                	li	a0,1
 614:	39c000e7          	jalr	924(zero) # 39c <led_set>
    print_uart("Boot . . .", 10);
 618:	45a9                	li	a1,10
 61a:	6785                	lui	a5,0x1
 61c:	8b878513          	addi	a0,a5,-1864 # 8b8 <memcpy+0xd8>
 620:	da5ff0ef          	jal	ra,3c4 <print_uart>
    led_set(0x02);
 624:	4509                	li	a0,2
 626:	39c000e7          	jalr	924(zero) # 39c <led_set>

    copy_image();
 62a:	eb5ff0ef          	jal	ra,4de <copy_image>
    led_set(0x03);
 62e:	450d                	li	a0,3
 630:	39c000e7          	jalr	924(zero) # 39c <led_set>
    print_uart("OK\r\n", 4);
 634:	4591                	li	a1,4
 636:	6785                	lui	a5,0x1
 638:	8c878513          	addi	a0,a5,-1848 # 8c8 <memcpy+0xe8>
 63c:	d89ff0ef          	jal	ra,3c4 <print_uart>

    /** Check ADC detector that RF front-end is connected: */
    tech = (pnp->tech >> 24) & 0xff;
 640:	fe843783          	ld	a5,-24(s0)
 644:	479c                	lw	a5,8(a5)
 646:	0187d79b          	srliw	a5,a5,0x18
 64a:	fcf42623          	sw	a5,-52(s0)
    if (tech != 0xFF) {
 64e:	fcc42783          	lw	a5,-52(s0)
 652:	0007871b          	sext.w	a4,a5
 656:	0ff00793          	li	a5,255
 65a:	02f70563          	beq	a4,a5,684 <_init+0xc8>
        print_uart("ADC clock not found. Enable DIP int_rf.\r\n", 41);
 65e:	02900593          	li	a1,41
 662:	6785                	lui	a5,0x1
 664:	8d078513          	addi	a0,a5,-1840 # 8d0 <memcpy+0xf0>
 668:	d5dff0ef          	jal	ra,3c4 <print_uart>
        tech = (pnp->tech >> 24) & 0xff;
 66c:	fe843783          	ld	a5,-24(s0)
 670:	479c                	lw	a5,8(a5)
 672:	0187d79b          	srliw	a5,a5,0x18
 676:	fcf42623          	sw	a5,-52(s0)
        led_set(tech);
 67a:	fcc42783          	lw	a5,-52(s0)
 67e:	853e                	mv	a0,a5
 680:	39c000e7          	jalr	924(zero) # 39c <led_set>
    }
    led_set(0x04);
 684:	4511                	li	a0,4
 686:	39c000e7          	jalr	924(zero) # 39c <led_set>
}
 68a:	0001                	nop
 68c:	70e2                	ld	ra,56(sp)
 68e:	7442                	ld	s0,48(sp)
 690:	6121                	addi	sp,sp,64
 692:	8082                	ret

0000000000000694 <main>:

/** Not used actually */
int main() {
 694:	1141                	addi	sp,sp,-16
 696:	e422                	sd	s0,8(sp)
 698:	0800                	addi	s0,sp,16
    while (1) {}
 69a:	a001                	j	69a <main+0x6>

000000000000069c <get_mcause>:

extern void print_uart(const char *buf, int sz);
extern void print_uart_hex(long val);
extern void led_set(int output);

int get_mcause() {
 69c:	1101                	addi	sp,sp,-32
 69e:	ec22                	sd	s0,24(sp)
 6a0:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mcause" : "=r" (ret));
 6a2:	342027f3          	csrr	a5,mcause
 6a6:	fef42623          	sw	a5,-20(s0)
    return ret;
 6aa:	fec42783          	lw	a5,-20(s0)
}
 6ae:	853e                	mv	a0,a5
 6b0:	6462                	ld	s0,24(sp)
 6b2:	6105                	addi	sp,sp,32
 6b4:	8082                	ret

00000000000006b6 <get_mepc>:

int get_mepc() {
 6b6:	1101                	addi	sp,sp,-32
 6b8:	ec22                	sd	s0,24(sp)
 6ba:	1000                	addi	s0,sp,32
    int ret;
    asm("csrr %0, mepc" : "=r" (ret));
 6bc:	341027f3          	csrr	a5,mepc
 6c0:	fef42623          	sw	a5,-20(s0)
    return ret;
 6c4:	fec42783          	lw	a5,-20(s0)
}
 6c8:	853e                	mv	a0,a5
 6ca:	6462                	ld	s0,24(sp)
 6cc:	6105                	addi	sp,sp,32
 6ce:	8082                	ret

00000000000006d0 <exception_handler_c>:

void exception_handler_c() {
 6d0:	1141                	addi	sp,sp,-16
 6d2:	e406                	sd	ra,8(sp)
 6d4:	e022                	sd	s0,0(sp)
 6d6:	0800                	addi	s0,sp,16
    print_uart("mcause:", 7);
 6d8:	459d                	li	a1,7
 6da:	6785                	lui	a5,0x1
 6dc:	90078513          	addi	a0,a5,-1792 # 900 <memcpy+0x120>
 6e0:	ce5ff0ef          	jal	ra,3c4 <print_uart>
    print_uart_hex(get_mcause());
 6e4:	fb9ff0ef          	jal	ra,69c <get_mcause>
 6e8:	87aa                	mv	a5,a0
 6ea:	853e                	mv	a0,a5
 6ec:	434000e7          	jalr	1076(zero) # 434 <print_uart_hex>
    print_uart(",mepc:", 6);
 6f0:	4599                	li	a1,6
 6f2:	6785                	lui	a5,0x1
 6f4:	90878513          	addi	a0,a5,-1784 # 908 <memcpy+0x128>
 6f8:	ccdff0ef          	jal	ra,3c4 <print_uart>
    print_uart_hex(get_mepc());
 6fc:	6b6000e7          	jalr	1718(zero) # 6b6 <get_mepc>
 700:	87aa                	mv	a5,a0
 702:	853e                	mv	a0,a5
 704:	434000e7          	jalr	1076(zero) # 434 <print_uart_hex>
    print_uart("\r\n", 2);
 708:	4589                	li	a1,2
 70a:	6785                	lui	a5,0x1
 70c:	91078513          	addi	a0,a5,-1776 # 910 <memcpy+0x130>
 710:	cb5ff0ef          	jal	ra,3c4 <print_uart>

    /// Exception trap
    led_set(0xF0);
 714:	0f000513          	li	a0,240
 718:	39c000e7          	jalr	924(zero) # 39c <led_set>
    while (1) {}
 71c:	a001                	j	71c <exception_handler_c+0x4c>

000000000000071e <interrupt_handler_c>:
}

long interrupt_handler_c(long cause, long epc, long long regs[32]) {
 71e:	715d                	addi	sp,sp,-80
 720:	e486                	sd	ra,72(sp)
 722:	e0a2                	sd	s0,64(sp)
 724:	0880                	addi	s0,sp,80
 726:	fca43423          	sd	a0,-56(s0)
 72a:	fcb43023          	sd	a1,-64(s0)
 72e:	fac43c23          	sd	a2,-72(s0)
     * If we woudn't do it the interrupt handler will be called infinitly
     *
     * Rise interrupt from the software maybe done sending a self-IPI:
     *      csrwi mipi, 0
     */
    irqctrl_map *p_irqctrl = (irqctrl_map *)ADDR_NASTI_SLAVE_IRQCTRL;
 732:	400017b7          	lui	a5,0x40001
 736:	0786                	slli	a5,a5,0x1
 738:	fef43023          	sd	a5,-32(s0)
    IRQ_HANDLER irq_handler = (IRQ_HANDLER)p_irqctrl->isr_table;
 73c:	fe043783          	ld	a5,-32(s0)
 740:	6b9c                	ld	a5,16(a5)
 742:	fcf43c23          	sd	a5,-40(s0)
    uint32_t pending;
    csr_mcause_type mcause;

    mcause.value = cause;
 746:	fc843783          	ld	a5,-56(s0)
 74a:	fcf43823          	sd	a5,-48(s0)
    p_irqctrl->dbg_cause = cause;
 74e:	fc843703          	ld	a4,-56(s0)
 752:	fe043783          	ld	a5,-32(s0)
 756:	ef98                	sd	a4,24(a5)
    p_irqctrl->dbg_epc = epc;
 758:	fc043703          	ld	a4,-64(s0)
 75c:	fe043783          	ld	a5,-32(s0)
 760:	f398                	sd	a4,32(a5)

    p_irqctrl->irq_lock = 1;
 762:	fe043783          	ld	a5,-32(s0)
 766:	4705                	li	a4,1
 768:	d798                	sw	a4,40(a5)
    pending = p_irqctrl->irq_pending;
 76a:	fe043783          	ld	a5,-32(s0)
 76e:	43dc                	lw	a5,4(a5)
 770:	fef42623          	sw	a5,-20(s0)
    p_irqctrl->irq_clear = pending;
 774:	fe043783          	ld	a5,-32(s0)
 778:	fec42703          	lw	a4,-20(s0)
 77c:	c798                	sw	a4,8(a5)
    p_irqctrl->irq_lock = 0;
 77e:	fe043783          	ld	a5,-32(s0)
 782:	0207a423          	sw	zero,40(a5) # 40001028 <_end+0x40000688>

    for (int i = 0; i < CFG_IRQ_TOTAL; i++) {
 786:	fe042423          	sw	zero,-24(s0)
 78a:	a82d                	j	7c4 <interrupt_handler_c+0xa6>
        if (pending & 0x1) {
 78c:	fec42783          	lw	a5,-20(s0)
 790:	8b85                	andi	a5,a5,1
 792:	2781                	sext.w	a5,a5
 794:	cf89                	beqz	a5,7ae <interrupt_handler_c+0x90>
            p_irqctrl->irq_cause_idx = i;
 796:	fe842703          	lw	a4,-24(s0)
 79a:	fe043783          	ld	a5,-32(s0)
 79e:	d7d8                	sw	a4,44(a5)
            irq_handler(i, NULL);
 7a0:	fe842783          	lw	a5,-24(s0)
 7a4:	fd843703          	ld	a4,-40(s0)
 7a8:	4581                	li	a1,0
 7aa:	853e                	mv	a0,a5
 7ac:	9702                	jalr	a4
        }
        pending >>= 1;
 7ae:	fec42783          	lw	a5,-20(s0)
 7b2:	0017d79b          	srliw	a5,a5,0x1
 7b6:	fef42623          	sw	a5,-20(s0)
    for (int i = 0; i < CFG_IRQ_TOTAL; i++) {
 7ba:	fe842783          	lw	a5,-24(s0)
 7be:	2785                	addiw	a5,a5,1
 7c0:	fef42423          	sw	a5,-24(s0)
 7c4:	fe842783          	lw	a5,-24(s0)
 7c8:	0007871b          	sext.w	a4,a5
 7cc:	4791                	li	a5,4
 7ce:	fae7dfe3          	ble	a4,a5,78c <interrupt_handler_c+0x6e>
    }

    return epc;
 7d2:	fc043783          	ld	a5,-64(s0)
}
 7d6:	853e                	mv	a0,a5
 7d8:	60a6                	ld	ra,72(sp)
 7da:	6406                	ld	s0,64(sp)
 7dc:	6161                	addi	sp,sp,80
 7de:	8082                	ret

00000000000007e0 <memcpy>:
 7e0:	00a5c7b3          	xor	a5,a1,a0
 7e4:	8b9d                	andi	a5,a5,7
 7e6:	00c50733          	add	a4,a0,a2
 7ea:	e781                	bnez	a5,7f2 <memcpy+0x12>
 7ec:	479d                	li	a5,7
 7ee:	00c7ef63          	bltu	a5,a2,80c <memcpy+0x2c>
 7f2:	87aa                	mv	a5,a0
 7f4:	00e56963          	bltu	a0,a4,806 <memcpy+0x26>
 7f8:	8082                	ret
 7fa:	0005c683          	lbu	a3,0(a1)
 7fe:	0785                	addi	a5,a5,1
 800:	0585                	addi	a1,a1,1
 802:	fed78fa3          	sb	a3,-1(a5)
 806:	fee7eae3          	bltu	a5,a4,7fa <memcpy+0x1a>
 80a:	8082                	ret
 80c:	00757793          	andi	a5,a0,7
 810:	ebbd                	bnez	a5,886 <memcpy+0xa6>
 812:	87aa                	mv	a5,a0
 814:	ff877693          	andi	a3,a4,-8
 818:	fc068613          	addi	a2,a3,-64
 81c:	06c7fc63          	bleu	a2,a5,894 <memcpy+0xb4>
 820:	0005b383          	ld	t2,0(a1)
 824:	0085b283          	ld	t0,8(a1)
 828:	0105bf83          	ld	t6,16(a1)
 82c:	0185bf03          	ld	t5,24(a1)
 830:	0205be83          	ld	t4,32(a1)
 834:	0285be03          	ld	t3,40(a1)
 838:	0305b303          	ld	t1,48(a1)
 83c:	0385b883          	ld	a7,56(a1)
 840:	04858593          	addi	a1,a1,72
 844:	04878793          	addi	a5,a5,72
 848:	ff85b803          	ld	a6,-8(a1)
 84c:	fa77bc23          	sd	t2,-72(a5)
 850:	fc57b023          	sd	t0,-64(a5)
 854:	fdf7b423          	sd	t6,-56(a5)
 858:	fde7b823          	sd	t5,-48(a5)
 85c:	fdd7bc23          	sd	t4,-40(a5)
 860:	ffc7b023          	sd	t3,-32(a5)
 864:	fe67b423          	sd	t1,-24(a5)
 868:	ff17b823          	sd	a7,-16(a5)
 86c:	ff07bc23          	sd	a6,-8(a5)
 870:	b775                	j	81c <memcpy+0x3c>
 872:	0005c683          	lbu	a3,0(a1)
 876:	0785                	addi	a5,a5,1
 878:	0585                	addi	a1,a1,1
 87a:	fed78fa3          	sb	a3,-1(a5)
 87e:	0077f693          	andi	a3,a5,7
 882:	fae5                	bnez	a3,872 <memcpy+0x92>
 884:	bf41                	j	814 <memcpy+0x34>
 886:	87aa                	mv	a5,a0
 888:	bfdd                	j	87e <memcpy+0x9e>
 88a:	6190                	ld	a2,0(a1)
 88c:	07a1                	addi	a5,a5,8
 88e:	05a1                	addi	a1,a1,8
 890:	fec7bc23          	sd	a2,-8(a5)
 894:	fed7ebe3          	bltu	a5,a3,88a <memcpy+0xaa>
 898:	f6e7e7e3          	bltu	a5,a4,806 <memcpy+0x26>
 89c:	8082                	ret
	...
